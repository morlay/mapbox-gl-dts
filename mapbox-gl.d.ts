// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../@mapbox/point-geometry
//   ../../@mapbox/geojson-types
//   ../../potpack
//   ../../@mapbox/tiny-sdf
//   ../../gl-matrix
//   ../../grid-index

declare module 'mapbox-gl' {
    import Map from 'mapbox-gl/ui/map';
    import NavigationControl from 'mapbox-gl/ui/control/navigation_control';
    import GeolocateControl from 'mapbox-gl/ui/control/geolocate_control';
    import AttributionControl from 'mapbox-gl/ui/control/attribution_control';
    import ScaleControl from 'mapbox-gl/ui/control/scale_control';
    import FullscreenControl from 'mapbox-gl/ui/control/fullscreen_control';
    import Popup from 'mapbox-gl/ui/popup';
    import Marker from 'mapbox-gl/ui/marker';
    import Style from 'mapbox-gl/style/style';
    import LngLat from 'mapbox-gl/geo/lng_lat';
    import LngLatBounds from 'mapbox-gl/geo/lng_lat_bounds';
    import Point from '@mapbox/point-geometry';
    import MercatorCoordinate from 'mapbox-gl/geo/mercator_coordinate';
    import { Evented } from 'mapbox-gl/util/evented';
    const exported: {
        version: any;
        supported: {
            (options?: {
                failIfMajorPerformanceCaveat: boolean;
            }): boolean;
            webGLContextAttributes: WebGLContextAttributes;
        };
        setRTLTextPlugin: (url: string, callback: (error: Error) => void) => void;
        getRTLTextPluginStatus: () => string;
        Map: typeof Map;
        NavigationControl: typeof NavigationControl;
        GeolocateControl: typeof GeolocateControl;
        AttributionControl: typeof AttributionControl;
        ScaleControl: typeof ScaleControl;
        FullscreenControl: typeof FullscreenControl;
        Popup: typeof Popup;
        Marker: typeof Marker;
        Style: typeof Style;
        LngLat: typeof LngLat;
        LngLatBounds: typeof LngLatBounds;
        Point: typeof Point;
        MercatorCoordinate: typeof MercatorCoordinate;
        Evented: typeof Evented;
        config: {
            API_URL: string;
            EVENTS_URL: string;
            FEEDBACK_URL: string;
            REQUIRE_ACCESS_TOKEN: boolean;
            ACCESS_TOKEN: string;
            MAX_PARALLEL_IMAGE_REQUESTS: number;
        };
        accessToken: string;
        baseApiUrl: string;
        workerCount: number;
        maxParallelImageRequests: number;
        clearStorage(callback?: (err?: Error) => void): void;
        workerUrl: string;
    };
    export default exported;
}

declare module 'mapbox-gl/ui/map' {
    import { RequestManager } from 'mapbox-gl/util/mapbox';
    import Style from 'mapbox-gl/style/style';
    import Painter from 'mapbox-gl/render/painter';
    import Hash from 'mapbox-gl/ui/hash';
    import Camera from 'mapbox-gl/ui/camera';
    import LngLatBounds from 'mapbox-gl/geo/lng_lat_bounds';
    import Point from '@mapbox/point-geometry';
    import { Event } from 'mapbox-gl/util/evented';
    import TaskQueue from 'mapbox-gl/util/task_queue';
    import { PointLike } from '@mapbox/point-geometry';
    import { RequestTransformFunction } from 'mapbox-gl/util/mapbox';
    import { LngLatLike } from 'mapbox-gl/geo/lng_lat';
    import { LngLatBoundsLike } from 'mapbox-gl/geo/lng_lat_bounds';
    import { StyleOptions, StyleSetterOptions } from 'mapbox-gl/style/style';
    import { MapEvent } from 'mapbox-gl/ui/events';
    import { CustomLayerInterface } from 'mapbox-gl/style/style_layer/custom_style_layer';
    import { StyleImageInterface } from 'mapbox-gl/style/style_image';
    import ScrollZoomHandler from 'mapbox-gl/ui/handler/scroll_zoom';
    import BoxZoomHandler from 'mapbox-gl/ui/handler/box_zoom';
    import DragRotateHandler from 'mapbox-gl/ui/handler/drag_rotate';
    import DragPanHandler from 'mapbox-gl/ui/handler/drag_pan';
    import KeyboardHandler from 'mapbox-gl/ui/handler/keyboard';
    import DoubleClickZoomHandler from 'mapbox-gl/ui/handler/dblclick_zoom';
    import TouchZoomRotateHandler from 'mapbox-gl/ui/handler/touch_zoom_rotate';
    import { TaskID } from 'mapbox-gl/util/task_queue';
    import { Cancelable } from 'mapbox-gl/types/cancelable';
    import { LayerSpecification, FilterSpecification, StyleSpecification, LightSpecification, SourceSpecification } from 'mapbox-gl/style-spec/types';
    type ControlPosition = "top-left" | "top-right" | "bottom-left" | "bottom-right";
    type IControl = {
        onAdd(map: Map): HTMLElement;
        onRemove(map: Map): void;
        readonly getDefaultPosition?: () => ControlPosition;
    };
    type MapOptions = {
        hash?: boolean | string;
        interactive?: boolean;
        container: HTMLElement | string;
        bearingSnap?: number;
        attributionControl?: boolean;
        customAttribution?: string | Array<string>;
        logoPosition?: ControlPosition;
        failIfMajorPerformanceCaveat?: boolean;
        preserveDrawingBuffer?: boolean;
        antialias?: boolean;
        refreshExpiredTiles?: boolean;
        maxBounds?: LngLatBoundsLike;
        scrollZoom?: boolean;
        minZoom?: number | null;
        maxZoom?: number | null;
        boxZoom?: boolean;
        dragRotate?: boolean;
        dragPan?: boolean;
        keyboard?: boolean;
        doubleClickZoom?: boolean;
        touchZoomRotate?: boolean;
        trackResize?: boolean;
        center?: LngLatLike;
        zoom?: number;
        bearing?: number;
        pitch?: number;
        renderWorldCopies?: boolean;
        maxTileCacheSize?: number;
        transformRequest?: RequestTransformFunction;
        accessToken: string;
    };
    class Map extends Camera {
        style: Style;
        painter: Painter;
        _container: HTMLElement;
        _missingCSSCanary: HTMLElement;
        _canvasContainer: HTMLElement;
        _controlContainer: HTMLElement;
        _controlPositions: {
            [x: string]: HTMLElement;
        };
        _interactive: boolean | undefined | null;
        _showTileBoundaries: boolean | undefined | null;
        _showCollisionBoxes: boolean | undefined | null;
        _showOverdrawInspector: boolean;
        _repaint: boolean | undefined | null;
        _vertices: boolean | undefined | null;
        _canvas: HTMLCanvasElement;
        _maxTileCacheSize: number;
        _frame: Cancelable | undefined | null;
        _styleDirty: boolean | undefined | null;
        _sourcesDirty: boolean | undefined | null;
        _placementDirty: boolean | undefined | null;
        _loaded: boolean;
        _trackResize: boolean;
        _preserveDrawingBuffer: boolean;
        _failIfMajorPerformanceCaveat: boolean;
        _antialias: boolean;
        _refreshExpiredTiles: boolean;
        _hash: Hash;
        _delegatedListeners: any;
        _fadeDuration: number;
        _crossSourceCollisions: boolean;
        _crossFadingFactor: number;
        _collectResourceTiming: boolean;
        _renderTaskQueue: TaskQueue;
        _controls: Array<IControl>;
        _mapId: number;
        _localIdeographFontFamily: string;
        _requestManager: RequestManager;
        scrollZoom: ScrollZoomHandler;
        boxZoom: BoxZoomHandler;
        dragRotate: DragRotateHandler;
        dragPan: DragPanHandler;
        keyboard: KeyboardHandler;
        doubleClickZoom: DoubleClickZoomHandler;
        touchZoomRotate: TouchZoomRotateHandler;
        constructor(options: MapOptions);
        _getMapId(): number;
        addControl(control: IControl, position?: ControlPosition): this;
        removeControl(control: IControl): this;
        resize(eventData?: object): this;
        getBounds(): LngLatBounds;
        getMaxBounds(): LngLatBounds | null;
        setMaxBounds(bounds: LngLatBoundsLike): this;
        setMinZoom(minZoom?: number | null): this;
        getMinZoom(): number;
        setMaxZoom(maxZoom?: number | null): this;
        getMaxZoom(): number;
        getRenderWorldCopies(): boolean;
        setRenderWorldCopies(renderWorldCopies?: boolean | null): this;
        project(lnglat: LngLatLike): Point;
        unproject(point: PointLike): any;
        isMoving(): boolean;
        isZooming(): boolean;
        isRotating(): boolean;
        on(type: MapEvent, layerId: any, listener: any): this;
        off(type: MapEvent, layerId: any, listener: any): this;
        queryRenderedFeatures(geometry?: PointLike | [PointLike, PointLike], options?: object): any[];
        querySourceFeatures(sourceId: string, parameters?: {
            sourceLayer: string | undefined | null;
            filter: Array<any> | undefined | null;
            validate?: boolean;
        } | null): any[];
        setStyle(style: StyleSpecification | string | null, options?: {
            diff?: boolean;
        } & StyleOptions): this;
        _updateStyle(style: StyleSpecification | string | null, options?: {
            diff?: boolean;
        } & StyleOptions): this;
        _diffStyle(style: StyleSpecification | string, options?: {
            diff?: boolean;
        } & StyleOptions): void;
        _updateDiff(style: StyleSpecification, options?: {
            diff?: boolean;
        } & StyleOptions): void;
        getStyle(): object;
        isStyleLoaded(): boolean | void;
        addSource(id: string, source: SourceSpecification): this;
        isSourceLoaded(id: string): boolean;
        areTilesLoaded(): boolean;
        addSourceType(name: string, SourceType: any, callback: Function): any;
        removeSource(id: string): this;
        getSource(id: string): object;
        addImage(id: string, image: HTMLImageElement | ImageData | {
            width: number;
            height: number;
            data: Uint8Array | Uint8ClampedArray;
        } | StyleImageInterface, { pixelRatio, sdf }?: {
            pixelRatio?: number;
            sdf?: boolean;
        }): this;
        updateImage(id: string, image: HTMLImageElement | ImageData | {
            width: number;
            height: number;
            data: Uint8Array | Uint8ClampedArray;
        } | StyleImageInterface): this;
        hasImage(id: string): boolean;
        removeImage(id: string): void;
        loadImage(url: string, callback: Function): void;
        listImages(): string[];
        addLayer(layer: LayerSpecification | CustomLayerInterface, beforeId?: string): this;
        moveLayer(id: string, beforeId?: string): this;
        removeLayer(id: string): this;
        getLayer(id: string): object;
        setLayerZoomRange(layerId: string, minzoom: number, maxzoom: number): this;
        setFilter(layerId: string, filter?: FilterSpecification | null, options?: StyleSetterOptions): this;
        getFilter(layerId: string): any;
        setPaintProperty(layerId: string, name: string, value: any, options?: StyleSetterOptions): this;
        getPaintProperty(layerId: string, name: string): any;
        setLayoutProperty(layerId: string, name: string, value: any, options?: StyleSetterOptions): this;
        getLayoutProperty(layerId: string, name: string): any;
        setLight(light: LightSpecification, options?: StyleSetterOptions): this;
        getLight(): any;
        setFeatureState(feature: {
            source: string;
            sourceLayer?: string;
            id: string | number;
        }, state: object): this;
        removeFeatureState(target: {
            source: string;
            sourceLayer?: string;
            id?: string | number;
        }, key?: string): this;
        getFeatureState(feature: {
            source: string;
            sourceLayer?: string;
            id: string | number;
        }): any;
        getContainer(): HTMLElement;
        getCanvasContainer(): HTMLElement;
        getCanvas(): HTMLCanvasElement;
        _containerDimensions(): number[];
        _detectMissingCSS(): void;
        _setupContainer(): void;
        _resizeCanvas(width: number, height: number): void;
        _setupPainter(): void;
        _contextLost(event: any): void;
        _contextRestored(event: any): void;
        loaded(): boolean;
        _update(updateStyle?: boolean): this;
        _requestRenderFrame(callback: () => void): TaskID;
        _cancelRenderFrame(id: TaskID): void;
        _render(): this;
        remove(): void;
        triggerRepaint(): void;
        _onWindowOnline(): void;
        _onWindowResize(event: Event): void;
        get showTileBoundaries(): boolean;
        set showTileBoundaries(value: boolean);
        get showCollisionBoxes(): boolean;
        set showCollisionBoxes(value: boolean);
        get showOverdrawInspector(): boolean;
        set showOverdrawInspector(value: boolean);
        get repaint(): boolean;
        set repaint(value: boolean);
        get vertices(): boolean;
        set vertices(value: boolean);
        _setCacheLimits(limit: number, checkThreshold: number): void;
        get version(): string;
    }
    export default Map;
}

declare module 'mapbox-gl/ui/control/navigation_control' {
    import DragRotateHandler from 'mapbox-gl/ui/handler/drag_rotate';
    import Map from 'mapbox-gl/ui/map';
    type Options = {
        showCompass?: boolean;
        showZoom?: boolean;
        visualizePitch?: boolean;
    };
    class NavigationControl {
        _map: Map;
        options: Options;
        _container: HTMLElement;
        _zoomInButton: HTMLElement;
        _zoomOutButton: HTMLElement;
        _compass: HTMLElement;
        _compassArrow: HTMLElement;
        _handler: DragRotateHandler;
        constructor(options: Options);
        _updateZoomButtons(): void;
        _rotateCompassArrow(): void;
        onAdd(map: Map): HTMLElement;
        onRemove(): void;
        _createButton(className: string, ariaLabel: string, fn: () => unknown): any;
    }
    export default NavigationControl;
}

declare module 'mapbox-gl/ui/control/geolocate_control' {
    import { Evented } from 'mapbox-gl/util/evented';
    import Marker from 'mapbox-gl/ui/marker';
    import Map from 'mapbox-gl/ui/map';
    import { AnimationOptions, CameraOptions } from 'mapbox-gl/ui/camera';
    type Options = {
        positionOptions?: PositionOptions;
        fitBoundsOptions?: AnimationOptions & CameraOptions;
        trackUserLocation?: boolean;
        showUserLocation?: boolean;
    };
    class GeolocateControl extends Evented {
        _map: Map;
        options: Options;
        _container: HTMLElement;
        _dotElement: HTMLElement;
        _geolocateButton: HTMLButtonElement;
        _geolocationWatchID: number;
        _timeoutId: number | undefined | null;
        _watchState: "OFF" | "ACTIVE_LOCK" | "WAITING_ACTIVE" | "ACTIVE_ERROR" | "BACKGROUND" | "BACKGROUND_ERROR";
        _lastKnownPosition: any;
        _userLocationDotMarker: Marker;
        _setup: boolean;
        constructor(options: Options);
        onAdd(map: Map): HTMLElement;
        onRemove(): void;
        _isOutOfMapMaxBounds(position: Position): boolean;
        _setErrorState(): void;
        _onSuccess(position: Position): void;
        _updateCamera(position: Position): void;
        _updateMarker(position?: Position | null): void;
        _onError(error: PositionError): void;
        _finish(): void;
        _setupUI(supported: boolean): void;
        trigger(): boolean;
        _clearWatch(): void;
    }
    export default GeolocateControl;
}

declare module 'mapbox-gl/ui/control/attribution_control' {
    import Map from 'mapbox-gl/ui/map';
    type Options = {
        compact?: boolean;
        customAttribution?: string | Array<string>;
    };
    class AttributionControl {
        options: Options;
        _map: Map;
        _container: HTMLElement;
        _innerContainer: HTMLElement;
        _editLink: HTMLAnchorElement | undefined | null;
        _attribHTML: string;
        styleId: string;
        styleOwner: string;
        constructor(options?: Options);
        getDefaultPosition(): string;
        onAdd(map: Map): HTMLElement;
        onRemove(): void;
        _updateEditLink(): void;
        _updateData(e: any): void;
        _updateAttributions(): void;
        _updateCompact(): void;
    }
    export default AttributionControl;
}

declare module 'mapbox-gl/ui/control/scale_control' {
    import Map from 'mapbox-gl/ui/map';
    type Unit = "imperial" | "metric" | "nautical";
    type Options = {
        maxWidth?: number;
        unit?: Unit;
    };
    class ScaleControl {
        _map: Map;
        _container: HTMLElement;
        options: Options;
        constructor(options: Options);
        getDefaultPosition(): string;
        _onMove(): void;
        onAdd(map: Map): HTMLElement;
        onRemove(): void;
        setUnit(unit: Unit): void;
    }
    export default ScaleControl;
}

declare module 'mapbox-gl/ui/control/fullscreen_control' {
    import Map from 'mapbox-gl/ui/map';
    type Options = {
        container?: HTMLElement;
    };
    class FullscreenControl {
        _map: Map;
        _controlContainer: HTMLElement;
        _fullscreen: boolean;
        _fullscreenchange: string;
        _fullscreenButton: HTMLElement;
        _className: string;
        _container: HTMLElement;
        constructor(options: Options);
        onAdd(map: Map): HTMLElement;
        onRemove(): void;
        _checkFullscreenSupport(): boolean;
        _setupUI(): void;
        _updateTitle(): void;
        _isFullscreen(): boolean;
        _changeIcon(): void;
        _onClickFullscreen(): void;
    }
    export default FullscreenControl;
}

declare module 'mapbox-gl/ui/popup' {
    import { Evented } from 'mapbox-gl/util/evented';
    import LngLat from 'mapbox-gl/geo/lng_lat';
    import { Anchor } from 'mapbox-gl/ui/anchor';
    import Map from 'mapbox-gl/ui/map';
    import { LngLatLike } from 'mapbox-gl/geo/lng_lat';
    import { PointLike } from '@mapbox/point-geometry';
    export type Offset = number | PointLike | {
        [x: Anchor]: PointLike;
    };
    export type PopupOptions = {
        closeButton?: boolean;
        closeOnClick?: boolean;
        anchor?: Anchor;
        offset?: Offset;
        className?: string;
        maxWidth?: string;
    };
    export default class Popup extends Evented {
        _map: Map;
        options: PopupOptions;
        _content: HTMLElement;
        _container: HTMLElement;
        _closeButton: HTMLElement;
        _tip: HTMLElement;
        _lngLat: LngLat;
        _trackPointer: boolean;
        _pos: typeof import("@mapbox/point-geometry").default | undefined | null;
        constructor(options: PopupOptions);
        addTo(map: Map): this;
        isOpen(): boolean;
        remove(): this;
        getLngLat(): LngLat;
        setLngLat(lnglat: LngLatLike): this;
        trackPointer(): this;
        getElement(): HTMLElement;
        setText(text: string): this;
        setHTML(html: string): this;
        getMaxWidth(): string;
        setMaxWidth(maxWidth: string): this;
        setDOMContent(htmlNode: Node): this;
        _createContent(): void;
        _update(cursor: PointLike): void;
        _onClickClose(): void;
    }
}

declare module 'mapbox-gl/ui/marker' {
    import LngLat from 'mapbox-gl/geo/lng_lat';
    import Point from '@mapbox/point-geometry';
    import { Anchor } from 'mapbox-gl/ui/anchor';
    import { Evented } from 'mapbox-gl/util/evented';
    import Map from 'mapbox-gl/ui/map';
    import Popup from 'mapbox-gl/ui/popup';
    import { LngLatLike } from "mapbox-gl/geo/lng_lat";
    import { MapMouseEvent, MapTouchEvent } from 'mapbox-gl/ui/events';
    import { PointLike } from '@mapbox/point-geometry';
    type Options = {
        element?: HTMLElement;
        offset?: PointLike;
        anchor?: Anchor;
        color?: string;
        draggable?: boolean;
    };
    export default class Marker extends Evented {
        _map: Map;
        _anchor: Anchor;
        _offset: typeof import("@mapbox/point-geometry").default;
        _element: HTMLElement;
        _popup: Popup | undefined | null;
        _lngLat: LngLat;
        _pos: typeof import("@mapbox/point-geometry").default | undefined | null;
        _color: string | undefined | null;
        _defaultMarker: boolean;
        _draggable: boolean;
        _state: "inactive" | "pending" | "active";
        _positionDelta: number | undefined | null;
        constructor(options?: Options, legacyOptions?: Options);
        addTo(map: Map): this;
        remove(): this;
        getLngLat(): LngLat;
        setLngLat(lnglat: LngLatLike): this;
        getElement(): HTMLElement;
        setPopup(popup?: Popup | null): this;
        _onMapClick(e: MapMouseEvent): void;
        getPopup(): Popup;
        togglePopup(): this;
        _update(e?: {
            type: "move" | "moveend";
        }): void;
        getOffset(): typeof Point;
        setOffset(offset: PointLike): this;
        _onMove(e: MapMouseEvent | MapTouchEvent): void;
        _onUp(): void;
        _addDragHandler(e: MapMouseEvent | MapTouchEvent): void;
        setDraggable(shouldBeDraggable: boolean): this;
        isDraggable(): boolean;
    }
    export {};
}

declare module 'mapbox-gl/style/style' {
    import { Evented } from 'mapbox-gl/util/evented';
    import StyleLayer from 'mapbox-gl/style/style_layer';
    import ImageManager from 'mapbox-gl/render/image_manager';
    import GlyphManager from 'mapbox-gl/render/glyph_manager';
    import Light from 'mapbox-gl/style/light';
    import LineAtlas from 'mapbox-gl/render/line_atlas';
    import Dispatcher from 'mapbox-gl/util/dispatcher';
    import { getType as getSourceType, setType as setSourceType, SourceClass } from 'mapbox-gl/source/source';
    import SourceCache from 'mapbox-gl/source/source_cache';
    import { registerForPluginAvailability } from 'mapbox-gl/source/rtl_text_plugin';
    import PauseablePlacement from 'mapbox-gl/style/pauseable_placement';
    import ZoomHistory from 'mapbox-gl/style/zoom_history';
    import CrossTileSymbolIndex from 'mapbox-gl/symbol/cross_tile_symbol_index';
    import Map from 'mapbox-gl/ui/map';
    import Transform from 'mapbox-gl/geo/transform';
    import { StyleImage } from 'mapbox-gl/style/style_image';
    import { StyleGlyph } from 'mapbox-gl/style/style_glyph';
    import { Callback } from 'mapbox-gl/types/callback';
    import EvaluationParameters from 'mapbox-gl/style/evaluation_parameters';
    import { Placement } from 'mapbox-gl/symbol/placement';
    import { Cancelable } from 'mapbox-gl/types/cancelable';
    import { RequestParameters, ResponseCallback } from 'mapbox-gl/util/ajax';
    import { GeoJSON } from '@mapbox/geojson-types';
    import { LayerSpecification, FilterSpecification, StyleSpecification, LightSpecification, SourceSpecification } from 'mapbox-gl/style-spec/types';
    import { CustomLayerInterface } from 'mapbox-gl/style/style_layer/custom_style_layer';
    import { Validator } from 'mapbox-gl/style/validate_style';
    export type StyleOptions = {
        validate?: boolean;
        localIdeographFontFamily?: string;
    };
    export type StyleSetterOptions = {
        validate?: boolean;
    };
    class Style extends Evented {
        map: Map;
        stylesheet: StyleSpecification;
        dispatcher: Dispatcher;
        imageManager: ImageManager;
        glyphManager: GlyphManager;
        lineAtlas: LineAtlas;
        light: Light;
        _request: Cancelable | undefined | null;
        _spriteRequest: Cancelable | undefined | null;
        _layers: {
            [x: string]: StyleLayer;
        };
        _order: Array<string>;
        sourceCaches: {
            [x: string]: SourceCache;
        };
        zoomHistory: ZoomHistory;
        _loaded: boolean;
        _rtlTextPluginCallback: Function;
        _changed: boolean;
        _updatedSources: {
            [x: string]: "clear" | "reload";
        };
        _updatedLayers: {
            [x: string]: true;
        };
        _removedLayers: {
            [x: string]: StyleLayer;
        };
        _updatedPaintProps: {
            [layer: string]: true;
        };
        _layerOrderChanged: boolean;
        crossTileSymbolIndex: CrossTileSymbolIndex;
        pauseablePlacement: PauseablePlacement;
        placement: Placement;
        z: number;
        static getSourceType: typeof getSourceType;
        static setSourceType: typeof setSourceType;
        static registerForPluginAvailability: typeof registerForPluginAvailability;
        constructor(map: Map, options?: StyleOptions);
        loadURL(url: string, options?: {
            validate?: boolean;
            accessToken?: string;
        }): void;
        loadJSON(json: StyleSpecification, options?: StyleSetterOptions): void;
        _load(json: StyleSpecification, validate: boolean): void;
        _validateLayer(layer: StyleLayer): void;
        loaded(): boolean;
        _serializeLayers(ids: Array<string>): Array<object>;
        hasTransitions(): boolean;
        _checkLoaded(): void;
        update(parameters: EvaluationParameters): void;
        _updateWorkerLayers(updatedIds: Array<string>, removedIds: Array<string>): void;
        _resetUpdates(): void;
        setState(nextState: StyleSpecification): boolean;
        addImage(id: string, image: StyleImage): this;
        updateImage(id: string, image: StyleImage): void;
        getImage(id: string): StyleImage | undefined | null;
        removeImage(id: string): this;
        listImages(): string[];
        addSource(id: string, source: SourceSpecification, options?: StyleSetterOptions): void;
        removeSource(id: string): this;
        setGeoJSONSourceData(id: string, data: GeoJSON | string): void;
        getSource(id: string): object;
        addLayer(layerObject: LayerSpecification | CustomLayerInterface, before?: string, options?: StyleSetterOptions): void;
        moveLayer(id: string, before?: string): void;
        removeLayer(id: string): void;
        getLayer(id: string): object;
        setLayerZoomRange(layerId: string, minzoom?: number | null, maxzoom?: number | null): void;
        setFilter(layerId: string, filter?: FilterSpecification | null, options?: StyleSetterOptions): void;
        getFilter(layer: string): any;
        setLayoutProperty(layerId: string, name: string, value: any, options?: StyleSetterOptions): void;
        getLayoutProperty(layerId: string, name: string): any;
        setPaintProperty(layerId: string, name: string, value: any, options?: StyleSetterOptions): void;
        getPaintProperty(layer: string, name: string): any;
        setFeatureState(feature: {
            source: string;
            sourceLayer?: string;
            id: string | number;
        }, state: object): void;
        removeFeatureState(target: {
            source: string;
            sourceLayer?: string;
            id?: string | number;
        }, key?: string): void;
        getFeatureState(feature: {
            source: string;
            sourceLayer?: string;
            id: string | number;
        }): object;
        getTransition(): object;
        serialize(): object;
        _updateLayer(layer: StyleLayer): void;
        _flattenAndSortRenderedFeatures(sourceResults: Array<any>): any[];
        queryRenderedFeatures(queryGeometry: any, params: any, transform: Transform): any[];
        querySourceFeatures(sourceID: string, params?: {
            sourceLayer: string | undefined | null;
            filter: Array<any> | undefined | null;
            validate?: boolean;
        } | null): any[];
        addSourceType(name: string, SourceType: SourceClass, callback: Callback<void>): void;
        getLight(): any;
        setLight(lightOptions: LightSpecification, options?: StyleSetterOptions): void;
        _validate(validate: Validator, key: string, value: any, props: any, options?: {
            validate?: boolean;
        }): boolean;
        _remove(): void;
        _clearSource(id: string): void;
        _reloadSource(id: string): void;
        _updateSources(transform: Transform): void;
        _generateCollisionBoxes(): void;
        _updatePlacement(transform: Transform, showCollisionBoxes: boolean, fadeDuration: number, crossSourceCollisions: boolean): boolean;
        _releaseSymbolFadeTiles(): void;
        getImages(mapId: string, params: {
            icons: Array<string>;
        }, callback: Callback<{
            [x: string]: StyleImage;
        }>): void;
        getGlyphs(mapId: string, params: {
            stacks: {
                [x: string]: Array<number>;
            };
        }, callback: Callback<{
            [x: string]: {
                [x: number]: StyleGlyph | undefined | null;
            };
        }>): void;
        getResource(mapId: string, params: RequestParameters, callback: ResponseCallback<any>): Cancelable;
    }
    export default Style;
}

declare module 'mapbox-gl/geo/lng_lat' {
    import LngLatBounds from 'mapbox-gl/geo/lng_lat_bounds';
    class LngLat {
        lng: number;
        lat: number;
        constructor(lng: number, lat: number);
        wrap(): LngLat;
        toArray(): number[];
        toString(): string;
        toBounds(radius?: number): LngLatBounds;
        static convert(input: LngLatLike): LngLat;
    }
    export type LngLatLike = LngLat | {
        lng: number;
        lat: number;
    } | {
        lon: number;
        lat: number;
    } | [number, number];
    export default LngLat;
}

declare module 'mapbox-gl/geo/lng_lat_bounds' {
    import LngLat from 'mapbox-gl/geo/lng_lat';
    import { LngLatLike } from 'mapbox-gl/geo/lng_lat';
    class LngLatBounds {
        _ne: LngLat;
        _sw: LngLat;
        constructor(sw: any, ne: any);
        setNorthEast(ne: LngLatLike): this;
        setSouthWest(sw: LngLatLike): this;
        extend(obj: LngLat | LngLatBounds): any;
        getCenter(): LngLat;
        getSouthWest(): LngLat;
        getNorthEast(): LngLat;
        getNorthWest(): LngLat;
        getSouthEast(): LngLat;
        getWest(): number;
        getSouth(): number;
        getEast(): number;
        getNorth(): number;
        toArray(): number[][];
        toString(): string;
        isEmpty(): boolean;
        static convert(input: LngLatBoundsLike): LngLatBounds;
    }
    export type LngLatBoundsLike = LngLatBounds | [LngLatLike, LngLatLike] | [number, number, number, number];
    export default LngLatBounds;
}

declare module 'mapbox-gl/geo/mercator_coordinate' {
    import LngLat from 'mapbox-gl/geo/lng_lat';
    import { LngLatLike } from 'mapbox-gl/geo/lng_lat';
    export function mercatorXfromLng(lng: number): number;
    export function mercatorYfromLat(lat: number): number;
    export function mercatorZfromAltitude(altitude: number, lat: number): number;
    export function lngFromMercatorX(x: number): number;
    export function latFromMercatorY(y: number): number;
    export function altitudeFromMercatorZ(z: number, y: number): number;
    export function mercatorScale(lat: number): number;
    class MercatorCoordinate {
        x: number;
        y: number;
        z: number;
        constructor(x: number, y: number, z?: number);
        static fromLngLat(lngLatLike: LngLatLike, altitude?: number): MercatorCoordinate;
        toLngLat(): LngLat;
        toAltitude(): number;
        meterInMercatorCoordinateUnits(): number;
    }
    export default MercatorCoordinate;
}

declare module 'mapbox-gl/util/evented' {
    type Listener = (a: object) => any;
    type Listeners = {
        [x: string]: Array<Listener>;
    };
    export class Event {
        readonly type: string;
        constructor(type: string, data?: object);
    }
    export class ErrorEvent extends Event {
        error: Error;
        constructor(error: Error, data?: object);
    }
    export class Evented {
        _listeners: Listeners;
        _oneTimeListeners: Listeners;
        _eventedParent: Evented | undefined | null;
        _eventedParentData: (object | (() => object)) | undefined | null;
        on(type: any, listener: Listener): this;
        off(type: any, listener: Listener): this;
        once(type: string, listener: Listener): this;
        fire(event: Event, properties?: object): this;
        listens(type: string): any;
        setEventedParent(parent?: Evented | null, data?: object | (() => object)): this;
    }
    export {};
}

declare module 'mapbox-gl/util/mapbox' {
    import { ResourceType } from 'mapbox-gl/util/ajax';
    import { RequestParameters } from 'mapbox-gl/util/ajax';
    import { Cancelable } from 'mapbox-gl/types/cancelable';
    import { TileJSON } from 'mapbox-gl/types/tilejson';
    type ResourceTypeEnum = keyof typeof ResourceType;
    export type RequestTransformFunction = (url: string, resourceType?: ResourceTypeEnum) => RequestParameters;
    type UrlObject = {
        protocol: string;
        authority: string;
        path: string;
        params: Array<string>;
    };
    export class RequestManager {
        _skuToken: string;
        _skuTokenExpiresAt: number;
        _transformRequestFn: RequestTransformFunction | undefined | null;
        _customAccessToken: string | undefined | null;
        constructor(transformRequestFn?: RequestTransformFunction, customAccessToken?: string);
        _createSkuToken(): void;
        _isSkuTokenExpired(): boolean;
        transformRequest(url: string, type: ResourceTypeEnum): RequestParameters;
        normalizeStyleURL(url: string, accessToken?: string): string;
        normalizeGlyphsURL(url: string, accessToken?: string): string;
        normalizeSourceURL(url: string, accessToken?: string): string;
        normalizeSpriteURL(url: string, format: string, extension: string, accessToken?: string): string;
        normalizeTileURL(tileURL: string, sourceURL?: string | null, tileSize?: number | null): string;
        canonicalizeTileURL(url: string): string;
        canonicalizeTileset(tileJSON: TileJSON, sourceURL: string): any[];
        _makeAPIURL(urlObject: UrlObject, accessToken: string | null | void): string;
    }
    function isMapboxURL(url: string): boolean;
    function isMapboxHTTPURL(url: string): boolean;
    function hasCacheDefeatingSku(url: string): boolean;
    export { isMapboxURL, isMapboxHTTPURL, hasCacheDefeatingSku };
    type TelemetryEventType = "appUserTurnstile" | "map.load";
    class TelemetryEvent {
        eventData: any;
        anonId: string | undefined | null;
        queue: Array<any>;
        type: TelemetryEventType;
        pendingRequest: Cancelable | undefined | null;
        _customAccessToken: string | undefined | null;
        constructor(type: TelemetryEventType);
        getStorageKey(domain?: string | null): string;
        fetchEventData(): void;
        saveEventData(): void;
        processRequests(_?: string | null): void;
        postEvent(timestamp: number, additionalPayload: {
            [x: string]: any;
        }, callback: (err?: Error | null) => void, customAccessToken?: string | null): void;
        queueRequest(event: number | {
            id: number;
            timestamp: number;
        }, customAccessToken?: string | null): void;
    }
    export class MapLoadEvent extends TelemetryEvent {
        readonly success: {
            [x: number]: boolean;
        };
        skuToken: string;
        constructor();
        postMapLoadEvent(tileUrls: Array<string>, mapId: number, skuToken: string, customAccessToken: string): void;
        processRequests(customAccessToken?: string | null): void;
    }
    export class TurnstileEvent extends TelemetryEvent {
        constructor(customAccessToken?: string | null);
        postTurnstileEvent(tileUrls: Array<string>, customAccessToken?: string | null): void;
        processRequests(customAccessToken?: string | null): any;
    }
    export const postTurnstileEvent: any;
    export const postMapLoadEvent: any;
}

declare module 'mapbox-gl/render/painter' {
    import SourceCache from 'mapbox-gl/source/source_cache';
    import SegmentVector from 'mapbox-gl/data/segment';
    import ProgramConfiguration from 'mapbox-gl/data/program_configuration';
    import CrossTileSymbolIndex from 'mapbox-gl/symbol/cross_tile_symbol_index';
    import Program from 'mapbox-gl/render/program';
    import Context from 'mapbox-gl/gl/context';
    import DepthMode from 'mapbox-gl/gl/depth_mode';
    import StencilMode from 'mapbox-gl/gl/stencil_mode';
    import ColorMode from 'mapbox-gl/gl/color_mode';
    import Texture from 'mapbox-gl/render/texture';
    import Transform from 'mapbox-gl/geo/transform';
    import Tile from 'mapbox-gl/source/tile';
    import { OverscaledTileID } from 'mapbox-gl/source/tile_id';
    import Style from 'mapbox-gl/style/style';
    import StyleLayer from 'mapbox-gl/style/style_layer';
    import { CrossFaded } from 'mapbox-gl/style/properties';
    import LineAtlas from 'mapbox-gl/render/line_atlas';
    import ImageManager from 'mapbox-gl/render/image_manager';
    import GlyphManager from 'mapbox-gl/render/glyph_manager';
    import VertexBuffer from 'mapbox-gl/gl/vertex_buffer';
    import IndexBuffer from 'mapbox-gl/gl/index_buffer';
    import { DepthRangeType, DepthMaskType, DepthFuncType } from 'mapbox-gl/gl/types';
    import ResolvedImage from 'mapbox-gl/style-spec/expression/types/resolved_image';
    export type RenderPass = "offscreen" | "opaque" | "translucent";
    type PainterOptions = {
        showOverdrawInspector: boolean;
        showTileBoundaries: boolean;
        rotating: boolean;
        zooming: boolean;
        moving: boolean;
        fadeDuration: number;
    };
    class Painter {
        context: Context;
        transform: Transform;
        _tileTextures: {
            [x: number]: Array<Texture>;
        };
        numSublayers: number;
        depthEpsilon: number;
        emptyProgramConfiguration: ProgramConfiguration;
        width: number;
        height: number;
        depthRbo: WebGLRenderbuffer;
        depthRboNeedsClear: boolean;
        tileExtentBuffer: VertexBuffer;
        tileExtentSegments: SegmentVector;
        debugBuffer: VertexBuffer;
        debugSegments: SegmentVector;
        rasterBoundsBuffer: VertexBuffer;
        rasterBoundsSegments: SegmentVector;
        viewportBuffer: VertexBuffer;
        viewportSegments: SegmentVector;
        quadTriangleIndexBuffer: IndexBuffer;
        tileBorderIndexBuffer: IndexBuffer;
        _tileClippingMaskIDs: {
            [x: number]: number;
        };
        stencilClearMode: StencilMode;
        style: Style;
        options: PainterOptions;
        lineAtlas: LineAtlas;
        imageManager: ImageManager;
        glyphManager: GlyphManager;
        depthRangeFor3D: DepthRangeType;
        opaquePassCutoff: number;
        renderPass: RenderPass;
        currentLayer: number;
        currentStencilSource: string | undefined | null;
        nextStencilID: number;
        id: string;
        _showOverdrawInspector: boolean;
        cache: {
            [x: string]: Program<any>;
        };
        crossTileSymbolIndex: CrossTileSymbolIndex;
        symbolFadeChange: number;
        constructor(gl: WebGLRenderingContext, transform: Transform);
        resize(width: number, height: number): void;
        setup(): void;
        clearStencil(): void;
        _renderTileClippingMasks(layer: StyleLayer, tileIDs: Array<OverscaledTileID>): void;
        stencilModeFor3D(): StencilMode;
        stencilModeForClipping(tileID: OverscaledTileID): StencilMode;
        colorModeForRenderPass(): Readonly<ColorMode>;
        depthModeForSublayer(n: number, mask: DepthMaskType, func?: DepthFuncType | null): Readonly<DepthMode>;
        opaquePassEnabledForLayer(): boolean;
        render(style: Style, options: PainterOptions): void;
        setupOffscreenDepthRenderbuffer(): void;
        renderLayer(painter: Painter, sourceCache: SourceCache, layer: StyleLayer, coords: Array<OverscaledTileID>): void;
        translatePosMatrix(matrix: Float32Array, tile: Tile, translate: [number, number], translateAnchor: "map" | "viewport", inViewportPixelUnitsUnits?: boolean): Float32Array;
        saveTileTexture(texture: Texture): void;
        getTileTexture(size: number): Texture;
        isPatternMissing(image?: CrossFaded<ResolvedImage> | null): boolean;
        useProgram(name: string, programConfiguration?: ProgramConfiguration): Program<any>;
        setCustomLayerDefaults(): void;
        setBaseState(): void;
    }
    export default Painter;
}

declare module 'mapbox-gl/ui/hash' {
    import Map from 'mapbox-gl/ui/map';
    class Hash {
        _map: Map;
        _updateHash: () => number | undefined | null;
        _hashName: string | undefined | null;
        constructor(hashName?: string | null);
        addTo(map: Map): this;
        remove(): this;
        getHashString(mapFeedback?: boolean): string;
        _getCurrentHash(): string[];
        _onHashChange(): boolean;
        _updateHashUnthrottled(): void;
    }
    export default Hash;
}

declare module 'mapbox-gl/ui/camera' {
    import LngLat from 'mapbox-gl/geo/lng_lat';
    import { Evented } from 'mapbox-gl/util/evented';
    import Transform from 'mapbox-gl/geo/transform';
    import { LngLatLike } from 'mapbox-gl/geo/lng_lat';
    import { LngLatBoundsLike } from 'mapbox-gl/geo/lng_lat_bounds';
    import { TaskID } from 'mapbox-gl/util/task_queue';
    import { PointLike } from '@mapbox/point-geometry';
    export type CameraOptions = {
        center?: LngLatLike;
        zoom?: number;
        bearing?: number;
        pitch?: number;
        around?: LngLatLike;
    };
    export type AnimationOptions = {
        duration?: number;
        easing?: (a: number) => number;
        offset?: PointLike;
        animate?: boolean;
    };
    class Camera extends Evented {
        transform: Transform;
        _moving: boolean;
        _zooming: boolean;
        _rotating: boolean;
        _pitching: boolean;
        _bearingSnap: number;
        _easeEndTimeoutID: number;
        _easeStart: number;
        _easeOptions: {
            duration: number;
            easing: (a: number) => number;
        };
        _onEaseFrame: (a: number) => void;
        _onEaseEnd: () => void;
        _easeFrameId: TaskID | undefined | null;
        readonly _requestRenderFrame: (a: () => void) => TaskID;
        readonly _cancelRenderFrame: (a: TaskID) => void;
        constructor(transform: Transform, options: {
            bearingSnap: number;
        });
        getCenter(): LngLat;
        setCenter(center: LngLatLike, eventData?: object): this;
        panBy(offset: PointLike, options?: AnimationOptions, eventData?: object): this;
        panTo(lnglat: LngLatLike, options?: AnimationOptions, eventData?: object): this;
        getZoom(): number;
        setZoom(zoom: number, eventData?: object): this;
        zoomTo(zoom: number, options?: AnimationOptions | null, eventData?: object): this;
        zoomIn(options?: AnimationOptions, eventData?: object): this;
        zoomOut(options?: AnimationOptions, eventData?: object): this;
        getBearing(): number;
        setBearing(bearing: number, eventData?: object): this;
        rotateTo(bearing: number, options?: AnimationOptions, eventData?: object): this;
        resetNorth(options?: AnimationOptions, eventData?: object): this;
        resetNorthPitch(options?: AnimationOptions, eventData?: object): this;
        snapToNorth(options?: AnimationOptions, eventData?: object): this;
        getPitch(): number;
        setPitch(pitch: number, eventData?: object): this;
        cameraForBounds(bounds: LngLatBoundsLike, options?: CameraOptions): void | (CameraOptions & AnimationOptions);
        _cameraForBoxAndBearing(p0: LngLatLike, p1: LngLatLike, bearing: number, options?: CameraOptions): void | (CameraOptions & AnimationOptions);
        fitBounds(bounds: LngLatBoundsLike, options?: AnimationOptions & CameraOptions, eventData?: object): any;
        fitScreenCoordinates(p0: PointLike, p1: PointLike, bearing: number, options?: AnimationOptions & CameraOptions, eventData?: object): any;
        _fitInternal(calculatedOptions?: CameraOptions & AnimationOptions, options?: AnimationOptions & CameraOptions, eventData?: object): this;
        jumpTo(options: CameraOptions, eventData?: object): this;
        easeTo(options: CameraOptions & AnimationOptions & {
            delayEndEvents?: number;
        }, eventData?: object): this;
        _prepareEase(eventData: object | undefined | null, noMoveStart: boolean): void;
        _fireMoveEvents(eventData?: object): void;
        _afterEase(eventData?: object): void;
        flyTo(options: object, eventData?: object): this;
        isEasing(): boolean;
        stop(): this;
        _ease(frame: (a: number) => void, finish: () => void, options: {
            animate: boolean;
            duration: number;
            easing: (a: number) => number;
        }): void;
        _renderFrameCallback(): void;
        _normalizeBearing(bearing: number, currentBearing: number): number;
        _normalizeCenter(center: LngLat): void;
    }
    export default Camera;
}

declare module 'mapbox-gl/util/task_queue' {
    export type TaskID = number;
    type Task = {
        callback: () => void;
        id: TaskID;
        cancelled: boolean;
    };
    class TaskQueue {
        _queue: Array<Task>;
        _id: TaskID;
        _cleared: boolean;
        _currentlyRunning: Array<Task> | false;
        constructor();
        add(callback: () => void): TaskID;
        remove(id: TaskID): void;
        run(): void;
        clear(): void;
    }
    export default TaskQueue;
}

declare module 'mapbox-gl/ui/events' {
    import { Event } from 'mapbox-gl/util/evented';
    import Map from 'mapbox-gl/ui/map';
    import LngLat from 'mapbox-gl/geo/lng_lat';
    export class MapMouseEvent extends Event {
        type: "mousedown" | "mouseup" | "click" | "dblclick" | "mousemove" | "mouseover" | "mouseenter" | "mouseleave" | "mouseout" | "contextmenu";
        target: Map;
        originalEvent: MouseEvent;
        point: typeof import("@mapbox/point-geometry").default;
        lngLat: LngLat;
        preventDefault(): void;
        get defaultPrevented(): boolean;
        _defaultPrevented: boolean;
        constructor(type: string, map: Map, originalEvent: MouseEvent, data?: object);
    }
    export class MapTouchEvent extends Event {
        type: "touchstart" | "touchend" | "touchcancel";
        target: Map;
        originalEvent: TouchEvent;
        lngLat: LngLat;
        point: typeof import("@mapbox/point-geometry").default;
        points: Array<typeof import("@mapbox/point-geometry").default>;
        lngLats: Array<LngLat>;
        preventDefault(): void;
        get defaultPrevented(): boolean;
        _defaultPrevented: boolean;
        constructor(type: string, map: Map, originalEvent: TouchEvent);
    }
    export class MapWheelEvent extends Event {
        type: "wheel";
        target: Map;
        originalEvent: WheelEvent;
        preventDefault(): void;
        get defaultPrevented(): boolean;
        _defaultPrevented: boolean;
        constructor(type: string, map: Map, originalEvent: WheelEvent);
    }
    export type MapBoxZoomEvent = {
        type: "boxzoomstart" | "boxzoomend" | "boxzoomcancel";
        map: Map;
        originalEvent: MouseEvent;
    };
    export type MapDataEvent = {
        type: string;
        dataType: string;
    };
    export type MapContextEvent = {
        type: "webglcontextlost" | "webglcontextrestored";
        originalEvent: WebGLContextEvent;
    };
    export type MapEvent = "mousedown" | "mouseup" | "mouseover" | "mousemove" | "click" | "dblclick" | "mouseenter" | "mouseleave" | "mouseout" | "contextmenu" | "wheel" | "touchstart" | "touchend" | "touchmove" | "touchcancel" | "movestart" | "move" | "moveend" | "dragstart" | "drag" | "dragend" | "zoomstart" | "zoom" | "zoomend" | "rotatestart" | "rotate" | "rotateend" | "pitchstart" | "pitch" | "pitchend" | "boxzoomstart" | "boxzoomend" | "boxzoomcancel" | "resize" | "webglcontextlost" | "webglcontextrestored" | "load" | "render" | "idle" | "remove" | "error" | "data" | "styledata" | "sourcedata" | "dataloading" | "styledataloading" | "sourcedataloading" | "styleimagemissing" | "style.load";
}

declare module 'mapbox-gl/style/style_layer/custom_style_layer' {
    import StyleLayer from 'mapbox-gl/style/style_layer';
    import Map from 'mapbox-gl/ui/map';
    type CustomRenderMethod = (gl: WebGLRenderingContext, matrix: Array<number>) => void;
    export type CustomLayerInterface = {
        id: string;
        type: "custom";
        renderingMode: "2d" | "3d";
        render: CustomRenderMethod;
        prerender: CustomRenderMethod | undefined | null;
        onAdd: ((map: Map, gl: WebGLRenderingContext) => void) | undefined | null;
        onRemove: ((map: Map, gl: WebGLRenderingContext) => void) | undefined | null;
    };
    export function validateCustomStyleLayer(layerObject: CustomLayerInterface): any[];
    class CustomStyleLayer extends StyleLayer {
        implementation: CustomLayerInterface;
        constructor(implementation: CustomLayerInterface);
        is3D(): boolean;
        hasOffscreenPass(): boolean;
        recalculate(): void;
        updateTransitions(): void;
        hasTransition(): void;
        serialize(): void;
        onAdd(map: Map): void;
        onRemove(map: Map): void;
    }
    export default CustomStyleLayer;
}

declare module 'mapbox-gl/style/style_image' {
    import { RGBAImage } from 'mapbox-gl/util/image';
    import Map from 'mapbox-gl/ui/map';
    export type StyleImage = {
        data: RGBAImage;
        pixelRatio: number;
        sdf: boolean;
        version: number;
        hasRenderCallback?: boolean;
        userImage?: StyleImageInterface;
    };
    export type StyleImageInterface = {
        width: number;
        height: number;
        data: Uint8Array | Uint8ClampedArray;
        render?: () => void;
        onAdd?: (map: Map, id: string) => void;
        onRemove?: () => void;
    };
    export function renderStyleImage(image: StyleImage): boolean;
}

declare module 'mapbox-gl/ui/handler/scroll_zoom' {
    import Map from 'mapbox-gl/ui/map';
    import { TaskID } from 'mapbox-gl/util/task_queue';
    class ScrollZoomHandler {
        _map: Map;
        _el: HTMLElement;
        _enabled: boolean;
        _active: boolean;
        _zooming: boolean;
        _aroundCenter: boolean;
        _around: typeof import("@mapbox/point-geometry").default;
        _aroundPoint: typeof import("@mapbox/point-geometry").default;
        _type: "wheel" | "trackpad" | null;
        _lastValue: number;
        _timeout: number | undefined | null;
        _finishTimeout: number | undefined | null;
        _lastWheelEvent: any;
        _lastWheelEventTime: number;
        _startZoom: number | undefined | null;
        _targetZoom: number | undefined | null;
        _delta: number;
        _easing: ((a: number) => number) | undefined | null;
        _prevEase: {
            start: number;
            duration: number;
            easing: (a: number) => number;
        } | undefined | null;
        _frameId: TaskID | undefined | null;
        _defaultZoomRate: number;
        _wheelZoomRate: number;
        constructor(map: Map);
        setZoomRate(zoomRate: number): void;
        setWheelZoomRate(wheelZoomRate: number): void;
        isEnabled(): boolean;
        isActive(): boolean;
        isZooming(): boolean;
        enable(options: any): void;
        disable(): void;
        onWheel(e: WheelEvent): void;
        _onTimeout(initialEvent: any): void;
        _start(e: any): void;
        _onScrollFrame(): void;
        _smoothOutEasing(duration: number): (t: number) => number;
    }
    export default ScrollZoomHandler;
}

declare module 'mapbox-gl/ui/handler/box_zoom' {
    import Map from 'mapbox-gl/ui/map';
    class BoxZoomHandler {
        _map: Map;
        _el: HTMLElement;
        _container: HTMLElement;
        _enabled: boolean;
        _active: boolean;
        _startPos: typeof import("@mapbox/point-geometry").default;
        _lastPos: typeof import("@mapbox/point-geometry").default;
        _box: HTMLElement;
        _clickTolerance: number;
        constructor(map: Map, options: {
            clickTolerance?: number;
        });
        isEnabled(): boolean;
        isActive(): boolean;
        enable(): void;
        disable(): void;
        onMouseDown(e: MouseEvent): void;
        _onMouseMove(e: MouseEvent): void;
        _onMouseUp(e: MouseEvent): void;
        _onKeyDown(e: KeyboardEvent): void;
        _finish(): void;
        _fireEvent(type: string, e: any): Map;
    }
    export default BoxZoomHandler;
}

declare module 'mapbox-gl/ui/handler/drag_rotate' {
    import Map from 'mapbox-gl/ui/map';
    import { TaskID } from 'mapbox-gl/util/task_queue';
    class DragRotateHandler {
        _map: Map;
        _el: HTMLElement;
        _state: "disabled" | "enabled" | "pending" | "active";
        _button: "right" | "left";
        _eventButton: number;
        _bearingSnap: number;
        _pitchWithRotate: boolean;
        _startPos: typeof import("@mapbox/point-geometry").default;
        _prevPos: typeof import("@mapbox/point-geometry").default;
        _lastPos: typeof import("@mapbox/point-geometry").default;
        _startTime: number;
        _lastMoveEvent: MouseEvent;
        _inertia: Array<[number, number]>;
        _center: typeof import("@mapbox/point-geometry").default;
        _frameId: TaskID | undefined | null;
        constructor(map: Map, options: {
            button?: "right" | "left";
            element?: HTMLElement;
            bearingSnap?: number;
            pitchWithRotate?: boolean;
        });
        isEnabled(): boolean;
        isActive(): boolean;
        enable(): void;
        disable(): void;
        onMouseDown(e: MouseEvent): void;
        _onMouseMove(e: MouseEvent): void;
        _onDragFrame(): void;
        _onMouseUp(e: MouseEvent): void;
        _onBlur(e: FocusEvent): void;
        _unbind(): void;
        _deactivate(): void;
        _inertialRotate(e: MouseEvent): void;
        _fireEvent(type: string, e: any): Map;
        _drainInertiaBuffer(): void;
    }
    export default DragRotateHandler;
}

declare module 'mapbox-gl/ui/handler/drag_pan' {
    import Map from 'mapbox-gl/ui/map';
    import { TaskID } from 'mapbox-gl/util/task_queue';
    class DragPanHandler {
        _map: Map;
        _el: HTMLElement;
        _state: "disabled" | "enabled" | "pending" | "active";
        _startPos: typeof import("@mapbox/point-geometry").default;
        _mouseDownPos: typeof import("@mapbox/point-geometry").default;
        _prevPos: typeof import("@mapbox/point-geometry").default;
        _lastPos: typeof import("@mapbox/point-geometry").default;
        _startTouch: Array<typeof import("@mapbox/point-geometry").default> | undefined | null;
        _lastTouch: Array<typeof import("@mapbox/point-geometry").default> | undefined | null;
        _lastMoveEvent: MouseEvent | TouchEvent | void;
        _inertia: Array<[number, typeof import("@mapbox/point-geometry").default]>;
        _frameId: TaskID | undefined | null;
        _clickTolerance: number;
        _shouldStart: boolean | undefined | null;
        constructor(map: Map, options: {
            clickTolerance?: number;
        });
        isEnabled(): boolean;
        isActive(): boolean;
        enable(): void;
        disable(): void;
        onMouseDown(e: MouseEvent): void;
        onTouchStart(e: TouchEvent): void;
        _start(e: MouseEvent | TouchEvent): void;
        _touchesMatch(lastTouch?: Array<typeof import("@mapbox/point-geometry").default> | null, thisTouch?: Array<typeof import("@mapbox/point-geometry").default> | null): boolean;
        _onMove(e: MouseEvent | TouchEvent): void;
        _onDragFrame(): void;
        _onMouseUp(e: MouseEvent): void;
        _onTouchEnd(e: TouchEvent): void;
        _abort(e: FocusEvent | MouseEvent | TouchEvent): void;
        _onBlur(e: FocusEvent): void;
        _unbind(): void;
        _deactivate(): void;
        _inertialPan(e: MouseEvent | TouchEvent): void;
        _fireEvent(type: string, e: any): Map;
        _drainInertiaBuffer(): void;
    }
    export default DragPanHandler;
}

declare module 'mapbox-gl/ui/handler/keyboard' {
    import Map from 'mapbox-gl/ui/map';
    class KeyboardHandler {
        _map: Map;
        _el: HTMLElement;
        _enabled: boolean;
        constructor(map: Map);
        isEnabled(): boolean;
        enable(): void;
        disable(): void;
        _onKeyDown(e: KeyboardEvent): void;
    }
    export default KeyboardHandler;
}

declare module 'mapbox-gl/ui/handler/dblclick_zoom' {
    import Map from 'mapbox-gl/ui/map';
    import { MapMouseEvent, MapTouchEvent } from 'mapbox-gl/ui/events';
    class DoubleClickZoomHandler {
        _map: Map;
        _enabled: boolean;
        _active: boolean;
        _tapped: number | undefined | null;
        _tappedPoint: typeof import("@mapbox/point-geometry").default | undefined | null;
        constructor(map: Map);
        isEnabled(): boolean;
        isActive(): boolean;
        enable(): void;
        disable(): void;
        onTouchStart(e: MapTouchEvent): void;
        _resetTapped(): void;
        onDblClick(e: MapMouseEvent): void;
        _zoom(e: MapMouseEvent | MapTouchEvent): void;
        _onZoomEnd(): void;
    }
    export default DoubleClickZoomHandler;
}

declare module 'mapbox-gl/ui/handler/touch_zoom_rotate' {
    import Map from 'mapbox-gl/ui/map';
    import LngLat from 'mapbox-gl/geo/lng_lat';
    import { TaskID } from 'mapbox-gl/util/task_queue';
    class TouchZoomRotateHandler {
        _map: Map;
        _el: HTMLElement;
        _enabled: boolean;
        _aroundCenter: boolean;
        _rotationDisabled: boolean;
        _startVec: typeof import("@mapbox/point-geometry").default;
        _startAround: LngLat;
        _startScale: number;
        _startBearing: number;
        _gestureIntent: "rotate" | "zoom" | void;
        _inertia: Array<[number, number, typeof import("@mapbox/point-geometry").default]>;
        _lastTouchEvent: TouchEvent;
        _frameId: TaskID | undefined | null;
        constructor(map: Map);
        isEnabled(): boolean;
        enable(options?: {
            around?: "center";
        } | null): void;
        disable(): void;
        disableRotation(): void;
        enableRotation(): void;
        isActive(): boolean;
        onStart(e: TouchEvent): void;
        _getTouchEventData(e: TouchEvent): {
            vec: any;
            center: any;
            scale: number;
            bearing: number;
        };
        _onMove(e: TouchEvent): void;
        _onTouchFrame(): void;
        _onEnd(e: TouchEvent): void;
        _drainInertiaBuffer(): void;
    }
    export default TouchZoomRotateHandler;
}

declare module 'mapbox-gl/types/cancelable' {
    export type Cancelable = {
        cancel: () => void;
    };
}

declare module 'mapbox-gl/style-spec/types' {
    export type ColorSpecification = string;
    export type FormattedSpecification = string;
    export type ResolvedImageSpecification = string;
    export type FilterSpecification = ["has", string] | ["!has", string] | ["==", string, string | number | boolean] | ["!=", string, string | number | boolean] | [">", string, string | number | boolean] | [">=", string, string | number | boolean] | ["<", string, string | number | boolean] | ["<=", string, string | number | boolean] | Array<string | FilterSpecification>;
    export type TransitionSpecification = {
        duration?: number;
        delay?: number;
    };
    export type CameraFunctionSpecification<T> = {
        type: "exponential";
        stops: Array<[number, T]>;
    } | {
        type: "interval";
        stops: Array<[number, T]>;
    };
    export type SourceFunctionSpecification<T> = {
        type: "exponential";
        stops: Array<[number, T]>;
        property: string;
        default?: T;
    } | {
        type: "interval";
        stops: Array<[number, T]>;
        property: string;
        default?: T;
    } | {
        type: "categorical";
        stops: Array<[string | number | boolean, T]>;
        property: string;
        default?: T;
    } | {
        type: "identity";
        property: string;
        default?: T;
    };
    export type CompositeFunctionSpecification<T> = {
        type: "exponential";
        stops: Array<[{
            zoom: number;
            value: number;
        }, T]>;
        property: string;
        default?: T;
    } | {
        type: "interval";
        stops: Array<[{
            zoom: number;
            value: number;
        }, T]>;
        property: string;
        default?: T;
    } | {
        type: "categorical";
        stops: Array<[{
            zoom: number;
            value: string | number | boolean;
        }, T]>;
        property: string;
        default?: T;
    };
    export type ExpressionSpecification = Array<unknown>;
    export type PropertyValueSpecification<T> = T | CameraFunctionSpecification<T> | ExpressionSpecification;
    export type DataDrivenPropertyValueSpecification<T> = T | CameraFunctionSpecification<T> | SourceFunctionSpecification<T> | CompositeFunctionSpecification<T> | ExpressionSpecification;
    export type StyleSpecification = {
        "version": 8;
        "name"?: string;
        "metadata"?: unknown;
        "center"?: Array<number>;
        "zoom"?: number;
        "bearing"?: number;
        "pitch"?: number;
        "light"?: LightSpecification;
        "sources": {
            [x: string]: SourceSpecification;
        };
        "sprite"?: string;
        "glyphs"?: string;
        "transition"?: TransitionSpecification;
        "layers": Array<LayerSpecification>;
    };
    export type LightSpecification = {
        "anchor"?: PropertyValueSpecification<"map" | "viewport">;
        "position"?: PropertyValueSpecification<[number, number, number]>;
        "color"?: PropertyValueSpecification<ColorSpecification>;
        "intensity"?: PropertyValueSpecification<number>;
    };
    export type VectorSourceSpecification = {
        "type": "vector";
        "url"?: string;
        "tiles"?: Array<string>;
        "bounds"?: [number, number, number, number];
        "scheme"?: "xyz" | "tms";
        "minzoom"?: number;
        "maxzoom"?: number;
        "attribution"?: string;
    };
    export type RasterSourceSpecification = {
        "type": "raster";
        "url"?: string;
        "tiles"?: Array<string>;
        "bounds"?: [number, number, number, number];
        "minzoom"?: number;
        "maxzoom"?: number;
        "tileSize"?: number;
        "scheme"?: "xyz" | "tms";
        "attribution"?: string;
    };
    export type RasterDEMSourceSpecification = {
        "type": "raster-dem";
        "url"?: string;
        "tiles"?: Array<string>;
        "bounds"?: [number, number, number, number];
        "minzoom"?: number;
        "maxzoom"?: number;
        "tileSize"?: number;
        "attribution"?: string;
        "encoding"?: "terrarium" | "mapbox";
    };
    export type GeoJSONSourceSpecification = {
        "type": "geojson";
        "data"?: unknown;
        "maxzoom"?: number;
        "attribution"?: string;
        "buffer"?: number;
        "tolerance"?: number;
        "cluster"?: boolean;
        "clusterRadius"?: number;
        "clusterMaxZoom"?: number;
        "clusterProperties"?: unknown;
        "lineMetrics"?: boolean;
        "generateId"?: boolean;
    };
    export type VideoSourceSpecification = {
        "type": "video";
        "urls": Array<string>;
        "coordinates": [[number, number], [number, number], [number, number], [number, number]];
    };
    export type ImageSourceSpecification = {
        "type": "image";
        "url": string;
        "coordinates": [[number, number], [number, number], [number, number], [number, number]];
    };
    export type SourceSpecification = VectorSourceSpecification | RasterSourceSpecification | RasterDEMSourceSpecification | GeoJSONSourceSpecification | VideoSourceSpecification | ImageSourceSpecification;
    export type FillLayerSpecification = {
        "id": string;
        "type": "fill";
        "metadata"?: unknown;
        "source": string;
        "source-layer"?: string;
        "minzoom"?: number;
        "maxzoom"?: number;
        "filter"?: FilterSpecification;
        "layout"?: {
            "fill-sort-key"?: DataDrivenPropertyValueSpecification<number>;
            "visibility"?: "visible" | "none";
        };
        "paint"?: {
            "fill-antialias"?: PropertyValueSpecification<boolean>;
            "fill-opacity"?: DataDrivenPropertyValueSpecification<number>;
            "fill-color"?: DataDrivenPropertyValueSpecification<ColorSpecification>;
            "fill-outline-color"?: DataDrivenPropertyValueSpecification<ColorSpecification>;
            "fill-translate"?: PropertyValueSpecification<[number, number]>;
            "fill-translate-anchor"?: PropertyValueSpecification<"map" | "viewport">;
            "fill-pattern"?: DataDrivenPropertyValueSpecification<ResolvedImageSpecification>;
        };
    };
    export type LineLayerSpecification = {
        "id": string;
        "type": "line";
        "metadata"?: unknown;
        "source": string;
        "source-layer"?: string;
        "minzoom"?: number;
        "maxzoom"?: number;
        "filter"?: FilterSpecification;
        "layout"?: {
            "line-cap"?: PropertyValueSpecification<"butt" | "round" | "square">;
            "line-join"?: DataDrivenPropertyValueSpecification<"bevel" | "round" | "miter">;
            "line-miter-limit"?: PropertyValueSpecification<number>;
            "line-round-limit"?: PropertyValueSpecification<number>;
            "line-sort-key"?: DataDrivenPropertyValueSpecification<number>;
            "visibility"?: "visible" | "none";
        };
        "paint"?: {
            "line-opacity"?: DataDrivenPropertyValueSpecification<number>;
            "line-color"?: DataDrivenPropertyValueSpecification<ColorSpecification>;
            "line-translate"?: PropertyValueSpecification<[number, number]>;
            "line-translate-anchor"?: PropertyValueSpecification<"map" | "viewport">;
            "line-width"?: DataDrivenPropertyValueSpecification<number>;
            "line-gap-width"?: DataDrivenPropertyValueSpecification<number>;
            "line-offset"?: DataDrivenPropertyValueSpecification<number>;
            "line-blur"?: DataDrivenPropertyValueSpecification<number>;
            "line-dasharray"?: PropertyValueSpecification<Array<number>>;
            "line-pattern"?: DataDrivenPropertyValueSpecification<ResolvedImageSpecification>;
            "line-gradient"?: ExpressionSpecification;
        };
    };
    export type SymbolLayerSpecification = {
        "id": string;
        "type": "symbol";
        "metadata"?: unknown;
        "source": string;
        "source-layer"?: string;
        "minzoom"?: number;
        "maxzoom"?: number;
        "filter"?: FilterSpecification;
        "layout"?: {
            "symbol-placement"?: PropertyValueSpecification<"point" | "line" | "line-center">;
            "symbol-spacing"?: PropertyValueSpecification<number>;
            "symbol-avoid-edges"?: PropertyValueSpecification<boolean>;
            "symbol-sort-key"?: DataDrivenPropertyValueSpecification<number>;
            "symbol-z-order"?: PropertyValueSpecification<"auto" | "viewport-y" | "source">;
            "icon-allow-overlap"?: PropertyValueSpecification<boolean>;
            "icon-ignore-placement"?: PropertyValueSpecification<boolean>;
            "icon-optional"?: PropertyValueSpecification<boolean>;
            "icon-rotation-alignment"?: PropertyValueSpecification<"map" | "viewport" | "auto">;
            "icon-size"?: DataDrivenPropertyValueSpecification<number>;
            "icon-text-fit"?: PropertyValueSpecification<"none" | "width" | "height" | "both">;
            "icon-text-fit-padding"?: PropertyValueSpecification<[number, number, number, number]>;
            "icon-image"?: DataDrivenPropertyValueSpecification<ResolvedImageSpecification>;
            "icon-rotate"?: DataDrivenPropertyValueSpecification<number>;
            "icon-padding"?: PropertyValueSpecification<number>;
            "icon-keep-upright"?: PropertyValueSpecification<boolean>;
            "icon-offset"?: DataDrivenPropertyValueSpecification<[number, number]>;
            "icon-anchor"?: DataDrivenPropertyValueSpecification<"center" | "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right">;
            "icon-pitch-alignment"?: PropertyValueSpecification<"map" | "viewport" | "auto">;
            "text-pitch-alignment"?: PropertyValueSpecification<"map" | "viewport" | "auto">;
            "text-rotation-alignment"?: PropertyValueSpecification<"map" | "viewport" | "auto">;
            "text-field"?: DataDrivenPropertyValueSpecification<FormattedSpecification>;
            "text-font"?: DataDrivenPropertyValueSpecification<Array<string>>;
            "text-size"?: DataDrivenPropertyValueSpecification<number>;
            "text-max-width"?: DataDrivenPropertyValueSpecification<number>;
            "text-line-height"?: PropertyValueSpecification<number>;
            "text-letter-spacing"?: DataDrivenPropertyValueSpecification<number>;
            "text-justify"?: DataDrivenPropertyValueSpecification<"auto" | "left" | "center" | "right">;
            "text-radial-offset"?: DataDrivenPropertyValueSpecification<number>;
            "text-variable-anchor"?: PropertyValueSpecification<Array<"center" | "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right">>;
            "text-anchor"?: DataDrivenPropertyValueSpecification<"center" | "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right">;
            "text-max-angle"?: PropertyValueSpecification<number>;
            "text-writing-mode"?: PropertyValueSpecification<Array<"horizontal" | "vertical">>;
            "text-rotate"?: DataDrivenPropertyValueSpecification<number>;
            "text-padding"?: PropertyValueSpecification<number>;
            "text-keep-upright"?: PropertyValueSpecification<boolean>;
            "text-transform"?: DataDrivenPropertyValueSpecification<"none" | "uppercase" | "lowercase">;
            "text-offset"?: DataDrivenPropertyValueSpecification<[number, number]>;
            "text-allow-overlap"?: PropertyValueSpecification<boolean>;
            "text-ignore-placement"?: PropertyValueSpecification<boolean>;
            "text-optional"?: PropertyValueSpecification<boolean>;
            "visibility"?: "visible" | "none";
        };
        "paint"?: {
            "icon-opacity"?: DataDrivenPropertyValueSpecification<number>;
            "icon-color"?: DataDrivenPropertyValueSpecification<ColorSpecification>;
            "icon-halo-color"?: DataDrivenPropertyValueSpecification<ColorSpecification>;
            "icon-halo-width"?: DataDrivenPropertyValueSpecification<number>;
            "icon-halo-blur"?: DataDrivenPropertyValueSpecification<number>;
            "icon-translate"?: PropertyValueSpecification<[number, number]>;
            "icon-translate-anchor"?: PropertyValueSpecification<"map" | "viewport">;
            "text-opacity"?: DataDrivenPropertyValueSpecification<number>;
            "text-color"?: DataDrivenPropertyValueSpecification<ColorSpecification>;
            "text-halo-color"?: DataDrivenPropertyValueSpecification<ColorSpecification>;
            "text-halo-width"?: DataDrivenPropertyValueSpecification<number>;
            "text-halo-blur"?: DataDrivenPropertyValueSpecification<number>;
            "text-translate"?: PropertyValueSpecification<[number, number]>;
            "text-translate-anchor"?: PropertyValueSpecification<"map" | "viewport">;
        };
    };
    export type CircleLayerSpecification = {
        "id": string;
        "type": "circle";
        "metadata"?: unknown;
        "source": string;
        "source-layer"?: string;
        "minzoom"?: number;
        "maxzoom"?: number;
        "filter"?: FilterSpecification;
        "layout"?: {
            "circle-sort-key"?: DataDrivenPropertyValueSpecification<number>;
            "visibility"?: "visible" | "none";
        };
        "paint"?: {
            "circle-radius"?: DataDrivenPropertyValueSpecification<number>;
            "circle-color"?: DataDrivenPropertyValueSpecification<ColorSpecification>;
            "circle-blur"?: DataDrivenPropertyValueSpecification<number>;
            "circle-opacity"?: DataDrivenPropertyValueSpecification<number>;
            "circle-translate"?: PropertyValueSpecification<[number, number]>;
            "circle-translate-anchor"?: PropertyValueSpecification<"map" | "viewport">;
            "circle-pitch-scale"?: PropertyValueSpecification<"map" | "viewport">;
            "circle-pitch-alignment"?: PropertyValueSpecification<"map" | "viewport">;
            "circle-stroke-width"?: DataDrivenPropertyValueSpecification<number>;
            "circle-stroke-color"?: DataDrivenPropertyValueSpecification<ColorSpecification>;
            "circle-stroke-opacity"?: DataDrivenPropertyValueSpecification<number>;
        };
    };
    export type HeatmapLayerSpecification = {
        "id": string;
        "type": "heatmap";
        "metadata"?: unknown;
        "source": string;
        "source-layer"?: string;
        "minzoom"?: number;
        "maxzoom"?: number;
        "filter"?: FilterSpecification;
        "layout"?: {
            "visibility"?: "visible" | "none";
        };
        "paint"?: {
            "heatmap-radius"?: DataDrivenPropertyValueSpecification<number>;
            "heatmap-weight"?: DataDrivenPropertyValueSpecification<number>;
            "heatmap-intensity"?: PropertyValueSpecification<number>;
            "heatmap-color"?: ExpressionSpecification;
            "heatmap-opacity"?: PropertyValueSpecification<number>;
        };
    };
    export type FillExtrusionLayerSpecification = {
        "id": string;
        "type": "fill-extrusion";
        "metadata"?: unknown;
        "source": string;
        "source-layer"?: string;
        "minzoom"?: number;
        "maxzoom"?: number;
        "filter"?: FilterSpecification;
        "layout"?: {
            "visibility"?: "visible" | "none";
        };
        "paint"?: {
            "fill-extrusion-opacity"?: PropertyValueSpecification<number>;
            "fill-extrusion-color"?: DataDrivenPropertyValueSpecification<ColorSpecification>;
            "fill-extrusion-translate"?: PropertyValueSpecification<[number, number]>;
            "fill-extrusion-translate-anchor"?: PropertyValueSpecification<"map" | "viewport">;
            "fill-extrusion-pattern"?: DataDrivenPropertyValueSpecification<ResolvedImageSpecification>;
            "fill-extrusion-height"?: DataDrivenPropertyValueSpecification<number>;
            "fill-extrusion-base"?: DataDrivenPropertyValueSpecification<number>;
            "fill-extrusion-vertical-gradient"?: PropertyValueSpecification<boolean>;
        };
    };
    export type RasterLayerSpecification = {
        "id": string;
        "type": "raster";
        "metadata"?: unknown;
        "source": string;
        "source-layer"?: string;
        "minzoom"?: number;
        "maxzoom"?: number;
        "filter"?: FilterSpecification;
        "layout"?: {
            "visibility"?: "visible" | "none";
        };
        "paint"?: {
            "raster-opacity"?: PropertyValueSpecification<number>;
            "raster-hue-rotate"?: PropertyValueSpecification<number>;
            "raster-brightness-min"?: PropertyValueSpecification<number>;
            "raster-brightness-max"?: PropertyValueSpecification<number>;
            "raster-saturation"?: PropertyValueSpecification<number>;
            "raster-contrast"?: PropertyValueSpecification<number>;
            "raster-resampling"?: PropertyValueSpecification<"linear" | "nearest">;
            "raster-fade-duration"?: PropertyValueSpecification<number>;
        };
    };
    export type HillshadeLayerSpecification = {
        "id": string;
        "type": "hillshade";
        "metadata"?: unknown;
        "source": string;
        "source-layer"?: string;
        "minzoom"?: number;
        "maxzoom"?: number;
        "filter"?: FilterSpecification;
        "layout"?: {
            "visibility"?: "visible" | "none";
        };
        "paint"?: {
            "hillshade-illumination-direction"?: PropertyValueSpecification<number>;
            "hillshade-illumination-anchor"?: PropertyValueSpecification<"map" | "viewport">;
            "hillshade-exaggeration"?: PropertyValueSpecification<number>;
            "hillshade-shadow-color"?: PropertyValueSpecification<ColorSpecification>;
            "hillshade-highlight-color"?: PropertyValueSpecification<ColorSpecification>;
            "hillshade-accent-color"?: PropertyValueSpecification<ColorSpecification>;
        };
    };
    export type BackgroundLayerSpecification = {
        "id": string;
        "type": "background";
        "metadata"?: unknown;
        "minzoom"?: number;
        "maxzoom"?: number;
        "layout"?: {
            "visibility"?: "visible" | "none";
        };
        "paint"?: {
            "background-color"?: PropertyValueSpecification<ColorSpecification>;
            "background-pattern"?: PropertyValueSpecification<ResolvedImageSpecification>;
            "background-opacity"?: PropertyValueSpecification<number>;
        };
    };
    export type LayerSpecification = FillLayerSpecification | LineLayerSpecification | SymbolLayerSpecification | CircleLayerSpecification | HeatmapLayerSpecification | FillExtrusionLayerSpecification | RasterLayerSpecification | HillshadeLayerSpecification | BackgroundLayerSpecification;
}

declare module 'mapbox-gl/ui/anchor' {
    export type Anchor = "center" | "top" | "bottom" | "left" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right";
    export const anchorTranslate: {
        [x: Anchor]: string;
    };
    export function applyAnchorClass(element: HTMLElement, anchor: Anchor, prefix: string): void;
}

declare module 'mapbox-gl/style/style_layer' {
    import { Evented } from 'mapbox-gl/util/evented';
    import { Layout, Transitionable, Transitioning, Properties } from 'mapbox-gl/style/properties';
    import { FeatureState } from 'mapbox-gl/style-spec/expression';
    import { Bucket } from 'mapbox-gl/data/bucket';
    import { FeatureFilter } from 'mapbox-gl/style-spec/feature_filter';
    import { TransitionParameters, PropertyValue } from 'mapbox-gl/style/properties';
    import EvaluationParameters, { CrossfadeParameters } from 'mapbox-gl/style/evaluation_parameters';
    import Transform from 'mapbox-gl/geo/transform';
    import { LayerSpecification, FilterSpecification } from 'mapbox-gl/style-spec/types';
    import { CustomLayerInterface } from 'mapbox-gl/style/style_layer/custom_style_layer';
    import Map from 'mapbox-gl/ui/map';
    import { StyleSetterOptions } from 'mapbox-gl/style/style';
    class StyleLayer extends Evented {
        id: string;
        metadata: unknown;
        type: string;
        source: string;
        sourceLayer: string | undefined | null;
        minzoom: number | undefined | null;
        maxzoom: number | undefined | null;
        filter: FilterSpecification | void;
        visibility: "visible" | "none" | void;
        _crossfadeParameters: CrossfadeParameters;
        _unevaluatedLayout: Layout<any>;
        readonly layout: unknown;
        _transitionablePaint: Transitionable<any>;
        _transitioningPaint: Transitioning<any>;
        readonly paint: unknown;
        _featureFilter: FeatureFilter;
        readonly queryRadius: (bucket: Bucket) => number;
        readonly queryIntersectsFeature: (queryGeometry: Array<typeof import("@mapbox/point-geometry").default>, feature: typeof import("@mapbox/vector-tile").VectorTileFeature, featureState: FeatureState, geometry: Array<Array<typeof import("@mapbox/point-geometry").default>>, zoom: number, transform: Transform, pixelsToTileUnits: number, pixelPosMatrix: Float32Array) => boolean | number;
        readonly onAdd: ((map: Map) => void) | undefined | null;
        readonly onRemove: ((map: Map) => void) | undefined | null;
        constructor(layer: LayerSpecification | CustomLayerInterface, properties: Readonly<{
            layout?: Properties<any>;
            paint?: Properties<any>;
        }>);
        getCrossfadeParameters(): CrossfadeParameters;
        getLayoutProperty(name: string): any;
        setLayoutProperty(name: string, value: any, options?: StyleSetterOptions): void;
        getPaintProperty(name: string): unknown;
        setPaintProperty(name: string, value: unknown, options?: StyleSetterOptions): boolean;
        _handleSpecialPaintPropertyUpdate(_: string): void;
        _handleOverridablePaintPropertyUpdate<T, R>(name: string, oldValue: PropertyValue<T, R>, newValue: PropertyValue<T, R>): boolean;
        isHidden(zoom: number): boolean;
        updateTransitions(parameters: TransitionParameters): void;
        hasTransition(): boolean;
        recalculate(parameters: EvaluationParameters, availableImages: Array<string>): void;
        serialize(): object;
        _validate(validate: Function, key: string, name: string, value: unknown, options?: StyleSetterOptions): boolean;
        is3D(): boolean;
        isTileClipped(): boolean;
        hasOffscreenPass(): boolean;
        resize(): void;
        isStateDependent(): boolean;
    }
    export default StyleLayer;
}

declare module 'mapbox-gl/render/image_manager' {
    import { Evented } from 'mapbox-gl/util/evented';
    import { RGBAImage } from 'mapbox-gl/util/image';
    import { ImagePosition } from 'mapbox-gl/render/image_atlas';
    import Texture from 'mapbox-gl/render/texture';
    import { StyleImage } from 'mapbox-gl/style/style_image';
    import Context from 'mapbox-gl/gl/context';
    import { Bin } from 'potpack';
    import { Callback } from 'mapbox-gl/types/callback';
    type Pattern = {
        bin: Bin;
        position: ImagePosition;
    };
    class ImageManager extends Evented {
        images: {
            [x: string]: StyleImage;
        };
        updatedImages: {
            [x: string]: boolean;
        };
        callbackDispatchedThisFrame: {
            [x: string]: boolean;
        };
        loaded: boolean;
        requestors: Array<{
            ids: Array<string>;
            callback: Callback<{
                [x: string]: StyleImage;
            }>;
        }>;
        patterns: {
            [x: string]: Pattern;
        };
        atlasImage: RGBAImage;
        atlasTexture: Texture | undefined | null;
        dirty: boolean;
        constructor();
        isLoaded(): boolean;
        setLoaded(loaded: boolean): void;
        getImage(id: string): StyleImage | undefined | null;
        addImage(id: string, image: StyleImage): void;
        updateImage(id: string, image: StyleImage): void;
        removeImage(id: string): void;
        listImages(): Array<string>;
        getImages(ids: Array<string>, callback: Callback<{
            [x: string]: StyleImage;
        }>): void;
        _notify(ids: Array<string>, callback: Callback<{
            [x: string]: StyleImage;
        }>): void;
        getPixelSize(): {
            width: number;
            height: number;
        };
        getPattern(id: string): ImagePosition | undefined | null;
        bind(context: Context): void;
        _updatePatternAtlas(): void;
        beginFrame(): void;
        dispatchRenderCallbacks(ids: Array<string>): void;
    }
    export default ImageManager;
}

declare module 'mapbox-gl/render/glyph_manager' {
    import loadGlyphRange from 'mapbox-gl/style/load_glyph_range';
    import TinySDF from '@mapbox/tiny-sdf';
    import { StyleGlyph } from 'mapbox-gl/style/style_glyph';
    import { RequestManager } from 'mapbox-gl/util/mapbox';
    import { Callback } from 'mapbox-gl/types/callback';
    type Class<T> = new (...args: any) => T;
    type Entry = {
        glyphs: {
            [id: number]: StyleGlyph | null;
        };
        requests: {
            [range: number]: Array<Callback<{
                [x: number]: StyleGlyph | null;
            }>>;
        };
        tinySDF?: TinySDF;
    };
    class GlyphManager {
        requestManager: RequestManager;
        localIdeographFontFamily: string | undefined | null;
        entries: {
            [x: string]: Entry;
        };
        url: string | undefined | null;
        static loadGlyphRange: typeof loadGlyphRange;
        static TinySDF: Class<TinySDF>;
        constructor(requestManager: RequestManager, localIdeographFontFamily?: string | null);
        setURL(url?: string | null): void;
        getGlyphs(glyphs: {
            [stack: string]: Array<number>;
        }, callback: Callback<{
            [stack: string]: {
                [id: number]: StyleGlyph | undefined | null;
            };
        }>): void;
        _doesCharSupportLocalGlyph(id: number): boolean;
        _tinySDF(entry: Entry, stack: string, id: number): StyleGlyph | undefined | null;
    }
    export default GlyphManager;
}

declare module 'mapbox-gl/style/light' {
    import { Evented } from 'mapbox-gl/util/evented';
    import Color from 'mapbox-gl/style-spec/util/color';
    import { StylePropertySpecification } from 'mapbox-gl/style-spec/style-spec';
    import EvaluationParameters from 'mapbox-gl/style/evaluation_parameters';
    import { StyleSetterOptions } from 'mapbox-gl/style/style';
    import { Transitionable, Transitioning, PossiblyEvaluated, DataConstantProperty } from 'mapbox-gl/style/properties';
    import { Property, PropertyValue, TransitionParameters } from 'mapbox-gl/style/properties';
    import { LightSpecification } from 'mapbox-gl/style-spec/types';
    type LightPosition = {
        x: number;
        y: number;
        z: number;
    };
    class LightPositionProperty implements Property<[number, number, number], LightPosition> {
        specification: StylePropertySpecification;
        constructor();
        possiblyEvaluate(value: PropertyValue<[number, number, number], LightPosition>, parameters: EvaluationParameters): LightPosition;
        interpolate(a: LightPosition, b: LightPosition, t: number): LightPosition;
    }
    type Props = {
        "anchor": DataConstantProperty<"map" | "viewport">;
        "position": LightPositionProperty;
        "color": DataConstantProperty<Color>;
        "intensity": DataConstantProperty<number>;
    };
    class Light extends Evented {
        _transitionable: Transitionable<Props>;
        _transitioning: Transitioning<Props>;
        properties: PossiblyEvaluated<Props>;
        constructor(lightOptions?: LightSpecification);
        getLight(): any;
        setLight(light?: LightSpecification, options?: StyleSetterOptions): void;
        updateTransitions(parameters: TransitionParameters): void;
        hasTransition(): boolean;
        recalculate(parameters: EvaluationParameters): void;
        _validate(validate: Function, value: unknown, options?: {
            validate?: boolean;
        }): boolean;
    }
    export default Light;
}

declare module 'mapbox-gl/render/line_atlas' {
    import Context from 'mapbox-gl/gl/context';
    class LineAtlas {
        width: number;
        height: number;
        nextRow: number;
        bytes: number;
        data: Uint8Array;
        positions: {
            [x: string]: any;
        };
        dirty: boolean;
        texture: WebGLTexture;
        constructor(width: number, height: number);
        getDash(dasharray: Array<number>, round: boolean): any;
        addDash(dasharray: Array<number>, round: boolean): {
            y: number;
            height: number;
            width: number;
        };
        bind(context: Context): void;
    }
    export default LineAtlas;
}

declare module 'mapbox-gl/util/dispatcher' {
    import Actor from 'mapbox-gl/util/actor';
    import WorkerPool from 'mapbox-gl/util/worker_pool';
    type Class<T> = new (...args: any) => T;
    class Dispatcher {
        workerPool: WorkerPool;
        actors: Array<Actor>;
        currentActor: number;
        id: number;
        static Actor: Class<Actor>;
        constructor(workerPool: WorkerPool, parent: any);
        broadcast(type: string, data: unknown, cb?: Function): void;
        getActor(): Actor;
        remove(): void;
    }
    export default Dispatcher;
}

declare module 'mapbox-gl/source/source' {
    import Dispatcher from 'mapbox-gl/util/dispatcher';
    import { Event, Evented } from 'mapbox-gl/util/evented';
    import Map from 'mapbox-gl/ui/map';
    import Tile from 'mapbox-gl/source/tile';
    import { OverscaledTileID } from 'mapbox-gl/source/tile_id';
    import { Callback } from 'mapbox-gl/types/callback';
    import { CanonicalTileID } from 'mapbox-gl/source/tile_id';
    export interface Source {
        readonly type: string;
        id: string;
        minzoom: number;
        maxzoom: number;
        tileSize: number;
        attribution?: string;
        roundZoom?: boolean;
        isTileClipped?: boolean;
        mapbox_logo?: boolean;
        tileID?: CanonicalTileID;
        reparseOverscaled?: boolean;
        vectorLayerIds?: Array<string>;
        hasTransition(): boolean;
        loaded(): boolean;
        fire(event: Event): unknown;
        readonly onAdd?: (map: Map) => void;
        readonly onRemove?: (map: Map) => void;
        loadTile(tile: Tile, callback: Callback<void>): void;
        readonly hasTile?: (tileID: OverscaledTileID) => boolean;
        readonly abortTile?: (tile: Tile, callback: Callback<void>) => void;
        readonly unloadTile?: (tile: Tile, callback: Callback<void>) => void;
        serialize(): object;
        readonly prepare?: () => void;
    }
    type SourceStatics = {
        workerSourceURL?: URL;
    };
    export type SourceClass = Class<Source> & SourceStatics;
    import vector from 'mapbox-gl/source/vector_tile_source';
    import raster from 'mapbox-gl/source/raster_tile_source';
    import geojson from 'mapbox-gl/source/geojson_source';
    import image from 'mapbox-gl/source/image_source';
    import { SourceSpecification } from 'mapbox-gl/style-spec/types';
    type Class<T> = new (...args: any) => T;
    export const create: (id: string, specification: SourceSpecification, dispatcher: Dispatcher, eventedParent: Evented) => vector | raster | geojson | image;
    export const getType: (name: string) => any;
    export const setType: (name: string, type: Class<Source>) => void;
    export interface Actor {
        send(type: string, data: object, callback: Callback<any>): void;
    }
    export {};
}

declare module 'mapbox-gl/source/source_cache' {
    import Tile from 'mapbox-gl/source/tile';
    import { Evented } from 'mapbox-gl/util/evented';
    import TileCache from 'mapbox-gl/source/tile_cache';
    import Context from 'mapbox-gl/gl/context';
    import { OverscaledTileID } from 'mapbox-gl/source/tile_id';
    import SourceFeatureState from 'mapbox-gl/source/source_state';
    import { Source } from 'mapbox-gl/source/source';
    import Map from 'mapbox-gl/ui/map';
    import Style from 'mapbox-gl/style/style';
    import Dispatcher from 'mapbox-gl/util/dispatcher';
    import Transform from 'mapbox-gl/geo/transform';
    import { TileState } from 'mapbox-gl/source/tile';
    import { Callback } from 'mapbox-gl/types/callback';
    import { SourceSpecification } from 'mapbox-gl/style-spec/types';
    class SourceCache extends Evented {
        id: string;
        dispatcher: Dispatcher;
        map: Map;
        style: Style;
        _source: Source;
        _sourceLoaded: boolean;
        _sourceErrored: boolean;
        _tiles: {
            [x: any]: Tile;
        };
        _prevLng: number | void;
        _cache: TileCache;
        _timers: {
            [x: any]: number;
        };
        _cacheTimers: {
            [x: any]: number;
        };
        _maxTileCacheSize: number | undefined | null;
        _paused: boolean;
        _shouldReloadOnResume: boolean;
        _coveredTiles: {
            [x: any]: boolean;
        };
        transform: Transform;
        _isIdRenderable: (id: number, symbolLayer?: boolean) => boolean;
        used: boolean;
        _state: SourceFeatureState;
        static maxUnderzooming: number;
        static maxOverzooming: number;
        constructor(id: string, options: SourceSpecification, dispatcher: Dispatcher);
        onAdd(map: Map): void;
        onRemove(map: Map): void;
        loaded(): boolean;
        getSource(): Source;
        pause(): void;
        resume(): void;
        _loadTile(tile: Tile, callback: Callback<void>): void;
        _unloadTile(tile: Tile): void;
        _abortTile(tile: Tile): void;
        serialize(): object;
        prepare(context: Context): void;
        getIds(): Array<number>;
        getRenderableIds(symbolLayer?: boolean): Array<number>;
        hasRenderableParent(tileID: OverscaledTileID): boolean;
        _isIdRenderable(id: number, symbolLayer?: boolean): boolean;
        reload(): void;
        _reloadTile(id: string | number, state: TileState): void;
        _tileLoaded(tile: Tile, id: string | number, previousState: TileState, err?: Error | null): void;
        _backfillDEM(tile: Tile): void;
        getTile(tileID: OverscaledTileID): Tile;
        getTileByID(id: string | number): Tile;
        getZoom(transform: Transform): number;
        _retainLoadedChildren(idealTiles: {
            [x: any]: OverscaledTileID;
        }, zoom: number, maxCoveringZoom: number, retain: {
            [x: any]: OverscaledTileID;
        }): void;
        findLoadedParent(tileID: OverscaledTileID, minCoveringZoom: number): Tile | undefined | null;
        updateCacheSize(transform: Transform): void;
        handleWrapJump(lng: number): void;
        update(transform: Transform): void;
        releaseSymbolFadeTiles(): void;
        _updateRetainedTiles(idealTileIDs: Array<OverscaledTileID>, zoom: number): {
            [x: string]: OverscaledTileID;
        };
        _addTile(tileID: OverscaledTileID): Tile;
        _setTileReloadTimer(id: string | number, tile: Tile): void;
        _removeTile(id: string | number): void;
        clearTiles(): void;
        tilesIn(pointQueryGeometry: Array<typeof import("@mapbox/point-geometry").default>, maxPitchScaleFactor: number, has3DLayer: boolean): any[];
        getVisibleCoordinates(symbolLayer?: boolean): Array<OverscaledTileID>;
        hasTransition(): boolean;
        setFeatureState(sourceLayer: string | undefined | null, feature: number, state: object): void;
        removeFeatureState(sourceLayer?: string, feature?: number, key?: string): void;
        getFeatureState(sourceLayer: string | undefined | null, feature: number): object;
    }
    export default SourceCache;
}

declare module 'mapbox-gl/source/rtl_text_plugin' {
    import { Evented } from 'mapbox-gl/util/evented';
    export const evented: Evented;
    type CompletionCallback = (error?: Error) => void;
    type ErrorCallback = (error: Error) => void;
    export const getRTLTextPluginStatus: () => string;
    export const registerForPluginAvailability: (callback: (args: {
        pluginURL: string;
        completionCallback: CompletionCallback;
    }) => void) => (args: {
        pluginURL: string;
        completionCallback: CompletionCallback;
    }) => void;
    export const clearRTLTextPlugin: () => void;
    export const setRTLTextPlugin: (url: string, callback: ErrorCallback) => void;
    export const plugin: {
        applyArabicShaping: Function | undefined | null;
        processBidirectionalText: ((b: string, a: Array<number>) => Array<string>) | undefined | null;
        processStyledBidirectionalText: ((c: string, b: Array<number>, a: Array<number>) => Array<[string, Array<number>]>) | undefined | null;
        isLoaded: () => boolean;
    };
    export {};
}

declare module 'mapbox-gl/style/pauseable_placement' {
    import { Placement } from 'mapbox-gl/symbol/placement';
    import Transform from 'mapbox-gl/geo/transform';
    import StyleLayer from 'mapbox-gl/style/style_layer';
    import Tile from 'mapbox-gl/source/tile';
    class LayerPlacement {
        _currentTileIndex: number;
        _tiles: Array<Tile>;
        _seenCrossTileIDs: {
            [x: string | number]: boolean;
        };
        constructor();
        continuePlacement(tiles: Array<Tile>, placement: Placement, showCollisionBoxes: boolean, styleLayer: StyleLayer, shouldPausePlacement: () => boolean): boolean;
    }
    class PauseablePlacement {
        placement: Placement;
        _done: boolean;
        _currentPlacementIndex: number;
        _forceFullPlacement: boolean;
        _showCollisionBoxes: boolean;
        _inProgressLayer: LayerPlacement | undefined | null;
        constructor(transform: Transform, order: Array<string>, forceFullPlacement: boolean, showCollisionBoxes: boolean, fadeDuration: number, crossSourceCollisions: boolean, prevPlacement?: Placement);
        isDone(): boolean;
        continuePlacement(order: Array<string>, layers: {
            [x: string]: StyleLayer;
        }, layerTiles: {
            [x: string]: Array<Tile>;
        }): void;
        commit(now: number): Placement;
    }
    export default PauseablePlacement;
}

declare module 'mapbox-gl/style/zoom_history' {
    class ZoomHistory {
        lastZoom: number;
        lastFloorZoom: number;
        lastIntegerZoom: number;
        lastIntegerZoomTime: number;
        first: boolean;
        constructor();
        update(z: number, now: number): boolean;
    }
    export default ZoomHistory;
}

declare module 'mapbox-gl/symbol/cross_tile_symbol_index' {
    import { SymbolInstanceArray } from 'mapbox-gl/data/array_types';
    import { SymbolInstance } from 'mapbox-gl/data/array_types';
    import { OverscaledTileID } from 'mapbox-gl/source/tile_id';
    import SymbolBucket from 'mapbox-gl/data/bucket/symbol_bucket';
    import StyleLayer from 'mapbox-gl/style/style_layer';
    import Tile from 'mapbox-gl/source/tile';
    class TileLayerIndex {
        tileID: OverscaledTileID;
        indexedSymbolInstances: {
            [x: number]: Array<{
                crossTileID: number;
                coord: {
                    x: number;
                    y: number;
                };
            }>;
        };
        bucketInstanceId: number;
        constructor(tileID: OverscaledTileID, symbolInstances: SymbolInstanceArray, bucketInstanceId: number);
        getScaledCoordinates(symbolInstance: SymbolInstance, childTileID: OverscaledTileID): {
            x: number;
            y: number;
        };
        findMatches(symbolInstances: SymbolInstanceArray, newTileID: OverscaledTileID, zoomCrossTileIDs: {
            [crossTileID: number]: boolean;
        }): void;
    }
    class CrossTileIDs {
        maxCrossTileID: number;
        constructor();
        generate(): number;
    }
    class CrossTileSymbolLayerIndex {
        indexes: {
            [zoom: string | number]: {
                [tileId: string | number]: TileLayerIndex;
            };
        };
        usedCrossTileIDs: {
            [zoom: string | number]: {
                [crossTileID: number]: boolean;
            };
        };
        lng: number;
        constructor();
        handleWrapJump(lng: number): void;
        addBucket(tileID: OverscaledTileID, bucket: SymbolBucket, crossTileIDs: CrossTileIDs): boolean;
        removeBucketCrossTileIDs(zoom: string | number, removedBucket: TileLayerIndex): void;
        removeStaleBuckets(currentIDs: {
            [x: string | number]: boolean;
        }): boolean;
    }
    class CrossTileSymbolIndex {
        layerIndexes: {
            [layerId: string]: CrossTileSymbolLayerIndex;
        };
        crossTileIDs: CrossTileIDs;
        maxBucketInstanceId: number;
        bucketsInCurrentPlacement: {
            [x: number]: boolean;
        };
        constructor();
        addLayer(styleLayer: StyleLayer, tiles: Array<Tile>, lng: number): boolean;
        pruneUnusedLayers(usedLayers: Array<string>): void;
    }
    export default CrossTileSymbolIndex;
}

declare module 'mapbox-gl/geo/transform' {
    import LngLat from 'mapbox-gl/geo/lng_lat';
    import LngLatBounds from 'mapbox-gl/geo/lng_lat_bounds';
    import MercatorCoordinate from 'mapbox-gl/geo/mercator_coordinate';
    import Point from '@mapbox/point-geometry';
    import { UnwrappedTileID } from 'mapbox-gl/source/tile_id';
    import { OverscaledTileID, CanonicalTileID } from 'mapbox-gl/source/tile_id';
    class Transform {
        tileSize: number;
        tileZoom: number;
        lngRange: [number, number] | undefined | null;
        latRange: [number, number] | undefined | null;
        maxValidLatitude: number;
        scale: number;
        width: number;
        height: number;
        angle: number;
        rotationMatrix: Float64Array;
        zoomFraction: number;
        pixelsToGLUnits: [number, number];
        cameraToCenterDistance: number;
        mercatorMatrix: Array<number>;
        projMatrix: Float64Array;
        alignedProjMatrix: Float64Array;
        pixelMatrix: Float64Array;
        pixelMatrixInverse: Float64Array;
        glCoordMatrix: Float32Array;
        labelPlaneMatrix: Float32Array;
        _fov: number;
        _pitch: number;
        _zoom: number;
        _unmodified: boolean;
        _renderWorldCopies: boolean;
        _minZoom: number;
        _maxZoom: number;
        _center: LngLat;
        _constraining: boolean;
        _posMatrixCache: {
            [x: number]: Float32Array;
        };
        _alignedPosMatrixCache: {
            [x: number]: Float32Array;
        };
        constructor(minZoom: number | undefined | null, maxZoom: number | undefined | null, renderWorldCopies: boolean | void);
        clone(): Transform;
        get minZoom(): number;
        set minZoom(zoom: number);
        get maxZoom(): number;
        set maxZoom(zoom: number);
        get renderWorldCopies(): boolean;
        set renderWorldCopies(renderWorldCopies?: boolean | null);
        get worldSize(): number;
        get centerPoint(): typeof import("@mapbox/point-geometry").default;
        get size(): typeof import("@mapbox/point-geometry").default;
        get bearing(): number;
        set bearing(bearing: number);
        get pitch(): number;
        set pitch(pitch: number);
        get fov(): number;
        set fov(fov: number);
        get zoom(): number;
        set zoom(zoom: number);
        get center(): LngLat;
        set center(center: LngLat);
        coveringZoomLevel(options: {
            roundZoom?: boolean;
            tileSize: number;
        }): number;
        getVisibleUnwrappedCoordinates(tileID: CanonicalTileID): UnwrappedTileID[];
        coveringTiles(options: {
            tileSize: number;
            minzoom?: number;
            maxzoom?: number;
            roundZoom?: boolean;
            reparseOverscaled?: boolean;
            renderWorldCopies?: boolean;
        }): Array<OverscaledTileID>;
        resize(width: number, height: number): void;
        get unmodified(): boolean;
        zoomScale(zoom: number): number;
        scaleZoom(scale: number): number;
        project(lnglat: LngLat): Point;
        unproject(point: typeof import("@mapbox/point-geometry").default): LngLat;
        get point(): typeof import("@mapbox/point-geometry").default;
        setLocationAtPoint(lnglat: LngLat, point: typeof import("@mapbox/point-geometry").default): void;
        locationPoint(lnglat: LngLat): Point;
        pointLocation(p: typeof import("@mapbox/point-geometry").default): LngLat;
        locationCoordinate(lnglat: LngLat): MercatorCoordinate;
        coordinateLocation(coord: MercatorCoordinate): LngLat;
        pointCoordinate(p: typeof import("@mapbox/point-geometry").default): MercatorCoordinate;
        coordinatePoint(coord: MercatorCoordinate): Point;
        getBounds(): LngLatBounds;
        getMaxBounds(): LngLatBounds | null;
        setMaxBounds(bounds?: LngLatBounds): void;
        calculatePosMatrix(unwrappedTileID: UnwrappedTileID, aligned?: boolean): Float32Array;
        customLayerMatrix(): Array<number>;
        _constrain(): void;
        _calcMatrices(): void;
        maxPitchScaleFactor(): number;
        getCameraPoint(): any;
        getCameraQueryGeometry(queryGeometry: Array<typeof import("@mapbox/point-geometry").default>): Array<typeof import("@mapbox/point-geometry").default>;
    }
    export default Transform;
}

declare module 'mapbox-gl/style/style_glyph' {
    import { AlphaImage } from 'mapbox-gl/util/image';
    export type GlyphMetrics = {
        width: number;
        height: number;
        left: number;
        top: number;
        advance: number;
    };
    export type StyleGlyph = {
        id: number;
        bitmap: AlphaImage;
        metrics: GlyphMetrics;
    };
}

declare module 'mapbox-gl/types/callback' {
    export type Callback<T> = (error?: Error | null, result?: T | null) => void;
}

declare module 'mapbox-gl/style/evaluation_parameters' {
    import ZoomHistory from 'mapbox-gl/style/zoom_history';
    import { TransitionSpecification } from 'mapbox-gl/style-spec/types';
    export type CrossfadeParameters = {
        fromScale: number;
        toScale: number;
        t: number;
    };
    class EvaluationParameters {
        zoom: number;
        now: number;
        fadeDuration: number;
        zoomHistory: ZoomHistory;
        transition: TransitionSpecification;
        constructor(zoom: number, options?: any);
        isSupportedScript(str: string): boolean;
        crossFadingFactor(): number;
        getCrossfadeParameters(): CrossfadeParameters;
    }
    export default EvaluationParameters;
}

declare module 'mapbox-gl/symbol/placement' {
    import CollisionIndex from 'mapbox-gl/symbol/collision_index';
    import Transform from 'mapbox-gl/geo/transform';
    import StyleLayer from 'mapbox-gl/style/style_layer';
    import Tile from 'mapbox-gl/source/tile';
    import SymbolBucket, { SingleCollisionBox } from 'mapbox-gl/data/bucket/symbol_bucket';
    import { mat4 } from 'gl-matrix';
    import { CollisionBoxArray, SymbolInstance } from 'mapbox-gl/data/array_types';
    import FeatureIndex from 'mapbox-gl/data/feature_index';
    import { OverscaledTileID } from 'mapbox-gl/source/tile_id';
    import { TextAnchor } from 'mapbox-gl/symbol/symbol_layout';
    class OpacityState {
        opacity: number;
        placed: boolean;
        constructor(prevState: OpacityState | undefined | null, increment: number, placed: boolean, skipFade?: boolean | null);
        isHidden(): boolean;
    }
    class JointOpacityState {
        text: OpacityState;
        icon: OpacityState;
        constructor(prevState: JointOpacityState | undefined | null, increment: number, placedText: boolean, placedIcon: boolean, skipFade?: boolean | null);
        isHidden(): boolean;
    }
    class JointPlacement {
        text: boolean;
        icon: boolean;
        skipFade: boolean;
        constructor(text: boolean, icon: boolean, skipFade: boolean);
    }
    export class RetainedQueryData {
        bucketInstanceId: number;
        featureIndex: FeatureIndex;
        sourceLayerIndex: number;
        bucketIndex: number;
        tileID: OverscaledTileID;
        featureSortOrder: Array<number> | undefined | null;
        constructor(bucketInstanceId: number, featureIndex: FeatureIndex, sourceLayerIndex: number, bucketIndex: number, tileID: OverscaledTileID);
    }
    type CollisionGroup = {
        ID: number;
        predicate?: any;
    };
    class CollisionGroups {
        collisionGroups: {
            [groupName: string]: CollisionGroup;
        };
        maxGroupID: number;
        crossSourceCollisions: boolean;
        constructor(crossSourceCollisions: boolean);
        get(sourceID: string): CollisionGroup;
    }
    export type VariableOffset = {
        textOffset: [number, number];
        width: number;
        height: number;
        anchor: TextAnchor;
        textBoxScale: number;
        prevAnchor?: TextAnchor;
    };
    export type CrossTileID = string | number;
    export class Placement {
        transform: Transform;
        collisionIndex: CollisionIndex;
        placements: {
            [x: CrossTileID]: JointPlacement;
        };
        opacities: {
            [x: CrossTileID]: JointOpacityState;
        };
        variableOffsets: {
            [x: CrossTileID]: VariableOffset;
        };
        placedOrientations: {
            [x: CrossTileID]: number;
        };
        commitTime: number;
        prevZoomAdjustment: number;
        lastPlacementChangeTime: number;
        stale: boolean;
        fadeDuration: number;
        retainedQueryData: {
            [x: number]: RetainedQueryData;
        };
        collisionGroups: CollisionGroups;
        prevPlacement: Placement | undefined | null;
        zoomAtLastRecencyCheck: number;
        constructor(transform: Transform, fadeDuration: number, crossSourceCollisions: boolean, prevPlacement?: Placement);
        placeLayerTile(styleLayer: StyleLayer, tile: Tile, showCollisionBoxes: boolean, seenCrossTileIDs: {
            [x: string | number]: boolean;
        }): void;
        attemptAnchorPlacement(anchor: TextAnchor, textBox: SingleCollisionBox, width: number, height: number, textBoxScale: number, rotateWithMap: boolean, pitchWithMap: boolean, textPixelRatio: number, posMatrix: mat4, collisionGroup: CollisionGroup, textAllowOverlap: boolean, symbolInstance: SymbolInstance, bucket: SymbolBucket, orientation: number, iconBox?: SingleCollisionBox | null): {
            shift: typeof import("@mapbox/point-geometry").default;
            placedGlyphBoxes: {
                box: Array<number>;
                offscreen: boolean;
            };
        } | undefined | null;
        placeLayerBucket(bucket: SymbolBucket, posMatrix: mat4, textLabelPlaneMatrix: mat4, iconLabelPlaneMatrix: mat4, scale: number, textPixelRatio: number, showCollisionBoxes: boolean, holdingForFade: boolean, seenCrossTileIDs: {
            [x: string | number]: boolean;
        }, collisionBoxArray?: CollisionBoxArray | null): void;
        markUsedJustification(bucket: SymbolBucket, placedAnchor: TextAnchor, symbolInstance: SymbolInstance, orientation: number): void;
        markUsedOrientation(bucket: SymbolBucket, orientation: number, symbolInstance: SymbolInstance): void;
        commit(now: number): void;
        updateLayerOpacities(styleLayer: StyleLayer, tiles: Array<Tile>): void;
        updateBucketOpacities(bucket: SymbolBucket, seenCrossTileIDs: {
            [x: string | number]: boolean;
        }, collisionBoxArray?: CollisionBoxArray | null): void;
        symbolFadeChange(now: number): number;
        zoomAdjustment(zoom: number): number;
        hasTransitions(now: number): boolean;
        stillRecent(now: number, zoom: number): boolean;
        setStale(): void;
    }
    export {};
}

declare module 'mapbox-gl/util/ajax' {
    import { Callback } from 'mapbox-gl/types/callback';
    import { Cancelable } from 'mapbox-gl/types/cancelable';
    const ResourceType: {
        Unknown: string;
        Style: string;
        Source: string;
        Tile: string;
        Glyphs: string;
        SpriteImage: string;
        SpriteJSON: string;
        Image: string;
    };
    export { ResourceType };
    export type RequestParameters = {
        url: string;
        headers?: object;
        method?: "GET" | "POST" | "PUT";
        body?: string;
        type?: "string" | "json" | "arrayBuffer";
        credentials?: "same-origin" | "include";
        collectResourceTiming?: boolean;
    };
    export type ResponseCallback<T> = (error?: Error | null, data?: T | null, cacheControl?: string | null, expires?: string | null) => void;
    export const getReferrer: () => any;
    export const makeRequest: (requestParameters: RequestParameters, callback: ResponseCallback<any>) => Cancelable;
    export const getJSON: (requestParameters: RequestParameters, callback: ResponseCallback<object>) => Cancelable;
    export const getArrayBuffer: (requestParameters: RequestParameters, callback: ResponseCallback<ArrayBuffer>) => Cancelable;
    export const postData: (requestParameters: RequestParameters, callback: ResponseCallback<string>) => Cancelable;
    export const resetImageRequestQueue: () => void;
    export const getImage: (requestParameters: RequestParameters, callback: Callback<HTMLImageElement>) => Cancelable;
    export const getVideo: (urls: string[], callback: Callback<HTMLVideoElement>) => Cancelable;
}

declare module 'mapbox-gl/style/validate_style' {
    import { Evented } from 'mapbox-gl/util/evented';
    type ValidationError = {
        message: string;
        line: number;
        identifier?: string;
    };
    export type Validator = (a: object) => ReadonlyArray<ValidationError>;
    type ValidateStyle = {
        source: Validator;
        layer: Validator;
        light: Validator;
        filter: Validator;
        paintProperty: Validator;
        layoutProperty: Validator;
        (b: object, a?: object | null): ReadonlyArray<ValidationError>;
    };
    export const validateStyle: ValidateStyle;
    export const validateSource: Validator;
    export const validateLight: Validator;
    export const validateFilter: Validator;
    export const validatePaintProperty: Validator;
    export const validateLayoutProperty: Validator;
    export function emitValidationErrors(emitter: Evented, errors?: ReadonlyArray<{
        message: string;
        identifier?: string;
    }> | null): boolean;
    export {};
}

declare module 'mapbox-gl/types/tilejson' {
    export type TileJSON = {
        tilejson: "2.2.0" | "2.1.0" | "2.0.1" | "2.0.0" | "1.0.0";
        name?: string;
        description?: string;
        version?: string;
        attribution?: string;
        template?: string;
        tiles: Array<string>;
        grids?: Array<string>;
        data?: Array<string>;
        minzoom?: number;
        maxzoom?: number;
        bounds?: [number, number, number, number];
        center?: [number, number, number];
    };
}

declare module 'mapbox-gl/data/segment' {
    import VertexArrayObject from 'mapbox-gl/render/vertex_array_object';
    import { StructArray } from 'mapbox-gl/util/struct_array';
    export type Segment = {
        sortKey: number | void;
        vertexOffset: number;
        primitiveOffset: number;
        vertexLength: number;
        primitiveLength: number;
        vaos: {
            [x: string]: VertexArrayObject;
        };
    };
    class SegmentVector {
        static MAX_VERTEX_ARRAY_LENGTH: number;
        segments: Array<Segment>;
        constructor(segments?: Array<Segment>);
        prepareSegment(numVertices: number, layoutVertexArray: StructArray, indexArray: StructArray, sortKey?: number): Segment;
        get(): Segment[];
        destroy(): void;
        static simpleSegment(vertexOffset: number, primitiveOffset: number, vertexLength: number, primitiveLength: number): SegmentVector;
    }
    export default SegmentVector;
}

declare module 'mapbox-gl/data/program_configuration' {
    import { PossiblyEvaluatedPropertyValue } from 'mapbox-gl/style/properties';
    import FeaturePositionMap from 'mapbox-gl/data/feature_position_map';
    import { Uniform, UniformLocations } from 'mapbox-gl/render/uniform_binding';
    import Context from 'mapbox-gl/gl/context';
    import { TypedStyleLayer } from 'mapbox-gl/style/style_layer/typed_style_layer';
    import { CrossfadeParameters } from 'mapbox-gl/style/evaluation_parameters';
    import { StructArrayMember } from 'mapbox-gl/util/struct_array';
    import VertexBuffer from 'mapbox-gl/gl/vertex_buffer';
    import { ImagePosition } from 'mapbox-gl/render/image_atlas';
    import { Feature, FeatureState, GlobalProperties } from 'mapbox-gl/style-spec/expression';
    import { PossiblyEvaluated } from 'mapbox-gl/style/properties';
    import { FeatureStates } from 'mapbox-gl/source/source_state';
    import { FormattedSection } from 'mapbox-gl/style-spec/expression/types/formatted';
    export type BinderUniform = {
        name: string;
        property: string;
        binding: Uniform<any>;
    };
    interface Binder<T> {
        maxValue: number;
        uniformNames: Array<string>;
        populatePaintArray(length: number, feature: Feature, imagePositions: {
            [x: string]: ImagePosition;
        }, formattedSection?: FormattedSection): void;
        updatePaintArray(start: number, length: number, feature: Feature, featureState: FeatureState, imagePositions: {
            [x: string]: ImagePosition;
        }): void;
        upload(a: Context): void;
        destroy(): void;
        defines(): Array<string>;
        setConstantPatternPositions(posTo: ImagePosition, posFrom: ImagePosition): void;
        setUniforms(context: Context, uniform: Uniform<any>, globals: GlobalProperties, currentValue: PossiblyEvaluatedPropertyValue<T>, uniformName: string): void;
        getBinding(context: Context, location: WebGLUniformLocation): Partial<Uniform<any>>;
    }
    export default class ProgramConfiguration {
        binders: {
            [x: string]: Binder<any>;
        };
        cacheKey: string;
        layoutAttributes: Array<StructArrayMember>;
        _buffers: Array<VertexBuffer>;
        _featureMap: FeaturePositionMap;
        _bufferOffset: number;
        constructor();
        static createDynamic<Layer extends TypedStyleLayer>(layer: Layer, zoom: number, filterProperties: (a: string) => boolean): ProgramConfiguration;
        populatePaintArrays(newLength: number, feature: Feature, index: number, imagePositions: {
            [x: string]: ImagePosition;
        }, formattedSection?: FormattedSection): void;
        setConstantPatternPositions(posTo: ImagePosition, posFrom: ImagePosition): void;
        updatePaintArrays(featureStates: FeatureStates, vtLayer: typeof import("@mapbox/vector-tile").VectorTileLayer, layer: TypedStyleLayer, imagePositions: {
            [x: string]: ImagePosition;
        }): boolean;
        defines(): Array<string>;
        getPaintVertexBuffers(): Array<VertexBuffer>;
        getUniforms(context: Context, locations: UniformLocations): Array<BinderUniform>;
        setUniforms<Properties extends object>(context: Context, binderUniforms: Array<BinderUniform>, properties: PossiblyEvaluated<Properties>, globals: GlobalProperties): void;
        updatePatternPaintBuffers(crossfade: CrossfadeParameters): void;
        upload(context: Context): void;
        destroy(): void;
    }
    export class ProgramConfigurationSet<Layer extends TypedStyleLayer> {
        programConfigurations: {
            [x: string]: ProgramConfiguration;
        };
        needsUpload: boolean;
        constructor(layoutAttributes: Array<StructArrayMember>, layers: ReadonlyArray<Layer>, zoom: number, filterProperties?: (a: string) => boolean);
        populatePaintArrays(length: number, feature: Feature, index: number, imagePositions: {
            [x: string]: ImagePosition;
        }, formattedSection?: FormattedSection): void;
        updatePaintArrays(featureStates: FeatureStates, vtLayer: typeof import("@mapbox/vector-tile").VectorTileLayer, layers: ReadonlyArray<TypedStyleLayer>, imagePositions: {
            [x: string]: ImagePosition;
        }): void;
        get(layerId: string): ProgramConfiguration;
        upload(context: Context): void;
        destroy(): void;
    }
    export {};
}

declare module 'mapbox-gl/render/program' {
    import ProgramConfiguration from 'mapbox-gl/data/program_configuration';
    import Context from 'mapbox-gl/gl/context';
    import SegmentVector from 'mapbox-gl/data/segment';
    import VertexBuffer from 'mapbox-gl/gl/vertex_buffer';
    import IndexBuffer from 'mapbox-gl/gl/index_buffer';
    import DepthMode from 'mapbox-gl/gl/depth_mode';
    import StencilMode from 'mapbox-gl/gl/stencil_mode';
    import ColorMode from 'mapbox-gl/gl/color_mode';
    import CullFaceMode from 'mapbox-gl/gl/cull_face_mode';
    import { UniformBindings, UniformValues, UniformLocations } from 'mapbox-gl/render/uniform_binding';
    import { BinderUniform } from 'mapbox-gl/data/program_configuration';
    export type DrawMode = WebGLRenderingContext["LINES"] | WebGLRenderingContext["TRIANGLES"] | WebGLRenderingContext["LINE_STRIP"];
    class Program<Us extends UniformBindings> {
        program: WebGLProgram;
        attributes: {
            [x: string]: number;
        };
        numAttributes: number;
        fixedUniforms: Us;
        binderUniforms: Array<BinderUniform>;
        constructor(context: Context, source: {
            fragmentSource: string;
            vertexSource: string;
        }, configuration: ProgramConfiguration, fixedUniforms: (b: Context, a: UniformLocations) => Us, showOverdrawInspector: boolean);
        draw(context: Context, drawMode: DrawMode, depthMode: Readonly<DepthMode>, stencilMode: Readonly<StencilMode>, colorMode: Readonly<ColorMode>, cullFaceMode: Readonly<CullFaceMode>, uniformValues: UniformValues<Us>, layerID: string, layoutVertexBuffer: VertexBuffer, indexBuffer: IndexBuffer, segments: SegmentVector, currentProperties: any, zoom?: number | null, configuration?: ProgramConfiguration | null, dynamicLayoutBuffer?: VertexBuffer | null, dynamicLayoutBuffer2?: VertexBuffer | null): void;
    }
    export default Program;
}

declare module 'mapbox-gl/gl/context' {
    import IndexBuffer from 'mapbox-gl/gl/index_buffer';
    import VertexBuffer from 'mapbox-gl/gl/vertex_buffer';
    import Framebuffer from 'mapbox-gl/gl/framebuffer';
    import DepthMode from 'mapbox-gl/gl/depth_mode';
    import StencilMode from 'mapbox-gl/gl/stencil_mode';
    import ColorMode from 'mapbox-gl/gl/color_mode';
    import CullFaceMode from 'mapbox-gl/gl/cull_face_mode';
    import { ClearColor, ClearDepth, ClearStencil, ColorMask, DepthMask, StencilMask, StencilFunc, StencilOp, StencilTest, DepthRange, DepthTest, DepthFunc, Blend, BlendFunc, BlendColor, BlendEquation, CullFace, CullFaceSide, FrontFace, Program, ActiveTextureUnit, Viewport, BindFramebuffer, BindRenderbuffer, BindTexture, BindVertexBuffer, BindElementBuffer, BindVertexArrayOES, PixelStoreUnpack, PixelStoreUnpackPremultiplyAlpha, PixelStoreUnpackFlipY } from 'mapbox-gl/gl/value';
    import { TriangleIndexArray, LineIndexArray, LineStripIndexArray } from 'mapbox-gl/data/index_array_type';
    import { StructArray, StructArrayMember } from 'mapbox-gl/util/struct_array';
    import Color from 'mapbox-gl/style-spec/util/color';
    type ClearArgs = {
        color?: Color;
        depth?: number;
        stencil?: number;
    };
    class Context {
        gl: WebGLRenderingContext;
        extVertexArrayObject: any;
        currentNumAttributes: number | undefined | null;
        clearColor: ClearColor;
        clearDepth: ClearDepth;
        clearStencil: ClearStencil;
        colorMask: ColorMask;
        depthMask: DepthMask;
        stencilMask: StencilMask;
        stencilFunc: StencilFunc;
        stencilOp: StencilOp;
        stencilTest: StencilTest;
        depthRange: DepthRange;
        depthTest: DepthTest;
        depthFunc: DepthFunc;
        blend: Blend;
        blendFunc: BlendFunc;
        blendColor: BlendColor;
        blendEquation: BlendEquation;
        cullFace: CullFace;
        cullFaceSide: CullFaceSide;
        frontFace: FrontFace;
        program: Program;
        activeTexture: ActiveTextureUnit;
        viewport: Viewport;
        bindFramebuffer: BindFramebuffer;
        bindRenderbuffer: BindRenderbuffer;
        bindTexture: BindTexture;
        bindVertexBuffer: BindVertexBuffer;
        bindElementBuffer: BindElementBuffer;
        bindVertexArrayOES: BindVertexArrayOES;
        pixelStoreUnpack: PixelStoreUnpack;
        pixelStoreUnpackPremultiplyAlpha: PixelStoreUnpackPremultiplyAlpha;
        pixelStoreUnpackFlipY: PixelStoreUnpackFlipY;
        extTextureFilterAnisotropic: any;
        extTextureFilterAnisotropicMax: any;
        extTextureHalfFloat: any;
        constructor(gl: WebGLRenderingContext);
        setDefault(): void;
        setDirty(): void;
        createIndexBuffer(array: TriangleIndexArray | LineIndexArray | LineStripIndexArray, dynamicDraw?: boolean): IndexBuffer;
        createVertexBuffer(array: StructArray, attributes: ReadonlyArray<StructArrayMember>, dynamicDraw?: boolean): VertexBuffer;
        createRenderbuffer(storageFormat: number, width: number, height: number): WebGLRenderbuffer;
        createFramebuffer(width: number, height: number): Framebuffer;
        clear({ color, depth }: ClearArgs): void;
        setCullFace(cullFaceMode: Readonly<CullFaceMode>): void;
        setDepthMode(depthMode: Readonly<DepthMode>): void;
        setStencilMode(stencilMode: Readonly<StencilMode>): void;
        setColorMode(colorMode: Readonly<ColorMode>): void;
        unbindVAO(): void;
    }
    export default Context;
}

declare module 'mapbox-gl/gl/depth_mode' {
    import { DepthFuncType, DepthMaskType, DepthRangeType } from 'mapbox-gl/gl/types';
    class DepthMode {
        func: DepthFuncType;
        mask: DepthMaskType;
        range: DepthRangeType;
        static ReadOnly: boolean;
        static ReadWrite: boolean;
        constructor(depthFunc: DepthFuncType, depthMask: DepthMaskType, depthRange: DepthRangeType);
        static disabled: Readonly<DepthMode>;
    }
    export default DepthMode;
}

declare module 'mapbox-gl/gl/stencil_mode' {
    import { StencilOpConstant, StencilTest } from 'mapbox-gl/gl/types';
    class StencilMode {
        test: StencilTest;
        ref: number;
        mask: number;
        fail: StencilOpConstant;
        depthFail: StencilOpConstant;
        pass: StencilOpConstant;
        constructor(test: StencilTest, ref: number, mask: number, fail: StencilOpConstant, depthFail: StencilOpConstant, pass: StencilOpConstant);
        static disabled: Readonly<StencilMode>;
    }
    export default StencilMode;
}

declare module 'mapbox-gl/gl/color_mode' {
    import Color from 'mapbox-gl/style-spec/util/color';
    import { BlendFuncType, ColorMaskType } from 'mapbox-gl/gl/types';
    class ColorMode {
        blendFunction: BlendFuncType;
        blendColor: Color;
        mask: ColorMaskType;
        constructor(blendFunction: BlendFuncType, blendColor: Color, mask: ColorMaskType);
        static Replace: BlendFuncType;
        static disabled: Readonly<ColorMode>;
        static unblended: Readonly<ColorMode>;
        static alphaBlended: Readonly<ColorMode>;
    }
    export default ColorMode;
}

declare module 'mapbox-gl/render/texture' {
    import Context from 'mapbox-gl/gl/context';
    import { RGBAImage, AlphaImage } from 'mapbox-gl/util/image';
    export type TextureFormat = WebGLRenderingContext["RGBA"] | WebGLRenderingContext["ALPHA"];
    export type TextureFilter = WebGLRenderingContext["LINEAR"] | WebGLRenderingContext["LINEAR_MIPMAP_NEAREST"] | WebGLRenderingContext["NEAREST"];
    export type TextureWrap = WebGLRenderingContext["REPEAT"] | WebGLRenderingContext["CLAMP_TO_EDGE"] | WebGLRenderingContext["MIRRORED_REPEAT"];
    type EmptyImage = {
        width: number;
        height: number;
        data: null;
    };
    export type TextureImage = RGBAImage | AlphaImage | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageData | EmptyImage;
    class Texture {
        context: Context;
        size: [number, number];
        texture: WebGLTexture;
        format: TextureFormat;
        filter: TextureFilter | undefined | null;
        wrap: TextureWrap | undefined | null;
        useMipmap: boolean;
        constructor(context: Context, image: TextureImage, format: TextureFormat, options?: {
            premultiply?: boolean;
            useMipmap?: boolean;
        } | null);
        update(image: TextureImage, options?: {
            premultiply?: boolean;
            useMipmap?: boolean;
        } | null, position?: {
            x: number;
            y: number;
        }): void;
        bind(filter: TextureFilter, wrap: TextureWrap, minFilter?: TextureFilter | null): void;
        isSizePowerOfTwo(): boolean;
        destroy(): void;
    }
    export default Texture;
}

declare module 'mapbox-gl/source/tile' {
    import FeatureIndex from 'mapbox-gl/data/feature_index';
    import GeoJSONFeature from 'mapbox-gl/util/vectortile_to_geojson';
    import { CollisionBoxArray } from 'mapbox-gl/data/array_types';
    import Texture from 'mapbox-gl/render/texture';
    import SegmentVector from 'mapbox-gl/data/segment';
    import SourceFeatureState from 'mapbox-gl/source/source_state';
    import { Bucket } from 'mapbox-gl/data/bucket';
    import StyleLayer from 'mapbox-gl/style/style_layer';
    import { WorkerTileResult } from 'mapbox-gl/source/worker_source';
    import Actor from 'mapbox-gl/util/actor';
    import DEMData from 'mapbox-gl/data/dem_data';
    import { AlphaImage } from 'mapbox-gl/util/image';
    import ImageAtlas from 'mapbox-gl/render/image_atlas';
    import ImageManager from 'mapbox-gl/render/image_manager';
    import { Mask } from 'mapbox-gl/render/tile_mask';
    import Context from 'mapbox-gl/gl/context';
    import IndexBuffer from 'mapbox-gl/gl/index_buffer';
    import VertexBuffer from 'mapbox-gl/gl/vertex_buffer';
    import { OverscaledTileID } from 'mapbox-gl/source/tile_id';
    import Framebuffer from 'mapbox-gl/gl/framebuffer';
    import Transform from 'mapbox-gl/geo/transform';
    import { LayerFeatureStates } from 'mapbox-gl/source/source_state';
    import { Cancelable } from 'mapbox-gl/types/cancelable';
    import { FilterSpecification } from 'mapbox-gl/style-spec/types';
    export type TileState = "loading" | "loaded" | "reloading" | "unloaded" | "errored" | "expired";
    class Tile {
        tileID: OverscaledTileID;
        uid: number;
        uses: number;
        tileSize: number;
        buckets: {
            [x: string]: Bucket;
        };
        latestFeatureIndex: FeatureIndex | undefined | null;
        latestRawTileData: ArrayBuffer | undefined | null;
        imageAtlas: ImageAtlas | undefined | null;
        imageAtlasTexture: Texture;
        glyphAtlasImage: AlphaImage | undefined | null;
        glyphAtlasTexture: Texture;
        expirationTime: any;
        expiredRequestCount: number;
        state: TileState;
        timeAdded: any;
        fadeEndTime: any;
        collisionBoxArray: CollisionBoxArray | undefined | null;
        redoWhenDone: boolean;
        showCollisionBoxes: boolean;
        placementSource: any;
        actor: Actor | undefined | null;
        vtLayers: {
            [x: string]: typeof import("@mapbox/vector-tile").VectorTileLayer;
        };
        mask: Mask;
        neighboringTiles: object | undefined | null;
        dem: DEMData | undefined | null;
        aborted: boolean | undefined | null;
        maskedBoundsBuffer: VertexBuffer | undefined | null;
        maskedIndexBuffer: IndexBuffer | undefined | null;
        segments: SegmentVector | undefined | null;
        needsHillshadePrepare: boolean | undefined | null;
        request: Cancelable | undefined | null;
        texture: any;
        fbo: Framebuffer | undefined | null;
        demTexture: Texture | undefined | null;
        refreshedUponExpiration: boolean;
        reloadCallback: any;
        resourceTiming: Array<PerformanceResourceTiming> | undefined | null;
        queryPadding: number;
        symbolFadeHoldUntil: number | undefined | null;
        hasSymbolBuckets: boolean;
        constructor(tileID: OverscaledTileID, size: number);
        registerFadeDuration(duration: number): void;
        wasRequested(): boolean;
        loadVectorData(data: WorkerTileResult, painter: any, justReloaded?: boolean | null): void;
        unloadVectorData(): void;
        getBucket(layer: StyleLayer): Bucket;
        upload(context: Context): void;
        prepare(imageManager: ImageManager): void;
        queryRenderedFeatures(layers: {
            [x: string]: StyleLayer;
        }, sourceFeatureState: SourceFeatureState, queryGeometry: Array<typeof import("@mapbox/point-geometry").default>, cameraQueryGeometry: Array<typeof import("@mapbox/point-geometry").default>, scale: number, params: {
            filter: FilterSpecification;
            layers: Array<string>;
        }, transform: Transform, maxPitchScaleFactor: number, pixelPosMatrix: Float32Array): {
            [x: string]: Array<{
                featureIndex: number;
                feature: GeoJSONFeature;
            }>;
        };
        querySourceFeatures(result: Array<GeoJSONFeature>, params: any): void;
        clearMask(): void;
        setMask(mask: Mask, context: Context): void;
        hasData(): boolean;
        patternsLoaded(): boolean;
        setExpiryData(data: any): void;
        getExpiryTimeout(): number;
        setFeatureState(states: LayerFeatureStates, painter: any): void;
        holdingForFade(): boolean;
        symbolFadeFinished(): boolean;
        clearFadeHold(): void;
        setHoldDuration(duration: number): void;
    }
    export default Tile;
}

declare module 'mapbox-gl/source/tile_id' {
    import Point from '@mapbox/point-geometry';
    import MercatorCoordinate from 'mapbox-gl/geo/mercator_coordinate';
    export class CanonicalTileID {
        z: number;
        x: number;
        y: number;
        key: number;
        constructor(z: number, x: number, y: number);
        equals(id: CanonicalTileID): boolean;
        url(urls: Array<string>, scheme?: string | null): string;
        getTilePoint(coord: MercatorCoordinate): Point;
    }
    export class UnwrappedTileID {
        wrap: number;
        canonical: CanonicalTileID;
        key: number;
        constructor(wrap: number, canonical: CanonicalTileID);
    }
    export class OverscaledTileID {
        overscaledZ: number;
        wrap: number;
        canonical: CanonicalTileID;
        key: number;
        posMatrix: Float32Array;
        constructor(overscaledZ: number, wrap: number, z: number, x: number, y: number);
        equals(id: OverscaledTileID): boolean;
        scaledTo(targetZ: number): OverscaledTileID;
        isChildOf(parent: OverscaledTileID): boolean;
        children(sourceMaxZoom: number): OverscaledTileID[];
        isLessThan(rhs: OverscaledTileID): boolean;
        wrapped(): OverscaledTileID;
        unwrapTo(wrap: number): OverscaledTileID;
        overscaleFactor(): number;
        toUnwrapped(): UnwrappedTileID;
        toString(): string;
        getTilePoint(coord: MercatorCoordinate): Point;
    }
}

declare module 'mapbox-gl/style/properties' {
    import Color from 'mapbox-gl/style-spec/util/color';
    import EvaluationParameters from 'mapbox-gl/style/evaluation_parameters';
    import { StylePropertySpecification } from 'mapbox-gl/style-spec/style-spec';
    import { TransitionSpecification, PropertyValueSpecification } from 'mapbox-gl/style-spec/types';
    import { Feature, FeatureState, StylePropertyExpression, SourceExpression, CompositeExpression } from 'mapbox-gl/style-spec/expression';
    type $ObjMap<T extends {}, F extends (v: any) => any> = {
        [K in keyof T]: F extends (v: T[K]) => infer R ? R : never;
    };
    type TimePoint = number;
    export type CrossFaded<T> = {
        to: T;
        from: T;
    };
    export interface Property<T, R> {
        specification: StylePropertySpecification;
        possiblyEvaluate(value: PropertyValue<T, R>, parameters: EvaluationParameters, availableImages?: Array<string>): R;
        interpolate(a: R, b: R, t: number): R;
    }
    export class PropertyValue<T, R> {
        property: Property<T, R>;
        value: PropertyValueSpecification<T> | void;
        expression: StylePropertyExpression;
        constructor(property: Property<T, R>, value: PropertyValueSpecification<T> | void);
        isDataDriven(): boolean;
        possiblyEvaluate(parameters: EvaluationParameters, availableImages?: Array<string>): R;
    }
    export type TransitionParameters = {
        now: TimePoint;
        transition: TransitionSpecification;
    };
    class TransitionablePropertyValue<T, R> {
        property: Property<T, R>;
        value: PropertyValue<T, R>;
        transition: TransitionSpecification | void;
        constructor(property: Property<T, R>);
        transitioned(parameters: TransitionParameters, prior: TransitioningPropertyValue<T, R>): TransitioningPropertyValue<T, R>;
        untransitioned(): TransitioningPropertyValue<T, R>;
    }
    type TransitionablePropertyValues<Props extends object> = $ObjMap<Props, <T, R>(p: Property<T, R>) => TransitionablePropertyValue<T, R>>;
    export class Transitionable<Props extends object> {
        _properties: Properties<Props>;
        _values: TransitionablePropertyValues<Props>;
        constructor(properties: Properties<Props>);
        getValue<S extends string, T>(name: S): PropertyValueSpecification<T> | void;
        setValue<S extends string, T>(name: S, value: PropertyValueSpecification<T> | void): void;
        getTransition<S extends string>(name: S): TransitionSpecification | void;
        setTransition<S extends string>(name: S, value: TransitionSpecification | void): void;
        serialize(): any;
        transitioned(parameters: TransitionParameters, prior: Transitioning<Props>): Transitioning<Props>;
        untransitioned(): Transitioning<Props>;
    }
    class TransitioningPropertyValue<T, R> {
        property: Property<T, R>;
        value: PropertyValue<T, R>;
        prior: TransitioningPropertyValue<T, R> | undefined | null;
        begin: TimePoint;
        end: TimePoint;
        constructor(property: Property<T, R>, value: PropertyValue<T, R>, prior: TransitioningPropertyValue<T, R> | undefined | null, transition: TransitionSpecification, now: TimePoint);
        possiblyEvaluate(parameters: EvaluationParameters, availableImages: Array<string>): R;
    }
    type TransitioningPropertyValues<Props extends object> = $ObjMap<Props, <T, R>(p: Property<T, R>) => TransitioningPropertyValue<T, R>>;
    export class Transitioning<Props extends object> {
        _properties: Properties<Props>;
        _values: TransitioningPropertyValues<Props>;
        constructor(properties: Properties<Props>);
        possiblyEvaluate(parameters: EvaluationParameters, availableImages?: Array<string>): PossiblyEvaluated<Props>;
        hasTransition(): boolean;
    }
    type PropertyValues<Props extends object> = $ObjMap<Props, <T, R>(p: Property<T, R>) => PropertyValue<T, R>>;
    export class Layout<Props extends object> {
        _properties: Properties<Props>;
        _values: PropertyValues<Props>;
        constructor(properties: Properties<Props>);
        getValue<S extends string>(name: S): any;
        setValue<S extends string>(name: S, value: any): void;
        serialize(): any;
        possiblyEvaluate(parameters: EvaluationParameters, availableImages?: Array<string>): PossiblyEvaluated<Props>;
    }
    type PossiblyEvaluatedValue<T> = {
        kind: "constant";
        value: T;
    } | SourceExpression | CompositeExpression;
    export class PossiblyEvaluatedPropertyValue<T> {
        property: DataDrivenProperty<T>;
        value: PossiblyEvaluatedValue<T>;
        parameters: EvaluationParameters;
        constructor(property: DataDrivenProperty<T>, value: PossiblyEvaluatedValue<T>, parameters: EvaluationParameters);
        isConstant(): boolean;
        constantOr(value: T): T;
        evaluate(feature: Feature, featureState: FeatureState, availableImages?: Array<string>): T;
    }
    type PossiblyEvaluatedPropertyValues<Props extends object> = $ObjMap<Props, <T, R>(p: Property<T, R>) => R>;
    export class PossiblyEvaluated<Props extends object> {
        _properties: Properties<Props>;
        _values: PossiblyEvaluatedPropertyValues<Props>;
        constructor(properties: Properties<Props>);
        get<S extends string>(name: S): PossiblyEvaluatedPropertyValues<Props>[S];
    }
    export class DataConstantProperty<T> implements Property<T, T> {
        specification: StylePropertySpecification;
        constructor(specification: StylePropertySpecification);
        possiblyEvaluate(value: PropertyValue<T, T>, parameters: EvaluationParameters): T;
        interpolate(a: T, b: T, t: number): T;
    }
    export class DataDrivenProperty<T> implements Property<T, PossiblyEvaluatedPropertyValue<T>> {
        specification: StylePropertySpecification;
        overrides: object | undefined | null;
        constructor(specification: StylePropertySpecification, overrides?: object);
        possiblyEvaluate(value: PropertyValue<T, PossiblyEvaluatedPropertyValue<T>>, parameters: EvaluationParameters, availableImages?: Array<string>): PossiblyEvaluatedPropertyValue<T>;
        interpolate(a: PossiblyEvaluatedPropertyValue<T>, b: PossiblyEvaluatedPropertyValue<T>, t: number): PossiblyEvaluatedPropertyValue<T>;
        evaluate(value: PossiblyEvaluatedValue<T>, parameters: EvaluationParameters, feature: Feature, featureState: FeatureState, availableImages?: Array<string>): T;
    }
    export class CrossFadedDataDrivenProperty<T> extends DataDrivenProperty<CrossFaded<T> | undefined | null> {
        possiblyEvaluate(value: PropertyValue<CrossFaded<T> | undefined | null, PossiblyEvaluatedPropertyValue<CrossFaded<T> | undefined | null>>, parameters: EvaluationParameters, availableImages?: Array<string>): PossiblyEvaluatedPropertyValue<CrossFaded<T> | undefined | null>;
        evaluate(value: PossiblyEvaluatedValue<CrossFaded<T> | undefined | null>, globals: EvaluationParameters, feature: Feature, featureState: FeatureState, availableImages?: Array<string>): CrossFaded<T> | undefined | null;
        _calculate(min: T, mid: T, max: T, parameters: EvaluationParameters): CrossFaded<T>;
        interpolate(a: PossiblyEvaluatedPropertyValue<CrossFaded<T> | undefined | null>): PossiblyEvaluatedPropertyValue<CrossFaded<T> | undefined | null>;
    }
    export class CrossFadedProperty<T> implements Property<T, CrossFaded<T> | undefined | null> {
        specification: StylePropertySpecification;
        constructor(specification: StylePropertySpecification);
        possiblyEvaluate(value: PropertyValue<T, CrossFaded<T> | undefined | null>, parameters: EvaluationParameters, availableImages?: Array<string>): CrossFaded<T> | undefined | null;
        _calculate(min: T, mid: T, max: T, parameters: EvaluationParameters): CrossFaded<T> | undefined | null;
        interpolate(a?: CrossFaded<T> | null): CrossFaded<T> | undefined | null;
    }
    export class ColorRampProperty implements Property<Color, boolean> {
        specification: StylePropertySpecification;
        constructor(specification: StylePropertySpecification);
        possiblyEvaluate(value: PropertyValue<Color, boolean>, parameters: EvaluationParameters, availableImages?: Array<string>): boolean;
        interpolate(): boolean;
    }
    export class Properties<Props extends object> {
        properties: Props;
        defaultPropertyValues: PropertyValues<Props>;
        defaultTransitionablePropertyValues: TransitionablePropertyValues<Props>;
        defaultTransitioningPropertyValues: TransitioningPropertyValues<Props>;
        defaultPossiblyEvaluatedValues: PossiblyEvaluatedPropertyValues<Props>;
        overridableProperties: Array<string>;
        constructor(properties: Props);
    }
    export {};
}

declare module 'mapbox-gl/gl/vertex_buffer' {
    import { StructArray, StructArrayMember } from 'mapbox-gl/util/struct_array';
    import Program from 'mapbox-gl/render/program';
    import Context from 'mapbox-gl/gl/context';
    class VertexBuffer {
        length: number;
        attributes: ReadonlyArray<StructArrayMember>;
        itemSize: number;
        dynamicDraw: boolean | undefined | null;
        context: Context;
        buffer: WebGLBuffer;
        constructor(context: Context, array: StructArray, attributes: ReadonlyArray<StructArrayMember>, dynamicDraw?: boolean);
        bind(): void;
        updateData(array: StructArray): void;
        enableAttributes(gl: WebGLRenderingContext, program: Program<any>): void;
        setVertexAttribPointers(gl: WebGLRenderingContext, program: Program<any>, vertexOffset?: number | null): void;
        destroy(): void;
    }
    export default VertexBuffer;
}

declare module 'mapbox-gl/gl/index_buffer' {
    import { StructArray } from 'mapbox-gl/util/struct_array';
    import { TriangleIndexArray, LineIndexArray, LineStripIndexArray } from 'mapbox-gl/data/index_array_type';
    import Context from 'mapbox-gl/gl/context';
    class IndexBuffer {
        context: Context;
        buffer: WebGLBuffer;
        dynamicDraw: boolean;
        constructor(context: Context, array: TriangleIndexArray | LineIndexArray | LineStripIndexArray, dynamicDraw?: boolean);
        bind(): void;
        updateData(array: StructArray): void;
        destroy(): void;
    }
    export default IndexBuffer;
}

declare module 'mapbox-gl/gl/types' {
    type BlendFuncConstant = WebGLRenderingContext["ZERO"] | WebGLRenderingContext["ONE"] | WebGLRenderingContext["SRC_COLOR"] | WebGLRenderingContext["ONE_MINUS_SRC_COLOR"] | WebGLRenderingContext["DST_COLOR"] | WebGLRenderingContext["ONE_MINUS_DST_COLOR"] | WebGLRenderingContext["SRC_ALPHA"] | WebGLRenderingContext["ONE_MINUS_SRC_ALPHA"] | WebGLRenderingContext["DST_ALPHA"] | WebGLRenderingContext["ONE_MINUS_DST_ALPHA"] | WebGLRenderingContext["CONSTANT_COLOR"] | WebGLRenderingContext["ONE_MINUS_CONSTANT_COLOR"] | WebGLRenderingContext["CONSTANT_ALPHA"] | WebGLRenderingContext["ONE_MINUS_CONSTANT_ALPHA"] | WebGLRenderingContext["BLEND_COLOR"];
    export type BlendFuncType = [BlendFuncConstant, BlendFuncConstant];
    export type BlendEquationType = WebGLRenderingContext["FUNC_ADD"] | WebGLRenderingContext["FUNC_SUBTRACT"] | WebGLRenderingContext["FUNC_REVERSE_SUBTRACT"];
    export type ColorMaskType = [boolean, boolean, boolean, boolean];
    export type CompareFuncType = WebGLRenderingContext["NEVER"] | WebGLRenderingContext["LESS"] | WebGLRenderingContext["EQUAL"] | WebGLRenderingContext["LEQUAL"] | WebGLRenderingContext["GREATER"] | WebGLRenderingContext["NOTEQUAL"] | WebGLRenderingContext["GEQUAL"] | WebGLRenderingContext["ALWAYS"];
    export type DepthMaskType = boolean;
    export type DepthRangeType = [number, number];
    export type DepthFuncType = CompareFuncType;
    export type StencilFuncType = {
        func: CompareFuncType;
        ref: number;
        mask: number;
    };
    export type StencilOpConstant = WebGLRenderingContext["KEEP"] | WebGLRenderingContext["ZERO"] | WebGLRenderingContext["REPLACE"] | WebGLRenderingContext["INCR"] | WebGLRenderingContext["INCR_WRAP"] | WebGLRenderingContext["DECR"] | WebGLRenderingContext["DECR_WRAP"] | WebGLRenderingContext["INVERT"];
    export type StencilOpType = [StencilOpConstant, StencilOpConstant, StencilOpConstant];
    export type TextureUnitType = number;
    export type ViewportType = [number, number, number, number];
    export type StencilTest = {
        func: WebGLRenderingContext["NEVER"];
        mask: 0;
    } | {
        func: WebGLRenderingContext["LESS"];
        mask: number;
    } | {
        func: WebGLRenderingContext["EQUAL"];
        mask: number;
    } | {
        func: WebGLRenderingContext["LEQUAL"];
        mask: number;
    } | {
        func: WebGLRenderingContext["GREATER"];
        mask: number;
    } | {
        func: WebGLRenderingContext["NOTEQUAL"];
        mask: number;
    } | {
        func: WebGLRenderingContext["GEQUAL"];
        mask: number;
    } | {
        func: WebGLRenderingContext["ALWAYS"];
        mask: 0;
    };
    export type CullFaceModeType = WebGLRenderingContext["FRONT"] | WebGLRenderingContext["BACK"] | WebGLRenderingContext["FRONT_AND_BACK"];
    export type FrontFaceType = WebGLRenderingContext["CW"] | WebGLRenderingContext["CCW"];
    export {};
}

declare module 'mapbox-gl/style-spec/expression/types/resolved_image' {
    export type ResolvedImageOptions = {
        name: string;
        available: boolean;
    };
    export default class ResolvedImage {
        name: string;
        available: boolean;
        constructor(options: ResolvedImageOptions);
        toString(): string;
        static fromString(name: string): ResolvedImage;
        serialize(): Array<unknown>;
    }
}

declare module 'mapbox-gl/util/image' {
    export type Size = {
        width: number;
        height: number;
    };
    export class AlphaImage {
        width: number;
        height: number;
        data: Uint8Array;
        constructor(size: Size, data?: Uint8Array | Uint8ClampedArray);
        resize(size: Size): void;
        clone(): AlphaImage;
        static copy(srcImg: AlphaImage, dstImg: AlphaImage, srcPt: typeof import("@mapbox/point-geometry").default, dstPt: typeof import("@mapbox/point-geometry").default, size: Size): void;
    }
    export class RGBAImage {
        width: number;
        height: number;
        data: Uint8Array;
        constructor(size: Size, data?: Uint8Array | Uint8ClampedArray);
        resize(size: Size): void;
        replace(data: Uint8Array | Uint8ClampedArray, copy?: boolean): void;
        clone(): RGBAImage;
        static copy(srcImg: RGBAImage | ImageData, dstImg: RGBAImage, srcPt: typeof import("@mapbox/point-geometry").default, dstPt: typeof import("@mapbox/point-geometry").default, size: Size): void;
    }
}

declare module 'mapbox-gl/style-spec/expression' {
    import ParsingError from 'mapbox-gl/style-spec/expression/parsing_error';
    import EvaluationContext from 'mapbox-gl/style-spec/expression/evaluation_context';
    import { EvaluationKind } from 'mapbox-gl/style-spec/expression/types';
    import { Value } from 'mapbox-gl/style-spec/expression/values';
    import { Expression } from 'mapbox-gl/style-spec/expression/expression';
    import { StylePropertySpecification } from 'mapbox-gl/style-spec/style-spec';
    import { Result } from 'mapbox-gl/style-spec/util/result';
    import { InterpolationType } from 'mapbox-gl/style-spec/expression/definitions/interpolate';
    import { PropertyValueSpecification } from 'mapbox-gl/style-spec/types';
    import { FormattedSection } from 'mapbox-gl/style-spec/expression/types/formatted';
    export type Feature = {
        readonly type: 1 | 2 | 3 | "Unknown" | "Point" | "MultiPoint" | "LineString" | "MultiLineString" | "Polygon" | "MultiPolygon";
        readonly id?: any;
        readonly properties: {
            [x: string]: any;
        };
        readonly patterns?: {
            [x: string]: {
                "min": string;
                "mid": string;
                "max": string;
            };
        };
    };
    export type FeatureState = {
        [x: string]: any;
    };
    export type GlobalProperties = Readonly<{
        zoom: number;
        heatmapDensity?: number;
        lineProgress?: number;
        isSupportedScript?: (a: string) => boolean;
        accumulated?: Value;
    }>;
    export class StyleExpression {
        expression: Expression;
        _evaluator: EvaluationContext;
        _defaultValue: Value;
        _warningHistory: {
            [key: string]: boolean;
        };
        _enumValues: {
            [x: string]: any;
        } | undefined | null;
        constructor(expression: Expression, propertySpec?: StylePropertySpecification | null);
        evaluateWithoutErrorHandling(globals: GlobalProperties, feature?: Feature, featureState?: FeatureState, availableImages?: Array<string>, formattedSection?: FormattedSection): any;
        evaluate(globals: GlobalProperties, feature?: Feature, featureState?: FeatureState, availableImages?: Array<string>, formattedSection?: FormattedSection): any;
    }
    export function isExpression(expression: unknown): boolean;
    export function createExpression(expression: unknown, propertySpec?: StylePropertySpecification | null): Result<StyleExpression, Array<ParsingError>>;
    export class ZoomConstantExpression<Kind extends EvaluationKind> {
        kind: Kind;
        isStateDependent: boolean;
        _styleExpression: StyleExpression;
        constructor(kind: Kind, expression: StyleExpression);
        evaluateWithoutErrorHandling(globals: GlobalProperties, feature?: Feature, featureState?: FeatureState, availableImages?: Array<string>, formattedSection?: FormattedSection): any;
        evaluate(globals: GlobalProperties, feature?: Feature, featureState?: FeatureState, availableImages?: Array<string>, formattedSection?: FormattedSection): any;
    }
    export class ZoomDependentExpression<Kind extends EvaluationKind> {
        kind: Kind;
        zoomStops: Array<number>;
        isStateDependent: boolean;
        _styleExpression: StyleExpression;
        interpolationType: InterpolationType | undefined | null;
        constructor(kind: Kind, expression: StyleExpression, zoomStops: Array<number>, interpolationType?: InterpolationType);
        evaluateWithoutErrorHandling(globals: GlobalProperties, feature?: Feature, featureState?: FeatureState, availableImages?: Array<string>, formattedSection?: FormattedSection): any;
        evaluate(globals: GlobalProperties, feature?: Feature, featureState?: FeatureState, availableImages?: Array<string>, formattedSection?: FormattedSection): any;
        interpolationFactor(input: number, lower: number, upper: number): number;
    }
    export type ConstantExpression = {
        kind: "constant";
        readonly evaluate: (globals: GlobalProperties, feature?: Feature, featureState?: FeatureState, availableImages?: Array<string>) => any;
    };
    export type SourceExpression = {
        kind: "source";
        isStateDependent: boolean;
        readonly evaluate: (globals: GlobalProperties, feature?: Feature, featureState?: FeatureState, availableImages?: Array<string>, formattedSection?: FormattedSection) => any;
    };
    export type CameraExpression = {
        kind: "camera";
        readonly evaluate: (globals: GlobalProperties, feature?: Feature, featureState?: FeatureState, availableImages?: Array<string>) => any;
        readonly interpolationFactor: (input: number, lower: number, upper: number) => number;
        zoomStops: Array<number>;
        interpolationType: InterpolationType | undefined | null;
    };
    export type CompositeExpression = {
        kind: "composite";
        isStateDependent: boolean;
        readonly evaluate: (globals: GlobalProperties, feature?: Feature, featureState?: FeatureState, availableImages?: Array<string>, formattedSection?: FormattedSection) => any;
        readonly interpolationFactor: (input: number, lower: number, upper: number) => number;
        zoomStops: Array<number>;
        interpolationType: InterpolationType | undefined | null;
    };
    export type StylePropertyExpression = ConstantExpression | SourceExpression | CameraExpression | CompositeExpression;
    export function createPropertyExpression(expression: unknown, propertySpec: StylePropertySpecification): Result<StylePropertyExpression, Array<ParsingError>>;
    export class StylePropertyFunction<T> {
        _parameters: PropertyValueSpecification<any>;
        _specification: StylePropertySpecification;
        kind: EvaluationKind;
        evaluate: (globals: GlobalProperties, feature?: Feature) => any;
        interpolationFactor: ((input: number, lower: number, upper: number) => number) | undefined | null;
        zoomStops: Array<number> | undefined | null;
        constructor(parameters: PropertyValueSpecification<any>, specification: StylePropertySpecification);
        static deserialize(serialized: {
            _parameters: PropertyValueSpecification<any>;
            _specification: StylePropertySpecification;
        }): StylePropertyFunction<any>;
        static serialize(input: StylePropertyFunction<any>): {
            _parameters: any;
            _specification: StylePropertySpecification;
        };
    }
    export function normalizePropertyExpression<T>(value: PropertyValueSpecification<T>, specification: StylePropertySpecification): StylePropertyExpression;
}

declare module 'mapbox-gl/data/bucket' {
    import { CollisionBoxArray } from 'mapbox-gl/data/array_types';
    import Style from 'mapbox-gl/style/style';
    import { TypedStyleLayer } from 'mapbox-gl/style/style_layer/typed_style_layer';
    import FeatureIndex from 'mapbox-gl/data/feature_index';
    import Context from 'mapbox-gl/gl/context';
    import { FeatureStates } from 'mapbox-gl/source/source_state';
    import { ImagePosition } from 'mapbox-gl/render/image_atlas';
    export type BucketParameters<Layer extends TypedStyleLayer> = {
        index: number;
        layers: Array<Layer>;
        zoom: number;
        pixelRatio: number;
        overscaling: number;
        collisionBoxArray: CollisionBoxArray;
        sourceLayerIndex: number;
        sourceID: string;
    };
    export type PopulateParameters = {
        featureIndex: FeatureIndex;
        iconDependencies: {};
        patternDependencies: {};
        glyphDependencies: {};
        availableImages: Array<string>;
    };
    export type IndexedFeature = {
        feature: typeof import("@mapbox/vector-tile").VectorTileFeature;
        index: number;
        sourceLayerIndex: number;
    };
    export type BucketFeature = {
        index: number;
        sourceLayerIndex: number;
        geometry: Array<Array<typeof import("@mapbox/point-geometry").default>>;
        properties: object;
        type: 1 | 2 | 3;
        id?: any;
        readonly patterns: {
            [x: string]: {
                "min": string;
                "mid": string;
                "max": string;
            };
        };
        sortKey?: number;
    };
    export interface Bucket {
        layerIds: Array<string>;
        hasPattern: boolean;
        readonly layers: Array<any>;
        readonly stateDependentLayers: Array<any>;
        readonly stateDependentLayerIds: Array<string>;
        populate(features: Array<IndexedFeature>, options: PopulateParameters): void;
        update(states: FeatureStates, vtLayer: typeof import("@mapbox/vector-tile").VectorTileLayer, imagePositions: {
            [x: string]: ImagePosition;
        }): void;
        isEmpty(): boolean;
        upload(context: Context): void;
        uploadPending(): boolean;
        destroy(): void;
    }
    export function deserialize(input: Array<Bucket>, style: Style): {
        [x: string]: Bucket;
    };
}

declare module 'mapbox-gl/style-spec/feature_filter' {
    import { GlobalProperties } from 'mapbox-gl/style-spec/expression';
    export type FeatureFilter = (globalProperties: GlobalProperties, feature: typeof import("@mapbox/vector-tile").VectorTileFeature) => boolean;
    export default createFilter;
    export { isExpressionFilter };
    function isExpressionFilter(filter: any): boolean;
    function createFilter(filter: any): FeatureFilter;
}

declare module 'mapbox-gl/render/image_atlas' {
    import { RGBAImage } from 'mapbox-gl/util/image';
    import { StyleImage } from 'mapbox-gl/style/style_image';
    import ImageManager from 'mapbox-gl/render/image_manager';
    import Texture from 'mapbox-gl/render/texture';
    type Rect = {
        x: number;
        y: number;
        w: number;
        h: number;
    };
    export class ImagePosition {
        paddedRect: Rect;
        pixelRatio: number;
        version: number;
        constructor(paddedRect: Rect, { pixelRatio, version }: StyleImage);
        get tl(): [number, number];
        get br(): [number, number];
        get tlbr(): Array<number>;
        get displaySize(): [number, number];
    }
    export default class ImageAtlas {
        image: RGBAImage;
        iconPositions: {
            [x: string]: ImagePosition;
        };
        patternPositions: {
            [x: string]: ImagePosition;
        };
        haveRenderCallbacks: Array<string>;
        uploaded: boolean | undefined | null;
        constructor(icons: {
            [x: string]: StyleImage;
        }, patterns: {
            [x: string]: StyleImage;
        });
        addImages(images: {
            [x: string]: StyleImage;
        }, positions: {
            [x: string]: ImagePosition;
        }, bins: Array<Rect>): void;
        patchUpdatedImages(imageManager: ImageManager, texture: Texture): void;
        patchUpdatedImage(position: ImagePosition | undefined | null, image: StyleImage | undefined | null, texture: Texture): void;
    }
    export {};
}

declare module 'mapbox-gl/style/load_glyph_range' {
    import { StyleGlyph } from 'mapbox-gl/style/style_glyph';
    import { RequestManager } from 'mapbox-gl/util/mapbox';
    import { Callback } from 'mapbox-gl/types/callback';
    export default function (fontstack: string, range: number, urlTemplate: string, requestManager: RequestManager, callback: Callback<{
        [x: number]: StyleGlyph | null;
    }>): void;
}

declare module 'mapbox-gl/style-spec/util/color' {
    class Color {
        r: number;
        g: number;
        b: number;
        a: number;
        constructor(r: number, g: number, b: number, a?: number);
        static black: Color;
        static white: Color;
        static transparent: Color;
        static red: Color;
        static parse(input?: string | null): Color | void;
        toString(): string;
        toArray(): [number, number, number, number];
    }
    export default Color;
}

declare module 'mapbox-gl/style-spec/style-spec' {
    type ExpressionType = "data-driven" | "cross-faded" | "cross-faded-data-driven" | "color-ramp" | "data-constant" | "constant";
    type ExpressionParameters = Array<"zoom" | "feature" | "feature-state" | "heatmap-density" | "line-progress">;
    type ExpressionSpecification = {
        interpolated: boolean;
        parameters: ExpressionParameters;
    };
    export type StylePropertySpecification = {
        type: "number";
        'property-type': ExpressionType;
        expression?: ExpressionSpecification;
        transition: boolean;
        default?: number;
    } | {
        type: "string";
        'property-type': ExpressionType;
        expression?: ExpressionSpecification;
        transition: boolean;
        default?: string;
        tokens?: boolean;
    } | {
        type: "boolean";
        'property-type': ExpressionType;
        expression?: ExpressionSpecification;
        transition: boolean;
        default?: boolean;
    } | {
        type: "enum";
        'property-type': ExpressionType;
        expression?: ExpressionSpecification;
        values: {
            [x: string]: {};
        };
        transition: boolean;
        default?: string;
    } | {
        type: "color";
        'property-type': ExpressionType;
        expression?: ExpressionSpecification;
        transition: boolean;
        default?: string;
        overridable: boolean;
    } | {
        type: "array";
        value: "number";
        'property-type': ExpressionType;
        expression?: ExpressionSpecification;
        length?: number;
        transition: boolean;
        default?: Array<number>;
    } | {
        type: "array";
        value: "string";
        'property-type': ExpressionType;
        expression?: ExpressionSpecification;
        length?: number;
        transition: boolean;
        default?: Array<string>;
    };
    import v8 from 'mapbox-gl/style-spec/reference/v8.json';
    import latest from 'mapbox-gl/style-spec/reference/latest';
    import format from 'mapbox-gl/style-spec/format';
    import migrate from 'mapbox-gl/style-spec/migrate';
    import composite from 'mapbox-gl/style-spec/composite';
    import diff from 'mapbox-gl/style-spec/diff';
    import ValidationError from 'mapbox-gl/style-spec/error/validation_error';
    import ParsingError from 'mapbox-gl/style-spec/error/parsing_error';
    import { StyleExpression, isExpression, createExpression, createPropertyExpression, normalizePropertyExpression, ZoomConstantExpression, ZoomDependentExpression, StylePropertyFunction } from 'mapbox-gl/style-spec/expression';
    import featureFilter from 'mapbox-gl/style-spec/feature_filter';
    import convertFilter from 'mapbox-gl/style-spec/feature_filter/convert';
    import Color from 'mapbox-gl/style-spec/util/color';
    import { createFunction, isFunction } from 'mapbox-gl/style-spec/function';
    import convertFunction from 'mapbox-gl/style-spec/function/convert';
    import { eachSource, eachLayer, eachProperty } from 'mapbox-gl/style-spec/visit';
    import validate from 'mapbox-gl/style-spec/validate_style';
    import validateMapboxApiSupported from 'mapbox-gl/style-spec/validate_mapbox_api_supported';
    const expression: {
        StyleExpression: typeof StyleExpression;
        isExpression: typeof isExpression;
        createExpression: typeof createExpression;
        createPropertyExpression: typeof createPropertyExpression;
        normalizePropertyExpression: typeof normalizePropertyExpression;
        ZoomConstantExpression: typeof ZoomConstantExpression;
        ZoomDependentExpression: typeof ZoomDependentExpression;
        StylePropertyFunction: typeof StylePropertyFunction;
    };
    const styleFunction: {
        convertFunction: typeof convertFunction;
        createFunction: typeof createFunction;
        isFunction: typeof isFunction;
    };
    const visit: {
        eachSource: typeof eachSource;
        eachLayer: typeof eachLayer;
        eachProperty: typeof eachProperty;
    };
    export { v8, latest, format, migrate, composite, diff, ValidationError, ParsingError, expression, featureFilter, convertFilter, Color, styleFunction as function, validate, validateMapboxApiSupported, visit };
}

declare module 'mapbox-gl/util/actor' {
    import ThrottledInvoker from 'mapbox-gl/util/throttled_invoker';
    import { Cancelable } from 'mapbox-gl/types/cancelable';
    class Actor {
        target: any;
        parent: any;
        mapId: number | undefined | null;
        callbacks: {
            number: any;
        };
        name: string;
        tasks: {
            number: any;
        };
        taskQueue: Array<number>;
        cancelCallbacks: {
            number: Cancelable;
        };
        invoker: ThrottledInvoker;
        constructor(target: any, parent: any, mapId?: number | null);
        send(type: string, data: unknown, callback?: Function | null, targetMapId?: string | null): Cancelable | undefined | null;
        receive(message: object): void;
        process(): void;
        remove(): void;
    }
    export default Actor;
}

declare module 'mapbox-gl/util/worker_pool' {
    import { WorkerInterface } from 'mapbox-gl/util/web_worker';
    export default class WorkerPool {
        static workerCount: number;
        active: {
            [x: number]: boolean;
        };
        workers: Array<WorkerInterface>;
        constructor();
        acquire(mapId: number): Array<WorkerInterface>;
        release(mapId: number): void;
    }
}

declare module 'mapbox-gl/source/vector_tile_source' {
    import { Evented } from 'mapbox-gl/util/evented';
    import TileBounds from 'mapbox-gl/source/tile_bounds';
    import { Source } from 'mapbox-gl/source/source';
    import { OverscaledTileID } from 'mapbox-gl/source/tile_id';
    import Map from 'mapbox-gl/ui/map';
    import Dispatcher from 'mapbox-gl/util/dispatcher';
    import Tile from 'mapbox-gl/source/tile';
    import { Callback } from 'mapbox-gl/types/callback';
    import { Cancelable } from 'mapbox-gl/types/cancelable';
    import { VectorSourceSpecification } from 'mapbox-gl/style-spec/types';
    class VectorTileSource extends Evented implements Source {
        type: "vector";
        id: string;
        minzoom: number;
        maxzoom: number;
        url: string;
        scheme: string;
        tileSize: number;
        _options: VectorSourceSpecification;
        _collectResourceTiming: boolean;
        dispatcher: Dispatcher;
        map: Map;
        bounds: [number, number, number, number] | undefined | null;
        tiles: Array<string>;
        tileBounds: TileBounds;
        reparseOverscaled: boolean;
        isTileClipped: boolean;
        _tileJSONRequest: Cancelable | undefined | null;
        _loaded: boolean;
        constructor(id: string, options: VectorSourceSpecification & {
            collectResourceTiming: boolean;
        }, dispatcher: Dispatcher, eventedParent: Evented);
        load(): void;
        loaded(): boolean;
        hasTile(tileID: OverscaledTileID): boolean;
        onAdd(map: Map): void;
        onRemove(): void;
        serialize(): object;
        loadTile(tile: Tile, callback: Callback<void>): void;
        abortTile(tile: Tile): void;
        unloadTile(tile: Tile): void;
        hasTransition(): boolean;
    }
    export default VectorTileSource;
}

declare module 'mapbox-gl/source/raster_tile_source' {
    import { Evented } from 'mapbox-gl/util/evented';
    import TileBounds from 'mapbox-gl/source/tile_bounds';
    import { Source } from 'mapbox-gl/source/source';
    import { OverscaledTileID } from 'mapbox-gl/source/tile_id';
    import Map from 'mapbox-gl/ui/map';
    import Dispatcher from 'mapbox-gl/util/dispatcher';
    import Tile from 'mapbox-gl/source/tile';
    import { Callback } from 'mapbox-gl/types/callback';
    import { Cancelable } from 'mapbox-gl/types/cancelable';
    import { RasterSourceSpecification, RasterDEMSourceSpecification } from 'mapbox-gl/style-spec/types';
    class RasterTileSource extends Evented implements Source {
        type: "raster" | "raster-dem";
        id: string;
        minzoom: number;
        maxzoom: number;
        url: string;
        scheme: string;
        tileSize: number;
        bounds: [number, number, number, number] | undefined | null;
        tileBounds: TileBounds;
        roundZoom: boolean;
        dispatcher: Dispatcher;
        map: Map;
        tiles: Array<string>;
        _loaded: boolean;
        _options: RasterSourceSpecification | RasterDEMSourceSpecification;
        _tileJSONRequest: Cancelable | undefined | null;
        constructor(id: string, options: RasterSourceSpecification | RasterDEMSourceSpecification, dispatcher: Dispatcher, eventedParent: Evented);
        load(): void;
        loaded(): boolean;
        onAdd(map: Map): void;
        onRemove(): void;
        serialize(): object;
        hasTile(tileID: OverscaledTileID): boolean;
        loadTile(tile: Tile, callback: Callback<void>): void;
        abortTile(tile: Tile, callback: Callback<void>): void;
        unloadTile(tile: Tile, callback: Callback<void>): void;
        hasTransition(): boolean;
    }
    export default RasterTileSource;
}

declare module 'mapbox-gl/source/geojson_source' {
    import { Evented } from 'mapbox-gl/util/evented';
    import { Source } from 'mapbox-gl/source/source';
    import Map from 'mapbox-gl/ui/map';
    import Dispatcher from 'mapbox-gl/util/dispatcher';
    import Tile from 'mapbox-gl/source/tile';
    import Actor from 'mapbox-gl/util/actor';
    import { Callback } from 'mapbox-gl/types/callback';
    import { GeoJSON, GeoJSONFeature } from '@mapbox/geojson-types';
    import { GeoJSONSourceSpecification } from 'mapbox-gl/style-spec/types';
    class GeoJSONSource extends Evented implements Source {
        type: "geojson";
        id: string;
        minzoom: number;
        maxzoom: number;
        tileSize: number;
        attribution: string;
        isTileClipped: boolean;
        reparseOverscaled: boolean;
        _data: GeoJSON | string;
        _options: any;
        workerOptions: any;
        map: Map;
        actor: Actor;
        _loaded: boolean;
        _collectResourceTiming: boolean;
        _resourceTiming: Array<PerformanceResourceTiming>;
        _removed: boolean;
        constructor(id: string, options: GeoJSONSourceSpecification & {
            workerOptions?: any;
            collectResourceTiming: boolean;
        }, dispatcher: Dispatcher, eventedParent: Evented);
        load(): void;
        onAdd(map: Map): void;
        setData(data: GeoJSON | string): this;
        getClusterExpansionZoom(clusterId: number, callback: Callback<number>): this;
        getClusterChildren(clusterId: number, callback: Callback<Array<GeoJSONFeature>>): this;
        getClusterLeaves(clusterId: number, limit: number, offset: number, callback: Callback<Array<GeoJSONFeature>>): this;
        _updateWorkerData(callback: Callback<void>): void;
        loaded(): boolean;
        loadTile(tile: Tile, callback: Callback<void>): void;
        abortTile(tile: Tile): void;
        unloadTile(tile: Tile): void;
        onRemove(): void;
        serialize(): object;
        hasTransition(): boolean;
    }
    export default GeoJSONSource;
}

declare module 'mapbox-gl/source/image_source' {
    import { CanonicalTileID } from 'mapbox-gl/source/tile_id';
    import { Evented } from 'mapbox-gl/util/evented';
    import { RasterBoundsArray } from 'mapbox-gl/data/array_types';
    import SegmentVector from 'mapbox-gl/data/segment';
    import Texture from 'mapbox-gl/render/texture';
    import MercatorCoordinate from 'mapbox-gl/geo/mercator_coordinate';
    import { Source } from 'mapbox-gl/source/source';
    import { CanvasSourceSpecification } from 'mapbox-gl/source/canvas_source';
    import Map from 'mapbox-gl/ui/map';
    import Dispatcher from 'mapbox-gl/util/dispatcher';
    import Tile from 'mapbox-gl/source/tile';
    import { Callback } from 'mapbox-gl/types/callback';
    import VertexBuffer from 'mapbox-gl/gl/vertex_buffer';
    import { ImageSourceSpecification, VideoSourceSpecification } from 'mapbox-gl/style-spec/types';
    type Coordinates = [[number, number], [number, number], [number, number], [number, number]];
    class ImageSource extends Evented implements Source {
        type: string;
        id: string;
        minzoom: number;
        maxzoom: number;
        tileSize: number;
        url: string;
        coordinates: Coordinates;
        tiles: {
            [x: string]: Tile;
        };
        options: any;
        dispatcher: Dispatcher;
        map: Map;
        texture: Texture | null;
        image: HTMLImageElement;
        tileID: CanonicalTileID;
        _boundsArray: RasterBoundsArray;
        boundsBuffer: VertexBuffer;
        boundsSegments: SegmentVector;
        _loaded: boolean;
        constructor(id: string, options: ImageSourceSpecification | VideoSourceSpecification | CanvasSourceSpecification, dispatcher: Dispatcher, eventedParent: Evented);
        load(newCoordinates?: Coordinates, successCallback?: () => void): void;
        loaded(): boolean;
        updateImage(options: {
            url: string;
            coordinates?: Coordinates;
        }): this;
        _finishLoading(): void;
        onAdd(map: Map): void;
        setCoordinates(coordinates: Coordinates): this;
        prepare(): void;
        loadTile(tile: Tile, callback: Callback<void>): void;
        serialize(): object;
        hasTransition(): boolean;
    }
    export function getCoordinatesCenterTileID(coords: Array<MercatorCoordinate>): CanonicalTileID;
    export default ImageSource;
}

declare module 'mapbox-gl/source/tile_cache' {
    import { OverscaledTileID } from 'mapbox-gl/source/tile_id';
    import Tile from 'mapbox-gl/source/tile';
    class TileCache {
        max: number;
        data: {
            [key: number | string]: Array<{
                value: Tile;
                timeout: number | undefined | null;
            }>;
        };
        order: Array<number>;
        onRemove: (element: Tile) => void;
        constructor(max: number, onRemove: (element: Tile) => void);
        reset(): this;
        add(tileID: OverscaledTileID, data: Tile, expiryTimeout: number | void): this;
        has(tileID: OverscaledTileID): boolean;
        getAndRemove(tileID: OverscaledTileID): Tile | undefined | null;
        _getAndRemoveByKey(key: number): Tile | undefined | null;
        get(tileID: OverscaledTileID): Tile | undefined | null;
        remove(tileID: OverscaledTileID, value?: {
            value: Tile;
            timeout: number | undefined | null;
        } | null): this;
        setMaxSize(max: number): TileCache;
    }
    export default TileCache;
}

declare module 'mapbox-gl/source/source_state' {
    import Tile from 'mapbox-gl/source/tile';
    import { FeatureState } from 'mapbox-gl/style-spec/expression';
    export type FeatureStates = {
        [feature_id: string]: FeatureState;
    };
    export type LayerFeatureStates = {
        [layer: string]: FeatureStates;
    };
    class SourceFeatureState {
        state: LayerFeatureStates;
        stateChanges: LayerFeatureStates;
        deletedStates: {};
        constructor();
        updateState(sourceLayer: string, featureId: number, newState: object): void;
        removeFeatureState(sourceLayer: string, featureId?: number, key?: string): void;
        getState(sourceLayer: string, featureId: number): object;
        initializeTileState(tile: Tile, painter: any): void;
        coalesceChanges(tiles: {
            [x: any]: Tile;
        }, painter: any): void;
    }
    export default SourceFeatureState;
}

declare module 'mapbox-gl/data/array_types' {
    import { Struct, StructArray } from 'mapbox-gl/util/struct_array';
    import Point from '@mapbox/point-geometry';
    class StructArrayLayout2i4 extends StructArray {
        uint8: Uint8Array;
        int16: Int16Array;
        _refreshViews(): void;
        emplaceBack(v0: number, v1: number): number;
        emplace(i: number, v0: number, v1: number): number;
    }
    class StructArrayLayout4i8 extends StructArray {
        uint8: Uint8Array;
        int16: Int16Array;
        _refreshViews(): void;
        emplaceBack(v0: number, v1: number, v2: number, v3: number): number;
        emplace(i: number, v0: number, v1: number, v2: number, v3: number): number;
    }
    class StructArrayLayout2i4i12 extends StructArray {
        uint8: Uint8Array;
        int16: Int16Array;
        _refreshViews(): void;
        emplaceBack(v0: number, v1: number, v2: number, v3: number, v4: number, v5: number): number;
        emplace(i: number, v0: number, v1: number, v2: number, v3: number, v4: number, v5: number): number;
    }
    class StructArrayLayout2i4ub8 extends StructArray {
        uint8: Uint8Array;
        int16: Int16Array;
        _refreshViews(): void;
        emplaceBack(v0: number, v1: number, v2: number, v3: number, v4: number, v5: number): number;
        emplace(i: number, v0: number, v1: number, v2: number, v3: number, v4: number, v5: number): number;
    }
    class StructArrayLayout8ui16 extends StructArray {
        uint8: Uint8Array;
        uint16: Uint16Array;
        _refreshViews(): void;
        emplaceBack(v0: number, v1: number, v2: number, v3: number, v4: number, v5: number, v6: number, v7: number): number;
        emplace(i: number, v0: number, v1: number, v2: number, v3: number, v4: number, v5: number, v6: number, v7: number): number;
    }
    class StructArrayLayout4i4ui16 extends StructArray {
        uint8: Uint8Array;
        int16: Int16Array;
        uint16: Uint16Array;
        _refreshViews(): void;
        emplaceBack(v0: number, v1: number, v2: number, v3: number, v4: number, v5: number, v6: number, v7: number): number;
        emplace(i: number, v0: number, v1: number, v2: number, v3: number, v4: number, v5: number, v6: number, v7: number): number;
    }
    class StructArrayLayout3f12 extends StructArray {
        uint8: Uint8Array;
        float32: Float32Array;
        _refreshViews(): void;
        emplaceBack(v0: number, v1: number, v2: number): number;
        emplace(i: number, v0: number, v1: number, v2: number): number;
    }
    class StructArrayLayout1ul4 extends StructArray {
        uint8: Uint8Array;
        uint32: Uint32Array;
        _refreshViews(): void;
        emplaceBack(v0: number): number;
        emplace(i: number, v0: number): number;
    }
    class StructArrayLayout6i1ul2ui2i24 extends StructArray {
        uint8: Uint8Array;
        int16: Int16Array;
        uint32: Uint32Array;
        uint16: Uint16Array;
        _refreshViews(): void;
        emplaceBack(v0: number, v1: number, v2: number, v3: number, v4: number, v5: number, v6: number, v7: number, v8: number, v9: number, v10: number): number;
        emplace(i: number, v0: number, v1: number, v2: number, v3: number, v4: number, v5: number, v6: number, v7: number, v8: number, v9: number, v10: number): number;
    }
    class StructArrayLayout2i2i2i12 extends StructArray {
        uint8: Uint8Array;
        int16: Int16Array;
        _refreshViews(): void;
        emplaceBack(v0: number, v1: number, v2: number, v3: number, v4: number, v5: number): number;
        emplace(i: number, v0: number, v1: number, v2: number, v3: number, v4: number, v5: number): number;
    }
    class StructArrayLayout2ub2f12 extends StructArray {
        uint8: Uint8Array;
        float32: Float32Array;
        _refreshViews(): void;
        emplaceBack(v0: number, v1: number, v2: number, v3: number): number;
        emplace(i: number, v0: number, v1: number, v2: number, v3: number): number;
    }
    class StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48 extends StructArray {
        uint8: Uint8Array;
        int16: Int16Array;
        uint16: Uint16Array;
        uint32: Uint32Array;
        float32: Float32Array;
        _refreshViews(): void;
        emplaceBack(v0: number, v1: number, v2: number, v3: number, v4: number, v5: number, v6: number, v7: number, v8: number, v9: number, v10: number, v11: number, v12: number, v13: number, v14: number, v15: number, v16: number): number;
        emplace(i: number, v0: number, v1: number, v2: number, v3: number, v4: number, v5: number, v6: number, v7: number, v8: number, v9: number, v10: number, v11: number, v12: number, v13: number, v14: number, v15: number, v16: number): number;
    }
    class StructArrayLayout8i14ui1ul3f60 extends StructArray {
        uint8: Uint8Array;
        int16: Int16Array;
        uint16: Uint16Array;
        uint32: Uint32Array;
        float32: Float32Array;
        _refreshViews(): void;
        emplaceBack(v0: number, v1: number, v2: number, v3: number, v4: number, v5: number, v6: number, v7: number, v8: number, v9: number, v10: number, v11: number, v12: number, v13: number, v14: number, v15: number, v16: number, v17: number, v18: number, v19: number, v20: number, v21: number, v22: number, v23: number, v24: number, v25: number): number;
        emplace(i: number, v0: number, v1: number, v2: number, v3: number, v4: number, v5: number, v6: number, v7: number, v8: number, v9: number, v10: number, v11: number, v12: number, v13: number, v14: number, v15: number, v16: number, v17: number, v18: number, v19: number, v20: number, v21: number, v22: number, v23: number, v24: number, v25: number): number;
    }
    class StructArrayLayout1f4 extends StructArray {
        uint8: Uint8Array;
        float32: Float32Array;
        _refreshViews(): void;
        emplaceBack(v0: number): number;
        emplace(i: number, v0: number): number;
    }
    class StructArrayLayout3i6 extends StructArray {
        uint8: Uint8Array;
        int16: Int16Array;
        _refreshViews(): void;
        emplaceBack(v0: number, v1: number, v2: number): number;
        emplace(i: number, v0: number, v1: number, v2: number): number;
    }
    class StructArrayLayout1ul2ui8 extends StructArray {
        uint8: Uint8Array;
        uint32: Uint32Array;
        uint16: Uint16Array;
        _refreshViews(): void;
        emplaceBack(v0: number, v1: number, v2: number): number;
        emplace(i: number, v0: number, v1: number, v2: number): number;
    }
    class StructArrayLayout3ui6 extends StructArray {
        uint8: Uint8Array;
        uint16: Uint16Array;
        _refreshViews(): void;
        emplaceBack(v0: number, v1: number, v2: number): number;
        emplace(i: number, v0: number, v1: number, v2: number): number;
    }
    class StructArrayLayout2ui4 extends StructArray {
        uint8: Uint8Array;
        uint16: Uint16Array;
        _refreshViews(): void;
        emplaceBack(v0: number, v1: number): number;
        emplace(i: number, v0: number, v1: number): number;
    }
    class StructArrayLayout1ui2 extends StructArray {
        uint8: Uint8Array;
        uint16: Uint16Array;
        _refreshViews(): void;
        emplaceBack(v0: number): number;
        emplace(i: number, v0: number): number;
    }
    class StructArrayLayout2f8 extends StructArray {
        uint8: Uint8Array;
        float32: Float32Array;
        _refreshViews(): void;
        emplaceBack(v0: number, v1: number): number;
        emplace(i: number, v0: number, v1: number): number;
    }
    class StructArrayLayout4f16 extends StructArray {
        uint8: Uint8Array;
        float32: Float32Array;
        _refreshViews(): void;
        emplaceBack(v0: number, v1: number, v2: number, v3: number): number;
        emplace(i: number, v0: number, v1: number, v2: number, v3: number): number;
    }
    class CollisionBoxStruct extends Struct {
        _structArray: CollisionBoxArray;
        anchorPointX: number;
        anchorPointY: number;
        x1: number;
        y1: number;
        x2: number;
        y2: number;
        featureIndex: number;
        sourceLayerIndex: number;
        bucketIndex: number;
        radius: number;
        signedDistanceFromAnchor: number;
        anchorPoint: typeof import("@mapbox/point-geometry").default;
        get anchorPointX(): number;
        set anchorPointX(x: number);
        get anchorPointY(): number;
        set anchorPointY(x: number);
        get x1(): number;
        set x1(x: number);
        get y1(): number;
        set y1(x: number);
        get x2(): number;
        set x2(x: number);
        get y2(): number;
        set y2(x: number);
        get featureIndex(): number;
        set featureIndex(x: number);
        get sourceLayerIndex(): number;
        set sourceLayerIndex(x: number);
        get bucketIndex(): number;
        set bucketIndex(x: number);
        get radius(): number;
        set radius(x: number);
        get signedDistanceFromAnchor(): number;
        set signedDistanceFromAnchor(x: number);
        get anchorPoint(): Point;
    }
    export type CollisionBox = CollisionBoxStruct;
    export class CollisionBoxArray extends StructArrayLayout6i1ul2ui2i24 {
        get(index: number): CollisionBoxStruct;
    }
    class PlacedSymbolStruct extends Struct {
        _structArray: PlacedSymbolArray;
        anchorX: number;
        anchorY: number;
        glyphStartIndex: number;
        numGlyphs: number;
        vertexStartIndex: number;
        lineStartIndex: number;
        lineLength: number;
        segment: number;
        lowerSize: number;
        upperSize: number;
        lineOffsetX: number;
        lineOffsetY: number;
        writingMode: number;
        placedOrientation: number;
        hidden: number;
        crossTileID: number;
        associatedIconIndex: number;
        get anchorX(): number;
        set anchorX(x: number);
        get anchorY(): number;
        set anchorY(x: number);
        get glyphStartIndex(): number;
        set glyphStartIndex(x: number);
        get numGlyphs(): number;
        set numGlyphs(x: number);
        get vertexStartIndex(): number;
        set vertexStartIndex(x: number);
        get lineStartIndex(): number;
        set lineStartIndex(x: number);
        get lineLength(): number;
        set lineLength(x: number);
        get segment(): number;
        set segment(x: number);
        get lowerSize(): number;
        set lowerSize(x: number);
        get upperSize(): number;
        set upperSize(x: number);
        get lineOffsetX(): number;
        set lineOffsetX(x: number);
        get lineOffsetY(): number;
        set lineOffsetY(x: number);
        get writingMode(): number;
        set writingMode(x: number);
        get placedOrientation(): number;
        set placedOrientation(x: number);
        get hidden(): number;
        set hidden(x: number);
        get crossTileID(): number;
        set crossTileID(x: number);
        get associatedIconIndex(): number;
        set associatedIconIndex(x: number);
    }
    export type PlacedSymbol = PlacedSymbolStruct;
    export class PlacedSymbolArray extends StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48 {
        get(index: number): PlacedSymbolStruct;
    }
    class SymbolInstanceStruct extends Struct {
        _structArray: SymbolInstanceArray;
        anchorX: number;
        anchorY: number;
        rightJustifiedTextSymbolIndex: number;
        centerJustifiedTextSymbolIndex: number;
        leftJustifiedTextSymbolIndex: number;
        verticalPlacedTextSymbolIndex: number;
        placedIconSymbolIndex: number;
        verticalPlacedIconSymbolIndex: number;
        key: number;
        textBoxStartIndex: number;
        textBoxEndIndex: number;
        verticalTextBoxStartIndex: number;
        verticalTextBoxEndIndex: number;
        iconBoxStartIndex: number;
        iconBoxEndIndex: number;
        verticalIconBoxStartIndex: number;
        verticalIconBoxEndIndex: number;
        featureIndex: number;
        numHorizontalGlyphVertices: number;
        numVerticalGlyphVertices: number;
        numIconVertices: number;
        numVerticalIconVertices: number;
        crossTileID: number;
        textBoxScale: number;
        textOffset0: number;
        textOffset1: number;
        get anchorX(): number;
        set anchorX(x: number);
        get anchorY(): number;
        set anchorY(x: number);
        get rightJustifiedTextSymbolIndex(): number;
        set rightJustifiedTextSymbolIndex(x: number);
        get centerJustifiedTextSymbolIndex(): number;
        set centerJustifiedTextSymbolIndex(x: number);
        get leftJustifiedTextSymbolIndex(): number;
        set leftJustifiedTextSymbolIndex(x: number);
        get verticalPlacedTextSymbolIndex(): number;
        set verticalPlacedTextSymbolIndex(x: number);
        get placedIconSymbolIndex(): number;
        set placedIconSymbolIndex(x: number);
        get verticalPlacedIconSymbolIndex(): number;
        set verticalPlacedIconSymbolIndex(x: number);
        get key(): number;
        set key(x: number);
        get textBoxStartIndex(): number;
        set textBoxStartIndex(x: number);
        get textBoxEndIndex(): number;
        set textBoxEndIndex(x: number);
        get verticalTextBoxStartIndex(): number;
        set verticalTextBoxStartIndex(x: number);
        get verticalTextBoxEndIndex(): number;
        set verticalTextBoxEndIndex(x: number);
        get iconBoxStartIndex(): number;
        set iconBoxStartIndex(x: number);
        get iconBoxEndIndex(): number;
        set iconBoxEndIndex(x: number);
        get verticalIconBoxStartIndex(): number;
        set verticalIconBoxStartIndex(x: number);
        get verticalIconBoxEndIndex(): number;
        set verticalIconBoxEndIndex(x: number);
        get featureIndex(): number;
        set featureIndex(x: number);
        get numHorizontalGlyphVertices(): number;
        set numHorizontalGlyphVertices(x: number);
        get numVerticalGlyphVertices(): number;
        set numVerticalGlyphVertices(x: number);
        get numIconVertices(): number;
        set numIconVertices(x: number);
        get numVerticalIconVertices(): number;
        set numVerticalIconVertices(x: number);
        get crossTileID(): number;
        set crossTileID(x: number);
        get textBoxScale(): number;
        set textBoxScale(x: number);
        get textOffset0(): number;
        set textOffset0(x: number);
        get textOffset1(): number;
        set textOffset1(x: number);
    }
    export type SymbolInstance = SymbolInstanceStruct;
    export class SymbolInstanceArray extends StructArrayLayout8i14ui1ul3f60 {
        get(index: number): SymbolInstanceStruct;
    }
    class GlyphOffsetStruct extends Struct {
        _structArray: GlyphOffsetArray;
        offsetX: number;
        get offsetX(): number;
        set offsetX(x: number);
    }
    export type GlyphOffset = GlyphOffsetStruct;
    export class GlyphOffsetArray extends StructArrayLayout1f4 {
        getoffsetX(index: number): number;
        get(index: number): GlyphOffsetStruct;
    }
    class SymbolLineVertexStruct extends Struct {
        _structArray: SymbolLineVertexArray;
        x: number;
        y: number;
        tileUnitDistanceFromAnchor: number;
        get x(): number;
        set x(x: number);
        get y(): number;
        set y(x: number);
        get tileUnitDistanceFromAnchor(): number;
        set tileUnitDistanceFromAnchor(x: number);
    }
    export type SymbolLineVertex = SymbolLineVertexStruct;
    export class SymbolLineVertexArray extends StructArrayLayout3i6 {
        getx(index: number): number;
        gety(index: number): number;
        gettileUnitDistanceFromAnchor(index: number): number;
        get(index: number): SymbolLineVertexStruct;
    }
    class FeatureIndexStruct extends Struct {
        _structArray: FeatureIndexArray;
        featureIndex: number;
        sourceLayerIndex: number;
        bucketIndex: number;
        get featureIndex(): number;
        set featureIndex(x: number);
        get sourceLayerIndex(): number;
        set sourceLayerIndex(x: number);
        get bucketIndex(): number;
        set bucketIndex(x: number);
    }
    export type FeatureIndex = FeatureIndexStruct;
    export class FeatureIndexArray extends StructArrayLayout1ul2ui8 {
        get(index: number): FeatureIndexStruct;
    }
    export { StructArrayLayout2i4, StructArrayLayout4i8, StructArrayLayout2i4i12, StructArrayLayout2i4ub8, StructArrayLayout8ui16, StructArrayLayout4i4ui16, StructArrayLayout3f12, StructArrayLayout1ul4, StructArrayLayout6i1ul2ui2i24, StructArrayLayout2i2i2i12, StructArrayLayout2ub2f12, StructArrayLayout2i2ui3ul3ui2f3ub1ul1i48, StructArrayLayout8i14ui1ul3f60, StructArrayLayout1f4, StructArrayLayout3i6, StructArrayLayout1ul2ui8, StructArrayLayout3ui6, StructArrayLayout2ui4, StructArrayLayout1ui2, StructArrayLayout2f8, StructArrayLayout4f16, StructArrayLayout2i4 as PosArray, StructArrayLayout4i8 as RasterBoundsArray, StructArrayLayout2i4 as CircleLayoutArray, StructArrayLayout2i4 as FillLayoutArray, StructArrayLayout2i4i12 as FillExtrusionLayoutArray, StructArrayLayout2i4 as HeatmapLayoutArray, StructArrayLayout2i4ub8 as LineLayoutArray, StructArrayLayout8ui16 as PatternLayoutArray, StructArrayLayout4i4ui16 as SymbolLayoutArray, StructArrayLayout3f12 as SymbolDynamicLayoutArray, StructArrayLayout1ul4 as SymbolOpacityArray, StructArrayLayout2i2i2i12 as CollisionBoxLayoutArray, StructArrayLayout2i2i2i12 as CollisionCircleLayoutArray, StructArrayLayout2ub2f12 as CollisionVertexArray, StructArrayLayout3ui6 as TriangleIndexArray, StructArrayLayout2ui4 as LineIndexArray, StructArrayLayout1ui2 as LineStripIndexArray };
}

declare module 'mapbox-gl/data/bucket/symbol_bucket' {
    import { SymbolLayoutArray, SymbolDynamicLayoutArray, SymbolOpacityArray, CollisionVertexArray, PlacedSymbolArray, SymbolInstanceArray, GlyphOffsetArray, SymbolLineVertexArray } from 'mapbox-gl/data/array_types';
    import SegmentVector from 'mapbox-gl/data/segment';
    import { ProgramConfigurationSet } from 'mapbox-gl/data/program_configuration';
    import { TriangleIndexArray, LineIndexArray } from 'mapbox-gl/data/index_array_type';
    import Anchor from 'mapbox-gl/symbol/anchor';
    import Formatted from 'mapbox-gl/style-spec/expression/types/formatted';
    import ResolvedImage from 'mapbox-gl/style-spec/expression/types/resolved_image';
    import { Bucket, BucketParameters, IndexedFeature, PopulateParameters } from 'mapbox-gl/data/bucket';
    import { CollisionBoxArray, SymbolInstance } from 'mapbox-gl/data/array_types';
    import { StructArray, StructArrayMember } from 'mapbox-gl/util/struct_array';
    import SymbolStyleLayer from 'mapbox-gl/style/style_layer/symbol_style_layer';
    import Context from 'mapbox-gl/gl/context';
    import IndexBuffer from 'mapbox-gl/gl/index_buffer';
    import VertexBuffer from 'mapbox-gl/gl/vertex_buffer';
    import { SymbolQuad } from 'mapbox-gl/symbol/quads';
    import { SizeData } from 'mapbox-gl/symbol/symbol_size';
    import { FeatureStates } from 'mapbox-gl/source/source_state';
    import { ImagePosition } from 'mapbox-gl/render/image_atlas';
    type Class<T> = new (...args: any) => T;
    export type SingleCollisionBox = {
        x1: number;
        y1: number;
        x2: number;
        y2: number;
        anchorPointX: number;
        anchorPointY: number;
    };
    export type CollisionArrays = {
        textBox?: SingleCollisionBox;
        verticalTextBox?: SingleCollisionBox;
        iconBox?: SingleCollisionBox;
        verticalIconBox?: SingleCollisionBox;
        textCircles?: Array<number>;
        textFeatureIndex?: number;
        verticalTextFeatureIndex?: number;
        iconFeatureIndex?: number;
        verticalIconFeatureIndex?: number;
    };
    export type SymbolFeature = {
        sortKey: number | void;
        text: Formatted | void;
        icon: ResolvedImage | void;
        index: number;
        sourceLayerIndex: number;
        geometry: Array<Array<typeof import("@mapbox/point-geometry").default>>;
        properties: object;
        type: "Point" | "LineString" | "Polygon";
        id?: any;
    };
    function addDynamicAttributes(dynamicLayoutVertexArray: StructArray, p: typeof import("@mapbox/point-geometry").default, angle: number): void;
    export class SymbolBuffers {
        layoutVertexArray: SymbolLayoutArray;
        layoutVertexBuffer: VertexBuffer;
        indexArray: TriangleIndexArray;
        indexBuffer: IndexBuffer;
        programConfigurations: ProgramConfigurationSet<SymbolStyleLayer>;
        segments: SegmentVector;
        dynamicLayoutVertexArray: SymbolDynamicLayoutArray;
        dynamicLayoutVertexBuffer: VertexBuffer;
        opacityVertexArray: SymbolOpacityArray;
        opacityVertexBuffer: VertexBuffer;
        collisionVertexArray: CollisionVertexArray;
        collisionVertexBuffer: VertexBuffer;
        placedSymbolArray: PlacedSymbolArray;
        constructor(programConfigurations: ProgramConfigurationSet<SymbolStyleLayer>);
        upload(context: Context, dynamicIndexBuffer: boolean, upload?: boolean, update?: boolean): void;
        destroy(): void;
    }
    class CollisionBuffers {
        layoutVertexArray: StructArray;
        layoutAttributes: Array<StructArrayMember>;
        layoutVertexBuffer: VertexBuffer;
        indexArray: TriangleIndexArray | LineIndexArray;
        indexBuffer: IndexBuffer;
        segments: SegmentVector;
        collisionVertexArray: CollisionVertexArray;
        collisionVertexBuffer: VertexBuffer;
        constructor(LayoutArray: Class<StructArray>, layoutAttributes: Array<StructArrayMember>, IndexArray: Class<TriangleIndexArray | LineIndexArray>);
        upload(context: Context): void;
        destroy(): void;
    }
    class SymbolBucket implements Bucket {
        static MAX_GLYPHS: number;
        static addDynamicAttributes: typeof addDynamicAttributes;
        collisionBoxArray: CollisionBoxArray;
        zoom: number;
        overscaling: number;
        layers: Array<SymbolStyleLayer>;
        layerIds: Array<string>;
        stateDependentLayers: Array<SymbolStyleLayer>;
        stateDependentLayerIds: Array<string>;
        index: number;
        sdfIcons: boolean;
        iconsNeedLinear: boolean;
        bucketInstanceId: number;
        justReloaded: boolean;
        hasPattern: boolean;
        textSizeData: SizeData;
        iconSizeData: SizeData;
        glyphOffsetArray: GlyphOffsetArray;
        lineVertexArray: SymbolLineVertexArray;
        features: Array<SymbolFeature>;
        symbolInstances: SymbolInstanceArray;
        collisionArrays: Array<CollisionArrays>;
        pixelRatio: number;
        tilePixelRatio: number;
        compareText: {
            [x: string]: Array<typeof import("@mapbox/point-geometry").default>;
        };
        fadeStartTime: number;
        sortFeaturesByKey: boolean;
        sortFeaturesByY: boolean;
        sortedAngle: number;
        featureSortOrder: Array<number>;
        text: SymbolBuffers;
        icon: SymbolBuffers;
        textCollisionBox: CollisionBuffers;
        iconCollisionBox: CollisionBuffers;
        textCollisionCircle: CollisionBuffers;
        iconCollisionCircle: CollisionBuffers;
        uploaded: boolean;
        sourceLayerIndex: number;
        sourceID: string;
        symbolInstanceIndexes: Array<number>;
        writingModes: Array<number>;
        allowVerticalPlacement: boolean;
        hasPaintOverrides: boolean;
        constructor(options: BucketParameters<SymbolStyleLayer>);
        createArrays(): void;
        calculateGlyphDependencies(text: string, stack: {
            [x: number]: boolean;
        }, textAlongLine: boolean, allowVerticalPlacement: boolean, doesAllowVerticalWritingMode: boolean): void;
        populate(features: Array<IndexedFeature>, options: PopulateParameters): void;
        update(states: FeatureStates, vtLayer: typeof import("@mapbox/vector-tile").VectorTileLayer, imagePositions: {
            [x: string]: ImagePosition;
        }): void;
        isEmpty(): boolean;
        uploadPending(): boolean;
        upload(context: Context): void;
        destroy(): void;
        addToLineVertexArray(anchor: Anchor, line: any): {
            lineStartIndex: number;
            lineLength: number;
        };
        addSymbols(arrays: SymbolBuffers, quads: Array<SymbolQuad>, sizeVertex: any, lineOffset: [number, number], alongLine: boolean, feature: SymbolFeature, writingMode: any, labelAnchor: Anchor, lineStartIndex: number, lineLength: number, associatedIconIndex: number): void;
        _addCollisionDebugVertex(layoutVertexArray: StructArray, collisionVertexArray: StructArray, point: typeof import("@mapbox/point-geometry").default, anchorX: number, anchorY: number, extrude: typeof import("@mapbox/point-geometry").default): any;
        addCollisionDebugVertices(x1: number, y1: number, x2: number, y2: number, arrays: CollisionBuffers, boxAnchorPoint: typeof import("@mapbox/point-geometry").default, symbolInstance: SymbolInstance, isCircle: boolean): void;
        addDebugCollisionBoxes(startIndex: number, endIndex: number, symbolInstance: SymbolInstance, isText: boolean): void;
        generateCollisionDebugBuffers(): void;
        _deserializeCollisionBoxesForSymbol(collisionBoxArray: CollisionBoxArray, textStartIndex: number, textEndIndex: number, verticalTextStartIndex: number, verticalTextEndIndex: number, iconStartIndex: number, iconEndIndex: number, verticalIconStartIndex: number, verticalIconEndIndex: number): CollisionArrays;
        deserializeCollisionBoxes(collisionBoxArray: CollisionBoxArray): void;
        hasTextData(): boolean;
        hasIconData(): boolean;
        hasTextCollisionBoxData(): boolean;
        hasIconCollisionBoxData(): boolean;
        hasTextCollisionCircleData(): boolean;
        hasIconCollisionCircleData(): boolean;
        addIndicesForPlacedTextSymbol(placedTextSymbolIndex: number): void;
        addIndicesForPlacedIconSymbol(placedIconSymbolIndex: number): void;
        getSortedSymbolIndexes(angle: number): any[];
        sortFeatures(angle: number): void;
    }
    export default SymbolBucket;
    export { addDynamicAttributes };
}

declare module 'mapbox-gl/symbol/collision_index' {
    import Point from '@mapbox/point-geometry';
    import Grid from 'mapbox-gl/symbol/grid_index';
    import { mat4 } from 'gl-matrix';
    import Transform from 'mapbox-gl/geo/transform';
    import { SingleCollisionBox } from 'mapbox-gl/data/bucket/symbol_bucket';
    import { GlyphOffsetArray, SymbolLineVertexArray } from 'mapbox-gl/data/array_types';
    class CollisionIndex {
        grid: Grid;
        ignoredGrid: Grid;
        transform: Transform;
        pitchfactor: number;
        screenRightBoundary: number;
        screenBottomBoundary: number;
        gridRightBoundary: number;
        gridBottomBoundary: number;
        constructor(transform: Transform, grid?: Grid, ignoredGrid?: Grid);
        placeCollisionBox(collisionBox: SingleCollisionBox, allowOverlap: boolean, textPixelRatio: number, posMatrix: mat4, collisionGroupPredicate?: any): {
            box: Array<number>;
            offscreen: boolean;
        };
        approximateTileDistance(tileDistance: any, lastSegmentAngle: number, pixelsToTileUnits: number, cameraToAnchorDistance: number, pitchWithMap: boolean): number;
        placeCollisionCircles(collisionCircles: Array<number>, allowOverlap: boolean, scale: number, textPixelRatio: number, symbol: any, lineVertexArray: SymbolLineVertexArray, glyphOffsetArray: GlyphOffsetArray, fontSize: number, posMatrix: mat4, labelPlaneMatrix: mat4, showCollisionCircles: boolean, pitchWithMap: boolean, collisionGroupPredicate?: any): {
            circles: Array<number>;
            offscreen: boolean;
        };
        queryRenderedSymbols(viewportQueryGeometry: Array<typeof import("@mapbox/point-geometry").default>): {};
        insertCollisionBox(collisionBox: Array<number>, ignorePlacement: boolean, bucketInstanceId: number, featureIndex: number, collisionGroupID: number): void;
        insertCollisionCircles(collisionCircles: Array<number>, ignorePlacement: boolean, bucketInstanceId: number, featureIndex: number, collisionGroupID: number): void;
        projectAnchor(posMatrix: mat4, x: number, y: number): {
            perspectiveRatio: number;
            cameraDistance: number;
        };
        projectPoint(posMatrix: mat4, x: number, y: number): Point;
        projectAndGetPerspectiveRatio(posMatrix: mat4, x: number, y: number): {
            point: Point;
            perspectiveRatio: number;
        };
        isOffscreen(x1: number, y1: number, x2: number, y2: number): boolean;
        isInsideGrid(x1: number, y1: number, x2: number, y2: number): boolean;
    }
    export default CollisionIndex;
}

declare module 'mapbox-gl/data/feature_index' {
    import Grid from 'grid-index';
    import DictionaryCoder from 'mapbox-gl/util/dictionary_coder';
    import GeoJSONFeature from 'mapbox-gl/util/vectortile_to_geojson';
    import { OverscaledTileID } from 'mapbox-gl/source/tile_id';
    import SourceFeatureState from 'mapbox-gl/source/source_state';
    import StyleLayer from 'mapbox-gl/style/style_layer';
    import { FeatureFilter } from 'mapbox-gl/style-spec/feature_filter';
    import Transform from 'mapbox-gl/geo/transform';
    import { FilterSpecification } from 'mapbox-gl/style-spec/types';
    import { FeatureIndexArray } from 'mapbox-gl/data/array_types';
    type QueryParameters = {
        scale: number;
        pixelPosMatrix: Float32Array;
        transform: Transform;
        tileSize: number;
        queryGeometry: Array<typeof import("@mapbox/point-geometry").default>;
        cameraQueryGeometry: Array<typeof import("@mapbox/point-geometry").default>;
        queryPadding: number;
        params: {
            filter: FilterSpecification;
            layers: Array<string>;
        };
    };
    class FeatureIndex {
        tileID: OverscaledTileID;
        x: number;
        y: number;
        z: number;
        grid: Grid;
        grid3D: Grid;
        featureIndexArray: FeatureIndexArray;
        rawTileData: ArrayBuffer;
        bucketLayerIDs: Array<Array<string>>;
        vtLayers: {
            [x: string]: typeof import("@mapbox/vector-tile").VectorTileLayer;
        };
        sourceLayerCoder: DictionaryCoder;
        constructor(tileID: OverscaledTileID, grid?: Grid, featureIndexArray?: FeatureIndexArray);
        insert(feature: typeof import("@mapbox/vector-tile").VectorTileFeature, geometry: Array<Array<typeof import("@mapbox/point-geometry").default>>, featureIndex: number, sourceLayerIndex: number, bucketIndex: number, is3D?: boolean): void;
        loadVTLayers(): {
            [x: string]: typeof import("@mapbox/vector-tile").VectorTileLayer;
        };
        query(args: QueryParameters, styleLayers: {
            [x: string]: StyleLayer;
        }, sourceFeatureState: SourceFeatureState): {
            [x: string]: Array<{
                featureIndex: number;
                feature: GeoJSONFeature;
            }>;
        };
        loadMatchingFeature(result: {
            [x: string]: Array<{
                featureIndex: number;
                feature: GeoJSONFeature;
            }>;
        }, bucketIndex: number, sourceLayerIndex: number, featureIndex: number, filter: FeatureFilter, filterLayerIDs: Array<string>, styleLayers: {
            [x: string]: StyleLayer;
        }, intersectionTest?: (feature: typeof import("@mapbox/vector-tile").VectorTileFeature, styleLayer: StyleLayer) => boolean | number): void;
        lookupSymbolFeatures(symbolFeatureIndexes: Array<number>, bucketIndex: number, sourceLayerIndex: number, filterSpec: FilterSpecification, filterLayerIDs: Array<string>, styleLayers: {
            [x: string]: StyleLayer;
        }): {};
        hasLayer(id: string): boolean;
    }
    export default FeatureIndex;
}

declare module 'mapbox-gl/symbol/symbol_layout' {
    import SymbolBucket from 'mapbox-gl/data/bucket/symbol_bucket';
    import { TextJustify } from 'mapbox-gl/symbol/shaping';
    import { StyleImage } from 'mapbox-gl/style/style_image';
    import { StyleGlyph } from 'mapbox-gl/style/style_glyph';
    import { ImagePosition } from 'mapbox-gl/render/image_atlas';
    import { GlyphPosition } from 'mapbox-gl/render/glyph_atlas';
    export type TextAnchor = "center" | "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right";
    export function evaluateVariableOffset(anchor: TextAnchor, offset: [number, number]): number[];
    export function performSymbolLayout(bucket: SymbolBucket, glyphMap: {
        [x: string]: {
            [x: number]: StyleGlyph | undefined | null;
        };
    }, glyphPositions: {
        [x: string]: {
            [x: number]: GlyphPosition;
        };
    }, imageMap: {
        [x: string]: StyleImage;
    }, imagePositions: {
        [x: string]: ImagePosition;
    }, showCollisionBoxes: boolean): void;
    export function getAnchorJustification(anchor: TextAnchor): TextJustify;
}

declare module 'mapbox-gl/render/vertex_array_object' {
    import Program from 'mapbox-gl/render/program';
    import VertexBuffer from 'mapbox-gl/gl/vertex_buffer';
    import IndexBuffer from 'mapbox-gl/gl/index_buffer';
    import Context from 'mapbox-gl/gl/context';
    class VertexArrayObject {
        context: Context;
        boundProgram: Program<any> | undefined | null;
        boundLayoutVertexBuffer: VertexBuffer | undefined | null;
        boundPaintVertexBuffers: Array<VertexBuffer>;
        boundIndexBuffer: IndexBuffer | undefined | null;
        boundVertexOffset: number | undefined | null;
        boundDynamicVertexBuffer: VertexBuffer | undefined | null;
        boundDynamicVertexBuffer2: VertexBuffer | undefined | null;
        vao: any;
        constructor();
        bind(context: Context, program: Program<any>, layoutVertexBuffer: VertexBuffer, paintVertexBuffers: Array<VertexBuffer>, indexBuffer?: IndexBuffer | null, vertexOffset?: number | null, dynamicVertexBuffer?: VertexBuffer | null, dynamicVertexBuffer2?: VertexBuffer | null): void;
        freshBind(program: Program<any>, layoutVertexBuffer: VertexBuffer, paintVertexBuffers: Array<VertexBuffer>, indexBuffer?: IndexBuffer | null, vertexOffset?: number | null, dynamicVertexBuffer?: VertexBuffer | null, dynamicVertexBuffer2?: VertexBuffer | null): void;
        destroy(): void;
    }
    export default VertexArrayObject;
}

declare module 'mapbox-gl/util/struct_array' {
    import { Transferable } from 'mapbox-gl/types/transferable';
    const viewTypes: {
        'Int8': Int8ArrayConstructor;
        'Uint8': Uint8ArrayConstructor;
        'Int16': Int16ArrayConstructor;
        'Uint16': Uint16ArrayConstructor;
        'Int32': Int32ArrayConstructor;
        'Uint32': Uint32ArrayConstructor;
        'Float32': Float32ArrayConstructor;
    };
    export type ViewType = keyof typeof viewTypes;
    class Struct {
        _pos1: number;
        _pos2: number;
        _pos4: number;
        _pos8: number;
        readonly _structArray: StructArray;
        size: number;
        constructor(structArray: StructArray, index: number);
    }
    export type StructArrayMember = {
        name: string;
        type: ViewType;
        components: number;
        offset: number;
    };
    export type StructArrayLayout = {
        members: Array<StructArrayMember>;
        size: number;
        alignment: number | undefined | null;
    };
    export type SerializedStructArray = {
        length: number;
        arrayBuffer: ArrayBuffer;
    };
    class StructArray {
        capacity: number;
        length: number;
        isTransferred: boolean;
        arrayBuffer: ArrayBuffer;
        uint8: Uint8Array;
        members: Array<StructArrayMember>;
        bytesPerElement: number;
        readonly emplaceBack: Function;
        readonly emplace: Function;
        constructor();
        static serialize(array: StructArray, transferables?: Array<Transferable>): SerializedStructArray;
        static deserialize(input: SerializedStructArray): any;
        _trim(): void;
        clear(): void;
        resize(n: number): void;
        reserve(n: number): void;
        _refreshViews(): void;
    }
    function createLayout(members: Array<{
        name: string;
        type: ViewType;
        readonly components?: number;
    }>, alignment?: number): StructArrayLayout;
    export { StructArray, Struct, viewTypes, createLayout };
}

declare module 'mapbox-gl/data/feature_position_map' {
    type SerializedFeaturePositionMap = {
        ids: Float64Array;
        positions: Uint32Array;
    };
    type FeaturePosition = {
        index: number;
        start: number;
        end: number;
    };
    export default class FeaturePositionMap {
        ids: Array<number>;
        positions: Array<number>;
        indexed: boolean;
        constructor();
        add(id: number, index: number, start: number, end: number): void;
        getPositions(id: number): Array<FeaturePosition>;
        static serialize(map: FeaturePositionMap, transferables: Array<ArrayBuffer>): SerializedFeaturePositionMap;
        static deserialize(obj: SerializedFeaturePositionMap): FeaturePositionMap;
    }
    export {};
}

declare module 'mapbox-gl/render/uniform_binding' {
    import Color from 'mapbox-gl/style-spec/util/color';
    import Context from 'mapbox-gl/gl/context';
    type $ObjMap<T extends {}, F extends (v: any) => any> = {
        [K in keyof T]: F extends (v: T[K]) => infer R ? R : never;
    };
    export type UniformValues<Us extends object> = $ObjMap<Us, <V>(u: Uniform<V>) => V>;
    export type UniformLocations = {
        [x: string]: WebGLUniformLocation;
    };
    class Uniform<T> {
        gl: WebGLRenderingContext;
        location: WebGLUniformLocation | undefined | null;
        current: T;
        constructor(context: Context, location: WebGLUniformLocation);
        readonly set: (v: T) => void;
    }
    class Uniform1i extends Uniform<number> {
        constructor(context: Context, location: WebGLUniformLocation);
        set(v: number): void;
    }
    class Uniform1f extends Uniform<number> {
        constructor(context: Context, location: WebGLUniformLocation);
        set(v: number): void;
    }
    class Uniform2f extends Uniform<[number, number]> {
        constructor(context: Context, location: WebGLUniformLocation);
        set(v: [number, number]): void;
    }
    class Uniform3f extends Uniform<[number, number, number]> {
        constructor(context: Context, location: WebGLUniformLocation);
        set(v: [number, number, number]): void;
    }
    class Uniform4f extends Uniform<[number, number, number, number]> {
        constructor(context: Context, location: WebGLUniformLocation);
        set(v: [number, number, number, number]): void;
    }
    class UniformColor extends Uniform<Color> {
        constructor(context: Context, location: WebGLUniformLocation);
        set(v: Color): void;
    }
    class UniformMatrix4f extends Uniform<Float32Array> {
        constructor(context: Context, location: WebGLUniformLocation);
        set(v: Float32Array): void;
    }
    export { Uniform, Uniform1i, Uniform1f, Uniform2f, Uniform3f, Uniform4f, UniformColor, UniformMatrix4f };
    export type UniformBindings = {
        [x: string]: Uniform<any>;
    };
}

declare module 'mapbox-gl/style/style_layer/typed_style_layer' {
    import CircleStyleLayer from 'mapbox-gl/style/style_layer/circle_style_layer';
    import FillStyleLayer from 'mapbox-gl/style/style_layer/fill_style_layer';
    import FillExtrusionStyleLayer from 'mapbox-gl/style/style_layer/fill_extrusion_style_layer';
    import HeatmapStyleLayer from 'mapbox-gl/style/style_layer/heatmap_style_layer';
    import HillshadeStyleLayer from 'mapbox-gl/style/style_layer/hillshade_style_layer';
    import LineStyleLayer from 'mapbox-gl/style/style_layer/line_style_layer';
    import SymbolStyleLayer from 'mapbox-gl/style/style_layer/symbol_style_layer';
    export type TypedStyleLayer = CircleStyleLayer | FillStyleLayer | FillExtrusionStyleLayer | HeatmapStyleLayer | HillshadeStyleLayer | LineStyleLayer | SymbolStyleLayer;
}

declare module 'mapbox-gl/style-spec/expression/types/formatted' {
    import Color from 'mapbox-gl/style-spec/util/color';
    export class FormattedSection {
        text: string;
        scale: number | null;
        fontStack: string | null;
        textColor: Color | null;
        constructor(text: string, scale: number | null, fontStack: string | null, textColor: Color | null);
    }
    export default class Formatted {
        sections: Array<FormattedSection>;
        constructor(sections: Array<FormattedSection>);
        static fromString(unformatted: string): Formatted;
        toString(): string;
        serialize(): Array<unknown>;
    }
}

declare module 'mapbox-gl/gl/cull_face_mode' {
    import { CullFaceModeType, FrontFaceType } from 'mapbox-gl/gl/types';
    class CullFaceMode {
        enable: boolean;
        mode: CullFaceModeType;
        frontFace: FrontFaceType;
        constructor(enable: boolean, mode: CullFaceModeType, frontFace: FrontFaceType);
        static disabled: Readonly<CullFaceMode>;
        static backCCW: Readonly<CullFaceMode>;
    }
    export default CullFaceMode;
}

declare module 'mapbox-gl/gl/framebuffer' {
    import { ColorAttachment, DepthAttachment } from 'mapbox-gl/gl/value';
    import Context from 'mapbox-gl/gl/context';
    class Framebuffer {
        context: Context;
        width: number;
        height: number;
        framebuffer: WebGLFramebuffer;
        colorAttachment: ColorAttachment;
        depthAttachment: DepthAttachment;
        constructor(context: Context, width: number, height: number);
        destroy(): void;
    }
    export default Framebuffer;
}

declare module 'mapbox-gl/gl/value' {
    import Color from 'mapbox-gl/style-spec/util/color';
    import Context from 'mapbox-gl/gl/context';
    import { BlendFuncType, BlendEquationType, ColorMaskType, DepthRangeType, DepthMaskType, StencilFuncType, StencilOpType, DepthFuncType, TextureUnitType, ViewportType, CullFaceModeType, FrontFaceType } from 'mapbox-gl/gl/types';
    export interface Value<T> {
        current: T;
        default: T;
        dirty: boolean;
        get(): T;
        setDefault(): void;
        set(value: T): void;
    }
    class BaseValue<T> implements Value<T> {
        gl: WebGLRenderingContext;
        current: T;
        default: T;
        dirty: boolean;
        constructor(context: Context);
        get(): T;
        set(value: T): void;
        getDefault(): T;
        setDefault(): void;
    }
    export class ClearColor extends BaseValue<Color> {
        getDefault(): Color;
        set(v: Color): void;
    }
    export class ClearDepth extends BaseValue<number> {
        getDefault(): number;
        set(v: number): void;
    }
    export class ClearStencil extends BaseValue<number> {
        getDefault(): number;
        set(v: number): void;
    }
    export class ColorMask extends BaseValue<ColorMaskType> {
        getDefault(): ColorMaskType;
        set(v: ColorMaskType): void;
    }
    export class DepthMask extends BaseValue<DepthMaskType> {
        getDefault(): DepthMaskType;
        set(v: DepthMaskType): void;
    }
    export class StencilMask extends BaseValue<number> {
        getDefault(): number;
        set(v: number): void;
    }
    export class StencilFunc extends BaseValue<StencilFuncType> {
        getDefault(): StencilFuncType;
        set(v: StencilFuncType): void;
    }
    export class StencilOp extends BaseValue<StencilOpType> {
        getDefault(): StencilOpType;
        set(v: StencilOpType): void;
    }
    export class StencilTest extends BaseValue<boolean> {
        getDefault(): boolean;
        set(v: boolean): void;
    }
    export class DepthRange extends BaseValue<DepthRangeType> {
        getDefault(): DepthRangeType;
        set(v: DepthRangeType): void;
    }
    export class DepthTest extends BaseValue<boolean> {
        getDefault(): boolean;
        set(v: boolean): void;
    }
    export class DepthFunc extends BaseValue<DepthFuncType> {
        getDefault(): DepthFuncType;
        set(v: DepthFuncType): void;
    }
    export class Blend extends BaseValue<boolean> {
        getDefault(): boolean;
        set(v: boolean): void;
    }
    export class BlendFunc extends BaseValue<BlendFuncType> {
        getDefault(): BlendFuncType;
        set(v: BlendFuncType): void;
    }
    export class BlendColor extends BaseValue<Color> {
        getDefault(): Color;
        set(v: Color): void;
    }
    export class BlendEquation extends BaseValue<BlendEquationType> {
        getDefault(): BlendEquationType;
        set(v: BlendEquationType): void;
    }
    export class CullFace extends BaseValue<boolean> {
        getDefault(): boolean;
        set(v: boolean): void;
    }
    export class CullFaceSide extends BaseValue<CullFaceModeType> {
        getDefault(): CullFaceModeType;
        set(v: CullFaceModeType): void;
    }
    export class FrontFace extends BaseValue<FrontFaceType> {
        getDefault(): FrontFaceType;
        set(v: FrontFaceType): void;
    }
    export class Program extends BaseValue<WebGLProgram | undefined | null> {
        getDefault(): WebGLProgram;
        set(v?: WebGLProgram | null): void;
    }
    export class ActiveTextureUnit extends BaseValue<TextureUnitType> {
        getDefault(): TextureUnitType;
        set(v: TextureUnitType): void;
    }
    export class Viewport extends BaseValue<ViewportType> {
        getDefault(): ViewportType;
        set(v: ViewportType): void;
    }
    export class BindFramebuffer extends BaseValue<WebGLFramebuffer | undefined | null> {
        getDefault(): WebGLFramebuffer;
        set(v?: WebGLFramebuffer | null): void;
    }
    export class BindRenderbuffer extends BaseValue<WebGLRenderbuffer | undefined | null> {
        getDefault(): WebGLRenderbuffer;
        set(v?: WebGLRenderbuffer | null): void;
    }
    export class BindTexture extends BaseValue<WebGLTexture | undefined | null> {
        getDefault(): WebGLTexture;
        set(v?: WebGLTexture | null): void;
    }
    export class BindVertexBuffer extends BaseValue<WebGLBuffer | undefined | null> {
        getDefault(): WebGLBuffer;
        set(v?: WebGLBuffer | null): void;
    }
    export class BindElementBuffer extends BaseValue<WebGLBuffer | undefined | null> {
        getDefault(): WebGLBuffer;
        set(v?: WebGLBuffer | null): void;
    }
    export class BindVertexArrayOES extends BaseValue<any> {
        vao: any;
        constructor(context: Context);
        getDefault(): any;
        set(v: any): void;
    }
    export class PixelStoreUnpack extends BaseValue<number> {
        getDefault(): number;
        set(v: number): void;
    }
    export class PixelStoreUnpackPremultiplyAlpha extends BaseValue<boolean> {
        getDefault(): boolean;
        set(v: boolean): void;
    }
    export class PixelStoreUnpackFlipY extends BaseValue<boolean> {
        getDefault(): boolean;
        set(v: boolean): void;
    }
    class FramebufferAttachment<T> extends BaseValue<T | undefined | null> {
        parent: WebGLFramebuffer;
        context: Context;
        constructor(context: Context, parent: WebGLFramebuffer);
        getDefault(): any;
    }
    export class ColorAttachment extends FramebufferAttachment<WebGLTexture> {
        setDirty(): void;
        set(v?: WebGLTexture | null): void;
    }
    export class DepthAttachment extends FramebufferAttachment<WebGLRenderbuffer> {
        set(v?: WebGLRenderbuffer | null): void;
    }
    export {};
}

declare module 'mapbox-gl/data/index_array_type' {
    import { LineIndexArray, TriangleIndexArray, LineStripIndexArray } from 'mapbox-gl/data/array_types';
    export { LineIndexArray, TriangleIndexArray, LineStripIndexArray };
}

declare module 'mapbox-gl/util/vectortile_to_geojson' {
    import { GeoJSONGeometry } from '@mapbox/geojson-types';
    class Feature {
        type: "Feature";
        _geometry: GeoJSONGeometry | undefined | null;
        properties: {};
        id: number | string | void;
        _vectorTileFeature: typeof import("@mapbox/vector-tile").VectorTileFeature;
        constructor(vectorTileFeature: typeof import("@mapbox/vector-tile").VectorTileFeature, z: number, x: number, y: number);
        get geometry(): GeoJSONGeometry | undefined | null;
        set geometry(g?: GeoJSONGeometry | null);
        toJSON(): {
            geometry: GeoJSONGeometry;
        };
    }
    export default Feature;
}

declare module 'mapbox-gl/source/worker_source' {
    import { RequestParameters } from 'mapbox-gl/util/ajax';
    import { RGBAImage, AlphaImage } from 'mapbox-gl/util/image';
    import { GlyphPositions } from 'mapbox-gl/render/glyph_atlas';
    import ImageAtlas from 'mapbox-gl/render/image_atlas';
    import { OverscaledTileID } from 'mapbox-gl/source/tile_id';
    import { Bucket } from 'mapbox-gl/data/bucket';
    import FeatureIndex from 'mapbox-gl/data/feature_index';
    import { CollisionBoxArray } from 'mapbox-gl/data/array_types';
    import DEMData from 'mapbox-gl/data/dem_data';
    import { StyleGlyph } from 'mapbox-gl/style/style_glyph';
    import { StyleImage } from 'mapbox-gl/style/style_image';
    export type TileParameters = {
        source: string;
        uid: string;
    };
    export type WorkerTileParameters = TileParameters & {
        tileID: OverscaledTileID;
        request: RequestParameters;
        zoom: number;
        maxZoom: number;
        tileSize: number;
        pixelRatio: number;
        showCollisionBoxes: boolean;
        collectResourceTiming?: boolean;
        returnDependencies?: boolean;
    };
    export type WorkerDEMTileParameters = TileParameters & {
        coord: {
            z: number;
            x: number;
            y: number;
            w: number;
        };
        rawImageData: RGBAImage;
        encoding: "mapbox" | "terrarium";
    };
    export type WorkerTileResult = {
        buckets: Array<Bucket>;
        imageAtlas: ImageAtlas;
        glyphAtlasImage: AlphaImage;
        featureIndex: FeatureIndex;
        collisionBoxArray: CollisionBoxArray;
        rawTileData?: ArrayBuffer;
        resourceTiming?: Array<PerformanceResourceTiming>;
        glyphMap?: {
            [x: string]: {
                [x: number]: StyleGlyph | undefined | null;
            };
        } | null;
        iconMap?: {
            [x: string]: StyleImage;
        } | null;
        glyphPositions?: GlyphPositions | null;
    };
    export type WorkerTileCallback = (error?: Error | null, result?: WorkerTileResult | null) => void;
    export type WorkerDEMTileCallback = (err?: Error | null, result?: DEMData | null) => void;
    export interface WorkerSource {
        loadTile(params: WorkerTileParameters, callback: WorkerTileCallback): void;
        reloadTile(params: WorkerTileParameters, callback: WorkerTileCallback): void;
        abortTile(params: TileParameters, callback: WorkerTileCallback): void;
        removeTile(params: TileParameters, callback: WorkerTileCallback): void;
        removeSource?: (params: {
            source: string;
        }, callback: WorkerTileCallback) => void;
    }
}

declare module 'mapbox-gl/data/dem_data' {
    import { RGBAImage } from 'mapbox-gl/util/image';
    export default class DEMData {
        uid: string;
        data: Uint32Array;
        stride: number;
        dim: number;
        encoding: "mapbox" | "terrarium";
        constructor(uid: string, data: RGBAImage, encoding: "mapbox" | "terrarium");
        get(x: number, y: number): number;
        getUnpackVector(): number[];
        _idx(x: number, y: number): number;
        _unpackMapbox(r: number, g: number, b: number): number;
        _unpackTerrarium(r: number, g: number, b: number): number;
        getPixels(): RGBAImage;
        backfillBorder(borderTile: DEMData, dx: number, dy: number): void;
    }
}

declare module 'mapbox-gl/render/tile_mask' {
    import { CanonicalTileID } from 'mapbox-gl/source/tile_id';
    import Tile from 'mapbox-gl/source/tile';
    import Context from 'mapbox-gl/gl/context';
    export type Mask = {
        [x: number]: CanonicalTileID;
    };
    export default function (renderableTiles: Array<Tile>, context: Context): void;
}

declare module 'mapbox-gl/style-spec/expression/parsing_error' {
    class ParsingError extends Error {
        key: string;
        message: string;
        constructor(key: string, message: string);
    }
    export default ParsingError;
}

declare module 'mapbox-gl/style-spec/expression/evaluation_context' {
    import { Color } from 'mapbox-gl/style-spec/expression/values';
    import { FormattedSection } from 'mapbox-gl/style-spec/expression/types/formatted';
    import { GlobalProperties, Feature, FeatureState } from 'mapbox-gl/style-spec/expression/index';
    class EvaluationContext {
        globals: GlobalProperties;
        feature: Feature | undefined | null;
        featureState: FeatureState | undefined | null;
        formattedSection: FormattedSection | undefined | null;
        availableImages: Array<string> | undefined | null;
        _parseColorCache: {
            [x: string]: Color | undefined | null;
        };
        constructor();
        id(): any;
        geometryType(): string;
        properties(): {
            [x: string]: any;
        };
        parseColor(input: string): Color | undefined | null;
    }
    export default EvaluationContext;
}

declare module 'mapbox-gl/style-spec/expression/types' {
    export type NullTypeT = {
        kind: "null";
    };
    export type NumberTypeT = {
        kind: "number";
    };
    export type StringTypeT = {
        kind: "string";
    };
    export type BooleanTypeT = {
        kind: "boolean";
    };
    export type ColorTypeT = {
        kind: "color";
    };
    export type ObjectTypeT = {
        kind: "object";
    };
    export type ValueTypeT = {
        kind: "value";
    };
    export type ErrorTypeT = {
        kind: "error";
    };
    export type CollatorTypeT = {
        kind: "collator";
    };
    export type FormattedTypeT = {
        kind: "formatted";
    };
    export type ResolvedImageTypeT = {
        kind: "resolvedImage";
    };
    export type EvaluationKind = "constant" | "source" | "camera" | "composite";
    export type Type = NullTypeT | NumberTypeT | StringTypeT | BooleanTypeT | ColorTypeT | ObjectTypeT | ValueTypeT | ArrayType | ErrorTypeT | CollatorTypeT | FormattedTypeT | ResolvedImageTypeT;
    export type ArrayType = {
        kind: "array";
        itemType: Type;
        N: number | undefined | null;
    };
    export const NullType: {
        kind: string;
    };
    export const NumberType: {
        kind: string;
    };
    export const StringType: {
        kind: string;
    };
    export const BooleanType: {
        kind: string;
    };
    export const ColorType: {
        kind: string;
    };
    export const ObjectType: {
        kind: string;
    };
    export const ValueType: {
        kind: string;
    };
    export const ErrorType: {
        kind: string;
    };
    export const CollatorType: {
        kind: string;
    };
    export const FormattedType: {
        kind: string;
    };
    export const ResolvedImageType: {
        kind: string;
    };
    export function array(itemType: Type, N?: number | null): ArrayType;
    export function toString(type: Type): string;
    export function checkSubtype(expected: Type, t: Type): string | undefined | null;
}

declare module 'mapbox-gl/style-spec/expression/values' {
    import Color from 'mapbox-gl/style-spec/util/color';
    import Collator from 'mapbox-gl/style-spec/expression/types/collator';
    import Formatted from 'mapbox-gl/style-spec/expression/types/formatted';
    import ResolvedImage from 'mapbox-gl/style-spec/expression/types/resolved_image';
    import { Type } from 'mapbox-gl/style-spec/expression/types';
    export function validateRGBA(r: unknown, g: unknown, b: unknown, a?: unknown): string | undefined | null;
    export type Value = null | string | boolean | number | Color | Collator | Formatted | ResolvedImage | ReadonlyArray<Value> | {
        [x: string]: Value;
    };
    export function isValue(mixed: unknown): boolean;
    export function typeOf(value: Value): Type;
    export function toString(value: Value): string;
    export { Color, Collator };
}

declare module 'mapbox-gl/style-spec/expression/expression' {
    import { Type } from 'mapbox-gl/style-spec/expression/types';
    import { Value } from 'mapbox-gl/style-spec/expression/values';
    import ParsingContext from 'mapbox-gl/style-spec/expression/parsing_context';
    import EvaluationContext from 'mapbox-gl/style-spec/expression/evaluation_context';
    type Class<T> = new (...args: any) => T;
    type SerializedExpression = Array<unknown> | string | number | boolean | null;
    export interface Expression {
        readonly type: Type;
        evaluate(ctx: EvaluationContext): any;
        eachChild(fn: (a: Expression) => void): void;
        possibleOutputs(): Array<Value | void>;
        serialize(): SerializedExpression;
    }
    export type ExpressionParser = (args: ReadonlyArray<unknown>, context: ParsingContext) => Expression | undefined | null;
    export type ExpressionRegistration = Class<Expression> & {
        readonly parse: ExpressionParser;
    };
    export type ExpressionRegistry = {
        [x: string]: ExpressionRegistration;
    };
    export {};
}

declare module 'mapbox-gl/style-spec/util/result' {
    export type Result<T, E> = {
        result: "success";
        value: T;
    } | {
        result: "error";
        value: E;
    };
    export function success<T, E>(value: T): Result<T, E>;
    export function error<T, E>(value: E): Result<T, E>;
}

declare module 'mapbox-gl/style-spec/expression/definitions/interpolate' {
    import { Stops } from 'mapbox-gl/style-spec/expression/stops';
    import { Expression } from 'mapbox-gl/style-spec/expression/expression';
    import ParsingContext from 'mapbox-gl/style-spec/expression/parsing_context';
    import EvaluationContext from 'mapbox-gl/style-spec/expression/evaluation_context';
    import { Value } from 'mapbox-gl/style-spec/expression/values';
    import { Type } from 'mapbox-gl/style-spec/expression/types';
    export type InterpolationType = {
        name: "linear";
    } | {
        name: "exponential";
        base: number;
    } | {
        name: "cubic-bezier";
        controlPoints: [number, number, number, number];
    };
    class Interpolate implements Expression {
        type: Type;
        operator: "interpolate" | "interpolate-hcl" | "interpolate-lab";
        interpolation: InterpolationType;
        input: Expression;
        labels: Array<number>;
        outputs: Array<Expression>;
        constructor(type: Type, operator: "interpolate" | "interpolate-hcl" | "interpolate-lab", interpolation: InterpolationType, input: Expression, stops: Stops);
        static interpolationFactor(interpolation: InterpolationType, input: number, lower: number, upper: number): number;
        static parse(args: ReadonlyArray<unknown>, context: ParsingContext): any;
        evaluate(ctx: EvaluationContext): any;
        eachChild(fn: (a: Expression) => void): void;
        possibleOutputs(): Array<Value | void>;
        serialize(): Array<unknown>;
    }
    export default Interpolate;
}

declare module 'mapbox-gl/style-spec/reference/v8.json' {
    const _default: {
        "$version": number;
        "$root": {
            "version": {
                "required": boolean;
                "type": string;
                "values": number[];
                "doc": string;
                "example": number;
            };
            "name": {
                "type": string;
                "doc": string;
                "example": string;
            };
            "metadata": {
                "type": string;
                "doc": string;
            };
            "center": {
                "type": string;
                "value": string;
                "doc": string;
                "example": number[];
            };
            "zoom": {
                "type": string;
                "doc": string;
                "example": number;
            };
            "bearing": {
                "type": string;
                "default": number;
                "period": number;
                "units": string;
                "doc": string;
                "example": number;
            };
            "pitch": {
                "type": string;
                "default": number;
                "units": string;
                "doc": string;
                "example": number;
            };
            "light": {
                "type": string;
                "doc": string;
                "example": {
                    "anchor": string;
                    "color": string;
                    "intensity": number;
                };
            };
            "sources": {
                "required": boolean;
                "type": string;
                "doc": string;
                "example": {
                    "mapbox-streets": {
                        "type": string;
                        "url": string;
                    };
                };
            };
            "sprite": {
                "type": string;
                "doc": string;
                "example": string;
            };
            "glyphs": {
                "type": string;
                "doc": string;
                "example": string;
            };
            "transition": {
                "type": string;
                "doc": string;
                "example": {
                    "duration": number;
                    "delay": number;
                };
            };
            "layers": {
                "required": boolean;
                "type": string;
                "value": string;
                "doc": string;
                "example": {
                    "id": string;
                    "source": string;
                    "source-layer": string;
                    "type": string;
                    "paint": {
                        "fill-color": string;
                    };
                }[];
            };
        };
        "sources": {
            "*": {
                "type": string;
                "doc": string;
            };
        };
        "source": string[];
        "source_vector": {
            "type": {
                "required": boolean;
                "type": string;
                "values": {
                    "vector": {
                        "doc": string;
                    };
                };
                "doc": string;
            };
            "url": {
                "type": string;
                "doc": string;
            };
            "tiles": {
                "type": string;
                "value": string;
                "doc": string;
            };
            "bounds": {
                "type": string;
                "value": string;
                "length": number;
                "default": number[];
                "doc": string;
            };
            "scheme": {
                "type": string;
                "values": {
                    "xyz": {
                        "doc": string;
                    };
                    "tms": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
            };
            "minzoom": {
                "type": string;
                "default": number;
                "doc": string;
            };
            "maxzoom": {
                "type": string;
                "default": number;
                "doc": string;
            };
            "attribution": {
                "type": string;
                "doc": string;
            };
            "*": {
                "type": string;
                "doc": string;
            };
        };
        "source_raster": {
            "type": {
                "required": boolean;
                "type": string;
                "values": {
                    "raster": {
                        "doc": string;
                    };
                };
                "doc": string;
            };
            "url": {
                "type": string;
                "doc": string;
            };
            "tiles": {
                "type": string;
                "value": string;
                "doc": string;
            };
            "bounds": {
                "type": string;
                "value": string;
                "length": number;
                "default": number[];
                "doc": string;
            };
            "minzoom": {
                "type": string;
                "default": number;
                "doc": string;
            };
            "maxzoom": {
                "type": string;
                "default": number;
                "doc": string;
            };
            "tileSize": {
                "type": string;
                "default": number;
                "units": string;
                "doc": string;
            };
            "scheme": {
                "type": string;
                "values": {
                    "xyz": {
                        "doc": string;
                    };
                    "tms": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
            };
            "attribution": {
                "type": string;
                "doc": string;
            };
            "*": {
                "type": string;
                "doc": string;
            };
        };
        "source_raster_dem": {
            "type": {
                "required": boolean;
                "type": string;
                "values": {
                    "raster-dem": {
                        "doc": string;
                    };
                };
                "doc": string;
            };
            "url": {
                "type": string;
                "doc": string;
            };
            "tiles": {
                "type": string;
                "value": string;
                "doc": string;
            };
            "bounds": {
                "type": string;
                "value": string;
                "length": number;
                "default": number[];
                "doc": string;
            };
            "minzoom": {
                "type": string;
                "default": number;
                "doc": string;
            };
            "maxzoom": {
                "type": string;
                "default": number;
                "doc": string;
            };
            "tileSize": {
                "type": string;
                "default": number;
                "units": string;
                "doc": string;
            };
            "attribution": {
                "type": string;
                "doc": string;
            };
            "encoding": {
                "type": string;
                "values": {
                    "terrarium": {
                        "doc": string;
                    };
                    "mapbox": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
            };
            "*": {
                "type": string;
                "doc": string;
            };
        };
        "source_geojson": {
            "type": {
                "required": boolean;
                "type": string;
                "values": {
                    "geojson": {
                        "doc": string;
                    };
                };
                "doc": string;
            };
            "data": {
                "type": string;
                "doc": string;
            };
            "maxzoom": {
                "type": string;
                "default": number;
                "doc": string;
            };
            "attribution": {
                "type": string;
                "doc": string;
            };
            "buffer": {
                "type": string;
                "default": number;
                "maximum": number;
                "minimum": number;
                "doc": string;
            };
            "tolerance": {
                "type": string;
                "default": number;
                "doc": string;
            };
            "cluster": {
                "type": string;
                "default": boolean;
                "doc": string;
            };
            "clusterRadius": {
                "type": string;
                "default": number;
                "minimum": number;
                "doc": string;
            };
            "clusterMaxZoom": {
                "type": string;
                "doc": string;
            };
            "clusterProperties": {
                "type": string;
                "doc": string;
            };
            "lineMetrics": {
                "type": string;
                "default": boolean;
                "doc": string;
            };
            "generateId": {
                "type": string;
                "default": boolean;
                "doc": string;
            };
        };
        "source_video": {
            "type": {
                "required": boolean;
                "type": string;
                "values": {
                    "video": {
                        "doc": string;
                    };
                };
                "doc": string;
            };
            "urls": {
                "required": boolean;
                "type": string;
                "value": string;
                "doc": string;
            };
            "coordinates": {
                "required": boolean;
                "doc": string;
                "type": string;
                "length": number;
                "value": {
                    "type": string;
                    "length": number;
                    "value": string;
                    "doc": string;
                };
            };
        };
        "source_image": {
            "type": {
                "required": boolean;
                "type": string;
                "values": {
                    "image": {
                        "doc": string;
                    };
                };
                "doc": string;
            };
            "url": {
                "required": boolean;
                "type": string;
                "doc": string;
            };
            "coordinates": {
                "required": boolean;
                "doc": string;
                "type": string;
                "length": number;
                "value": {
                    "type": string;
                    "length": number;
                    "value": string;
                    "doc": string;
                };
            };
        };
        "layer": {
            "id": {
                "type": string;
                "doc": string;
                "required": boolean;
            };
            "type": {
                "type": string;
                "values": {
                    "fill": {
                        "doc": string;
                        "sdk-support": {
                            "basic functionality": {
                                "js": string;
                                "android": string;
                                "ios": string;
                                "macos": string;
                            };
                        };
                    };
                    "line": {
                        "doc": string;
                        "sdk-support": {
                            "basic functionality": {
                                "js": string;
                                "android": string;
                                "ios": string;
                                "macos": string;
                            };
                        };
                    };
                    "symbol": {
                        "doc": string;
                        "sdk-support": {
                            "basic functionality": {
                                "js": string;
                                "android": string;
                                "ios": string;
                                "macos": string;
                            };
                        };
                    };
                    "circle": {
                        "doc": string;
                        "sdk-support": {
                            "basic functionality": {
                                "js": string;
                                "android": string;
                                "ios": string;
                                "macos": string;
                            };
                        };
                    };
                    "heatmap": {
                        "doc": string;
                        "sdk-support": {
                            "basic functionality": {
                                "js": string;
                                "android": string;
                                "ios": string;
                                "macos": string;
                            };
                        };
                    };
                    "fill-extrusion": {
                        "doc": string;
                        "sdk-support": {
                            "basic functionality": {
                                "js": string;
                                "android": string;
                                "ios": string;
                                "macos": string;
                            };
                        };
                    };
                    "raster": {
                        "doc": string;
                        "sdk-support": {
                            "basic functionality": {
                                "js": string;
                                "android": string;
                                "ios": string;
                                "macos": string;
                            };
                        };
                    };
                    "hillshade": {
                        "doc": string;
                        "sdk-support": {
                            "basic functionality": {
                                "js": string;
                                "android": string;
                                "ios": string;
                                "macos": string;
                            };
                        };
                    };
                    "background": {
                        "doc": string;
                        "sdk-support": {
                            "basic functionality": {
                                "js": string;
                                "android": string;
                                "ios": string;
                                "macos": string;
                            };
                        };
                    };
                };
                "doc": string;
                "required": boolean;
            };
            "metadata": {
                "type": string;
                "doc": string;
            };
            "source": {
                "type": string;
                "doc": string;
            };
            "source-layer": {
                "type": string;
                "doc": string;
            };
            "minzoom": {
                "type": string;
                "minimum": number;
                "maximum": number;
                "doc": string;
            };
            "maxzoom": {
                "type": string;
                "minimum": number;
                "maximum": number;
                "doc": string;
            };
            "filter": {
                "type": string;
                "doc": string;
            };
            "layout": {
                "type": string;
                "doc": string;
            };
            "paint": {
                "type": string;
                "doc": string;
            };
        };
        "layout": string[];
        "layout_background": {
            "visibility": {
                "type": string;
                "values": {
                    "visible": {
                        "doc": string;
                    };
                    "none": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "property-type": string;
            };
        };
        "layout_fill": {
            "fill-sort-key": {
                "type": string;
                "doc": string;
                "sdk-support": {
                    "js": string;
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "visibility": {
                "type": string;
                "values": {
                    "visible": {
                        "doc": string;
                    };
                    "none": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "property-type": string;
            };
        };
        "layout_circle": {
            "circle-sort-key": {
                "type": string;
                "doc": string;
                "sdk-support": {
                    "js": string;
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "visibility": {
                "type": string;
                "values": {
                    "visible": {
                        "doc": string;
                    };
                    "none": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "property-type": string;
            };
        };
        "layout_heatmap": {
            "visibility": {
                "type": string;
                "values": {
                    "visible": {
                        "doc": string;
                    };
                    "none": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "property-type": string;
            };
        };
        "layout_fill-extrusion": {
            "visibility": {
                "type": string;
                "values": {
                    "visible": {
                        "doc": string;
                    };
                    "none": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "property-type": string;
            };
        };
        "layout_line": {
            "line-cap": {
                "type": string;
                "values": {
                    "butt": {
                        "doc": string;
                    };
                    "round": {
                        "doc": string;
                    };
                    "square": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "line-join": {
                "type": string;
                "values": {
                    "bevel": {
                        "doc": string;
                    };
                    "round": {
                        "doc": string;
                    };
                    "miter": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "line-miter-limit": {
                "type": string;
                "default": number;
                "doc": string;
                "requires": {
                    "line-join": string;
                }[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "line-round-limit": {
                "type": string;
                "default": number;
                "doc": string;
                "requires": {
                    "line-join": string;
                }[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "line-sort-key": {
                "type": string;
                "doc": string;
                "sdk-support": {
                    "js": string;
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "visibility": {
                "type": string;
                "values": {
                    "visible": {
                        "doc": string;
                    };
                    "none": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "property-type": string;
            };
        };
        "layout_symbol": {
            "symbol-placement": {
                "type": string;
                "values": {
                    "point": {
                        "doc": string;
                    };
                    "line": {
                        "doc": string;
                    };
                    "line-center": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "`line-center` value": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "symbol-spacing": {
                "type": string;
                "default": number;
                "minimum": number;
                "units": string;
                "doc": string;
                "requires": {
                    "symbol-placement": string;
                }[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "symbol-avoid-edges": {
                "type": string;
                "default": boolean;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "symbol-sort-key": {
                "type": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "symbol-z-order": {
                "type": string;
                "values": {
                    "auto": {
                        "doc": string;
                    };
                    "viewport-y": {
                        "doc": string;
                    };
                    "source": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-allow-overlap": {
                "type": string;
                "default": boolean;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-ignore-placement": {
                "type": string;
                "default": boolean;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-optional": {
                "type": string;
                "default": boolean;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-rotation-alignment": {
                "type": string;
                "values": {
                    "map": {
                        "doc": string;
                    };
                    "viewport": {
                        "doc": string;
                    };
                    "auto": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "`auto` value": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-size": {
                "type": string;
                "default": number;
                "minimum": number;
                "units": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-text-fit": {
                "type": string;
                "values": {
                    "none": {
                        "doc": string;
                    };
                    "width": {
                        "doc": string;
                    };
                    "height": {
                        "doc": string;
                    };
                    "both": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-text-fit-padding": {
                "type": string;
                "value": string;
                "length": number;
                "default": number[];
                "units": string;
                "doc": string;
                "requires": (string | {
                    "icon-text-fit": string[];
                })[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-image": {
                "type": string;
                "doc": string;
                "tokens": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-rotate": {
                "type": string;
                "default": number;
                "period": number;
                "units": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-padding": {
                "type": string;
                "default": number;
                "minimum": number;
                "units": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-keep-upright": {
                "type": string;
                "default": boolean;
                "doc": string;
                "requires": (string | {
                    "icon-rotation-alignment": string;
                    "symbol-placement"?: undefined;
                } | {
                    "symbol-placement": string[];
                    "icon-rotation-alignment"?: undefined;
                })[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-offset": {
                "type": string;
                "value": string;
                "length": number;
                "default": number[];
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-anchor": {
                "type": string;
                "values": {
                    "center": {
                        "doc": string;
                    };
                    "left": {
                        "doc": string;
                    };
                    "right": {
                        "doc": string;
                    };
                    "top": {
                        "doc": string;
                    };
                    "bottom": {
                        "doc": string;
                    };
                    "top-left": {
                        "doc": string;
                    };
                    "top-right": {
                        "doc": string;
                    };
                    "bottom-left": {
                        "doc": string;
                    };
                    "bottom-right": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-pitch-alignment": {
                "type": string;
                "values": {
                    "map": {
                        "doc": string;
                    };
                    "viewport": {
                        "doc": string;
                    };
                    "auto": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-pitch-alignment": {
                "type": string;
                "values": {
                    "map": {
                        "doc": string;
                    };
                    "viewport": {
                        "doc": string;
                    };
                    "auto": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "`auto` value": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-rotation-alignment": {
                "type": string;
                "values": {
                    "map": {
                        "doc": string;
                    };
                    "viewport": {
                        "doc": string;
                    };
                    "auto": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "`auto` value": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-field": {
                "type": string;
                "default": string;
                "tokens": boolean;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-font": {
                "type": string;
                "value": string;
                "default": string[];
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-size": {
                "type": string;
                "default": number;
                "minimum": number;
                "units": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-max-width": {
                "type": string;
                "default": number;
                "minimum": number;
                "units": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-line-height": {
                "type": string;
                "default": number;
                "units": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-letter-spacing": {
                "type": string;
                "default": number;
                "units": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-justify": {
                "type": string;
                "values": {
                    "auto": {
                        "doc": string;
                    };
                    "left": {
                        "doc": string;
                    };
                    "center": {
                        "doc": string;
                    };
                    "right": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "auto": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-radial-offset": {
                "type": string;
                "units": string;
                "default": number;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "requires": string[];
                "property-type": string;
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
            };
            "text-variable-anchor": {
                "type": string;
                "value": string;
                "values": {
                    "center": {
                        "doc": string;
                    };
                    "left": {
                        "doc": string;
                    };
                    "right": {
                        "doc": string;
                    };
                    "top": {
                        "doc": string;
                    };
                    "bottom": {
                        "doc": string;
                    };
                    "top-left": {
                        "doc": string;
                    };
                    "top-right": {
                        "doc": string;
                    };
                    "bottom-left": {
                        "doc": string;
                    };
                    "bottom-right": {
                        "doc": string;
                    };
                };
                "requires": (string | {
                    "symbol-placement": string[];
                })[];
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-anchor": {
                "type": string;
                "values": {
                    "center": {
                        "doc": string;
                    };
                    "left": {
                        "doc": string;
                    };
                    "right": {
                        "doc": string;
                    };
                    "top": {
                        "doc": string;
                    };
                    "bottom": {
                        "doc": string;
                    };
                    "top-left": {
                        "doc": string;
                    };
                    "top-right": {
                        "doc": string;
                    };
                    "bottom-left": {
                        "doc": string;
                    };
                    "bottom-right": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "requires": (string | {
                    "!": string;
                })[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-max-angle": {
                "type": string;
                "default": number;
                "units": string;
                "doc": string;
                "requires": (string | {
                    "symbol-placement": string[];
                })[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-writing-mode": {
                "type": string;
                "value": string;
                "values": {
                    "horizontal": {
                        "doc": string;
                    };
                    "vertical": {
                        "doc": string;
                    };
                };
                "doc": string;
                "requires": (string | {
                    "symbol-placement": string[];
                })[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-rotate": {
                "type": string;
                "default": number;
                "period": number;
                "units": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-padding": {
                "type": string;
                "default": number;
                "minimum": number;
                "units": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-keep-upright": {
                "type": string;
                "default": boolean;
                "doc": string;
                "requires": (string | {
                    "text-rotation-alignment": string;
                    "symbol-placement"?: undefined;
                } | {
                    "symbol-placement": string[];
                    "text-rotation-alignment"?: undefined;
                })[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-transform": {
                "type": string;
                "values": {
                    "none": {
                        "doc": string;
                    };
                    "uppercase": {
                        "doc": string;
                    };
                    "lowercase": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-offset": {
                "type": string;
                "doc": string;
                "value": string;
                "units": string;
                "length": number;
                "default": number[];
                "requires": (string | {
                    "!": string;
                })[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-allow-overlap": {
                "type": string;
                "default": boolean;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-ignore-placement": {
                "type": string;
                "default": boolean;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-optional": {
                "type": string;
                "default": boolean;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "visibility": {
                "type": string;
                "values": {
                    "visible": {
                        "doc": string;
                    };
                    "none": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "property-type": string;
            };
        };
        "layout_raster": {
            "visibility": {
                "type": string;
                "values": {
                    "visible": {
                        "doc": string;
                    };
                    "none": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "property-type": string;
            };
        };
        "layout_hillshade": {
            "visibility": {
                "type": string;
                "values": {
                    "visible": {
                        "doc": string;
                    };
                    "none": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "property-type": string;
            };
        };
        "filter": {
            "type": string;
            "value": string;
            "doc": string;
        };
        "filter_operator": {
            "type": string;
            "values": {
                "==": {
                    "doc": string;
                };
                "!=": {
                    "doc": string;
                };
                ">": {
                    "doc": string;
                };
                ">=": {
                    "doc": string;
                };
                "<": {
                    "doc": string;
                };
                "<=": {
                    "doc": string;
                };
                "in": {
                    "doc": string;
                };
                "!in": {
                    "doc": string;
                };
                "all": {
                    "doc": string;
                };
                "any": {
                    "doc": string;
                };
                "none": {
                    "doc": string;
                };
                "has": {
                    "doc": string;
                };
                "!has": {
                    "doc": string;
                };
            };
            "doc": string;
        };
        "geometry_type": {
            "type": string;
            "values": {
                "Point": {
                    "doc": string;
                };
                "LineString": {
                    "doc": string;
                };
                "Polygon": {
                    "doc": string;
                };
            };
            "doc": string;
        };
        "function": {
            "expression": {
                "type": string;
                "doc": string;
            };
            "stops": {
                "type": string;
                "doc": string;
                "value": string;
            };
            "base": {
                "type": string;
                "default": number;
                "minimum": number;
                "doc": string;
            };
            "property": {
                "type": string;
                "doc": string;
                "default": string;
            };
            "type": {
                "type": string;
                "values": {
                    "identity": {
                        "doc": string;
                    };
                    "exponential": {
                        "doc": string;
                    };
                    "interval": {
                        "doc": string;
                    };
                    "categorical": {
                        "doc": string;
                    };
                };
                "doc": string;
                "default": string;
            };
            "colorSpace": {
                "type": string;
                "values": {
                    "rgb": {
                        "doc": string;
                    };
                    "lab": {
                        "doc": string;
                    };
                    "hcl": {
                        "doc": string;
                    };
                };
                "doc": string;
                "default": string;
            };
            "default": {
                "type": string;
                "required": boolean;
                "doc": string;
            };
        };
        "function_stop": {
            "type": string;
            "minimum": number;
            "maximum": number;
            "value": string[];
            "length": number;
            "doc": string;
        };
        "expression": {
            "type": string;
            "value": string;
            "minimum": number;
            "doc": string;
        };
        "expression_name": {
            "doc": string;
            "type": string;
            "values": {
                "let": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "var": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "literal": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "array": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "at": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "case": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "match": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "coalesce": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "step": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "interpolate": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "interpolate-hcl": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                        };
                    };
                };
                "interpolate-lab": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                        };
                    };
                };
                "ln2": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "pi": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "e": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "typeof": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "string": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "number": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "boolean": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "object": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "collator": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "format": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "image": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                        };
                    };
                };
                "number-format": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                        };
                    };
                };
                "to-string": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "to-number": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "to-boolean": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "to-rgba": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "to-color": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "rgb": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "rgba": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "get": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "has": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "length": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "properties": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "feature-state": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                        };
                    };
                };
                "geometry-type": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "id": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "zoom": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "heatmap-density": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "line-progress": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "accumulated": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                        };
                    };
                };
                "+": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "*": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "-": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "/": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "%": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "^": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "sqrt": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "log10": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "ln": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "log2": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "sin": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "cos": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "tan": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "asin": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "acos": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "atan": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "min": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "max": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "round": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "abs": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "ceil": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "floor": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "==": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                        "collator": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "!=": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                        "collator": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                ">": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                        "collator": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "<": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                        "collator": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                ">=": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                        "collator": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "<=": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                        "collator": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "all": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "any": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "!": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "is-supported-script": {
                    "doc": string;
                    "group": string;
                };
                "upcase": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "downcase": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "concat": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "resolved-locale": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
            };
        };
        "light": {
            "anchor": {
                "type": string;
                "default": string;
                "values": {
                    "map": {
                        "doc": string;
                    };
                    "viewport": {
                        "doc": string;
                    };
                };
                "property-type": string;
                "transition": boolean;
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "doc": string;
                "example": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
            };
            "position": {
                "type": string;
                "default": number[];
                "length": number;
                "value": string;
                "property-type": string;
                "transition": boolean;
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "doc": string;
                "example": number[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
            };
            "color": {
                "type": string;
                "property-type": string;
                "default": string;
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "transition": boolean;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
            };
            "intensity": {
                "type": string;
                "property-type": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "transition": boolean;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
            };
        };
        "paint": string[];
        "paint_fill": {
            "fill-antialias": {
                "type": string;
                "default": boolean;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "fill-opacity": {
                "type": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "doc": string;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "fill-color": {
                "type": string;
                "default": string;
                "doc": string;
                "transition": boolean;
                "requires": {
                    "!": string;
                }[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "fill-outline-color": {
                "type": string;
                "doc": string;
                "transition": boolean;
                "requires": ({
                    "!": string;
                    "fill-antialias"?: undefined;
                } | {
                    "fill-antialias": boolean;
                    "!"?: undefined;
                })[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "fill-translate": {
                "type": string;
                "value": string;
                "length": number;
                "default": number[];
                "transition": boolean;
                "units": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "fill-translate-anchor": {
                "type": string;
                "values": {
                    "map": {
                        "doc": string;
                    };
                    "viewport": {
                        "doc": string;
                    };
                };
                "doc": string;
                "default": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "fill-pattern": {
                "type": string;
                "transition": boolean;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "macos": string;
                        "ios": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
        };
        "paint_fill-extrusion": {
            "fill-extrusion-opacity": {
                "type": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "doc": string;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "fill-extrusion-color": {
                "type": string;
                "default": string;
                "doc": string;
                "transition": boolean;
                "requires": {
                    "!": string;
                }[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "fill-extrusion-translate": {
                "type": string;
                "value": string;
                "length": number;
                "default": number[];
                "transition": boolean;
                "units": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "fill-extrusion-translate-anchor": {
                "type": string;
                "values": {
                    "map": {
                        "doc": string;
                    };
                    "viewport": {
                        "doc": string;
                    };
                };
                "doc": string;
                "default": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "fill-extrusion-pattern": {
                "type": string;
                "transition": boolean;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "macos": string;
                        "ios": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "fill-extrusion-height": {
                "type": string;
                "default": number;
                "minimum": number;
                "units": string;
                "doc": string;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "fill-extrusion-base": {
                "type": string;
                "default": number;
                "minimum": number;
                "units": string;
                "doc": string;
                "transition": boolean;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "fill-extrusion-vertical-gradient": {
                "type": string;
                "default": boolean;
                "doc": string;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
        };
        "paint_line": {
            "line-opacity": {
                "type": string;
                "doc": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "line-color": {
                "type": string;
                "doc": string;
                "default": string;
                "transition": boolean;
                "requires": {
                    "!": string;
                }[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "line-translate": {
                "type": string;
                "value": string;
                "length": number;
                "default": number[];
                "transition": boolean;
                "units": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "line-translate-anchor": {
                "type": string;
                "values": {
                    "map": {
                        "doc": string;
                    };
                    "viewport": {
                        "doc": string;
                    };
                };
                "doc": string;
                "default": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "line-width": {
                "type": string;
                "default": number;
                "minimum": number;
                "transition": boolean;
                "units": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "line-gap-width": {
                "type": string;
                "default": number;
                "minimum": number;
                "doc": string;
                "transition": boolean;
                "units": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "line-offset": {
                "type": string;
                "default": number;
                "doc": string;
                "transition": boolean;
                "units": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "line-blur": {
                "type": string;
                "default": number;
                "minimum": number;
                "transition": boolean;
                "units": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "line-dasharray": {
                "type": string;
                "value": string;
                "doc": string;
                "minimum": number;
                "transition": boolean;
                "units": string;
                "requires": {
                    "!": string;
                }[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "line-pattern": {
                "type": string;
                "transition": boolean;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "macos": string;
                        "ios": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "line-gradient": {
                "type": string;
                "doc": string;
                "transition": boolean;
                "requires": ({
                    "!": string;
                    "source"?: undefined;
                    "has"?: undefined;
                } | {
                    "source": string;
                    "has": {
                        "lineMetrics": boolean;
                    };
                    "!"?: undefined;
                })[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
        };
        "paint_circle": {
            "circle-radius": {
                "type": string;
                "default": number;
                "minimum": number;
                "transition": boolean;
                "units": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "circle-color": {
                "type": string;
                "default": string;
                "doc": string;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "circle-blur": {
                "type": string;
                "default": number;
                "doc": string;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "circle-opacity": {
                "type": string;
                "doc": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "circle-translate": {
                "type": string;
                "value": string;
                "length": number;
                "default": number[];
                "transition": boolean;
                "units": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "circle-translate-anchor": {
                "type": string;
                "values": {
                    "map": {
                        "doc": string;
                    };
                    "viewport": {
                        "doc": string;
                    };
                };
                "doc": string;
                "default": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "circle-pitch-scale": {
                "type": string;
                "values": {
                    "map": {
                        "doc": string;
                    };
                    "viewport": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "circle-pitch-alignment": {
                "type": string;
                "values": {
                    "map": {
                        "doc": string;
                    };
                    "viewport": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "circle-stroke-width": {
                "type": string;
                "default": number;
                "minimum": number;
                "transition": boolean;
                "units": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "circle-stroke-color": {
                "type": string;
                "default": string;
                "doc": string;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "circle-stroke-opacity": {
                "type": string;
                "doc": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
        };
        "paint_heatmap": {
            "heatmap-radius": {
                "type": string;
                "default": number;
                "minimum": number;
                "transition": boolean;
                "units": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "heatmap-weight": {
                "type": string;
                "default": number;
                "minimum": number;
                "transition": boolean;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "heatmap-intensity": {
                "type": string;
                "default": number;
                "minimum": number;
                "transition": boolean;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "heatmap-color": {
                "type": string;
                "default": (string | number | string[])[];
                "doc": string;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "heatmap-opacity": {
                "type": string;
                "doc": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
        };
        "paint_symbol": {
            "icon-opacity": {
                "doc": string;
                "type": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "transition": boolean;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-color": {
                "type": string;
                "default": string;
                "transition": boolean;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-halo-color": {
                "type": string;
                "default": string;
                "transition": boolean;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-halo-width": {
                "type": string;
                "default": number;
                "minimum": number;
                "transition": boolean;
                "units": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-halo-blur": {
                "type": string;
                "default": number;
                "minimum": number;
                "transition": boolean;
                "units": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-translate": {
                "type": string;
                "value": string;
                "length": number;
                "default": number[];
                "transition": boolean;
                "units": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-translate-anchor": {
                "type": string;
                "values": {
                    "map": {
                        "doc": string;
                    };
                    "viewport": {
                        "doc": string;
                    };
                };
                "doc": string;
                "default": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-opacity": {
                "type": string;
                "doc": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "transition": boolean;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-color": {
                "type": string;
                "doc": string;
                "default": string;
                "transition": boolean;
                "overridable": boolean;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-halo-color": {
                "type": string;
                "default": string;
                "transition": boolean;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-halo-width": {
                "type": string;
                "default": number;
                "minimum": number;
                "transition": boolean;
                "units": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-halo-blur": {
                "type": string;
                "default": number;
                "minimum": number;
                "transition": boolean;
                "units": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-translate": {
                "type": string;
                "value": string;
                "length": number;
                "default": number[];
                "transition": boolean;
                "units": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-translate-anchor": {
                "type": string;
                "values": {
                    "map": {
                        "doc": string;
                    };
                    "viewport": {
                        "doc": string;
                    };
                };
                "doc": string;
                "default": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
        };
        "paint_raster": {
            "raster-opacity": {
                "type": string;
                "doc": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "raster-hue-rotate": {
                "type": string;
                "default": number;
                "period": number;
                "transition": boolean;
                "units": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "raster-brightness-min": {
                "type": string;
                "doc": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "raster-brightness-max": {
                "type": string;
                "doc": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "raster-saturation": {
                "type": string;
                "doc": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "raster-contrast": {
                "type": string;
                "doc": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "raster-resampling": {
                "type": string;
                "doc": string;
                "values": {
                    "linear": {
                        "doc": string;
                    };
                    "nearest": {
                        "doc": string;
                    };
                };
                "default": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "raster-fade-duration": {
                "type": string;
                "default": number;
                "minimum": number;
                "transition": boolean;
                "units": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
        };
        "paint_hillshade": {
            "hillshade-illumination-direction": {
                "type": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "doc": string;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "hillshade-illumination-anchor": {
                "type": string;
                "values": {
                    "map": {
                        "doc": string;
                    };
                    "viewport": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "hillshade-exaggeration": {
                "type": string;
                "doc": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "hillshade-shadow-color": {
                "type": string;
                "default": string;
                "doc": string;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "hillshade-highlight-color": {
                "type": string;
                "default": string;
                "doc": string;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "hillshade-accent-color": {
                "type": string;
                "default": string;
                "doc": string;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
        };
        "paint_background": {
            "background-color": {
                "type": string;
                "default": string;
                "doc": string;
                "transition": boolean;
                "requires": {
                    "!": string;
                }[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "background-pattern": {
                "type": string;
                "transition": boolean;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "background-opacity": {
                "type": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "doc": string;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
        };
        "transition": {
            "duration": {
                "type": string;
                "default": number;
                "minimum": number;
                "units": string;
                "doc": string;
            };
            "delay": {
                "type": string;
                "default": number;
                "minimum": number;
                "units": string;
                "doc": string;
            };
        };
        "property-type": {
            "data-driven": {
                "type": string;
                "doc": string;
            };
            "cross-faded": {
                "type": string;
                "doc": string;
            };
            "cross-faded-data-driven": {
                "type": string;
                "doc": string;
            };
            "color-ramp": {
                "type": string;
                "doc": string;
            };
            "data-constant": {
                "type": string;
                "doc": string;
            };
            "constant": {
                "type": string;
                "doc": string;
            };
        };
    };
    export default _default;
}

declare module 'mapbox-gl/style-spec/reference/latest' {
    import spec from 'mapbox-gl/style-spec/reference/v8.json';
    export default spec;
}

declare module 'mapbox-gl/style-spec/format' {
    function format(style: any, space?: number): string;
    export default format;
}

declare module 'mapbox-gl/style-spec/migrate' {
    export default function (style: any): any;
}

declare module 'mapbox-gl/style-spec/composite' {
    export default function (style: any): any;
}

declare module 'mapbox-gl/style-spec/diff' {
    const operations: {
        setStyle: string;
        addLayer: string;
        removeLayer: string;
        setPaintProperty: string;
        setLayoutProperty: string;
        setFilter: string;
        addSource: string;
        removeSource: string;
        setGeoJSONSourceData: string;
        setLayerZoomRange: string;
        setLayerProperty: string;
        setCenter: string;
        setZoom: string;
        setBearing: string;
        setPitch: string;
        setSprite: string;
        setGlyphs: string;
        setTransition: string;
        setLight: string;
    };
    function diffStyles(before: any, after: any): any[];
    export default diffStyles;
    export { operations };
}

declare module 'mapbox-gl/style-spec/error/validation_error' {
    export default class ValidationError {
        constructor(key: any, value: any, message: any, identifier: any);
    }
}

declare module 'mapbox-gl/style-spec/error/parsing_error' {
    function ParsingError(error: any): void;
    export default ParsingError;
}

declare module 'mapbox-gl/style-spec/feature_filter/convert' {
    import { FilterSpecification } from 'mapbox-gl/style-spec/types';
    export default function convertFilter(filter: FilterSpecification): unknown;
}

declare module 'mapbox-gl/style-spec/function' {
    export function isFunction(value: any): boolean;
    export function createFunction(parameters: any, propertySpec: any): {
        kind: string;
        interpolationType: {
            name: string;
        };
        interpolationFactor: any;
        zoomStops: any[];
        evaluate({ zoom }: {
            zoom: any;
        }, properties: any): any;
    } | {
        kind: string;
        interpolationType: {
            name: string;
            base: any;
        };
        interpolationFactor: any;
        zoomStops: any;
        evaluate: ({ zoom }: {
            zoom: any;
        }) => any;
    } | {
        kind: string;
        evaluate(_: any, feature: any): any;
        interpolationType?: undefined;
        interpolationFactor?: undefined;
        zoomStops?: undefined;
    };
}

declare module 'mapbox-gl/style-spec/function/convert' {
    import { StylePropertySpecification } from 'mapbox-gl/style-spec/style-spec';
    export default convertFunction;
    function convertFunction(parameters: any, propertySpec: StylePropertySpecification): any;
    export function convertTokenString(s: string): string | string[];
}

declare module 'mapbox-gl/style-spec/visit' {
    import { StylePropertySpecification } from 'mapbox-gl/style-spec/style-spec';
    import { StyleSpecification, SourceSpecification, LayerSpecification, PropertyValueSpecification, DataDrivenPropertyValueSpecification } from 'mapbox-gl/style-spec/types';
    export function eachSource(style: StyleSpecification, callback: (a: SourceSpecification) => void): void;
    export function eachLayer(style: StyleSpecification, callback: (a: LayerSpecification) => void): void;
    type PropertyCallback = (a: {
        path: [string, "paint" | "layout", string];
        key: string;
        value: PropertyValueSpecification<unknown> | DataDrivenPropertyValueSpecification<unknown>;
        reference: StylePropertySpecification;
        set: (a: PropertyValueSpecification<unknown> | DataDrivenPropertyValueSpecification<unknown>) => void;
    }) => void;
    export function eachProperty(style: StyleSpecification, options: {
        paint?: boolean;
        layout?: boolean;
    }, callback: PropertyCallback): void;
    export {};
}

declare module 'mapbox-gl/style-spec/validate_style' {
    export default function validateStyle(style: any, styleSpec?: {
        "$version": number;
        "$root": {
            "version": {
                "required": boolean;
                "type": string;
                "values": number[];
                "doc": string;
                "example": number;
            };
            "name": {
                "type": string;
                "doc": string;
                "example": string;
            };
            "metadata": {
                "type": string;
                "doc": string;
            };
            "center": {
                "type": string;
                "value": string;
                "doc": string;
                "example": number[];
            };
            "zoom": {
                "type": string;
                "doc": string;
                "example": number;
            };
            "bearing": {
                "type": string;
                "default": number;
                "period": number;
                "units": string;
                "doc": string;
                "example": number;
            };
            "pitch": {
                "type": string;
                "default": number;
                "units": string;
                "doc": string;
                "example": number;
            };
            "light": {
                "type": string;
                "doc": string;
                "example": {
                    "anchor": string;
                    "color": string;
                    "intensity": number;
                };
            };
            "sources": {
                "required": boolean;
                "type": string;
                "doc": string;
                "example": {
                    "mapbox-streets": {
                        "type": string;
                        "url": string;
                    };
                };
            };
            "sprite": {
                "type": string;
                "doc": string;
                "example": string;
            };
            "glyphs": {
                "type": string;
                "doc": string;
                "example": string;
            };
            "transition": {
                "type": string;
                "doc": string;
                "example": {
                    "duration": number;
                    "delay": number;
                };
            };
            "layers": {
                "required": boolean;
                "type": string;
                "value": string;
                "doc": string;
                "example": {
                    "id": string;
                    "source": string;
                    "source-layer": string;
                    "type": string;
                    "paint": {
                        "fill-color": string;
                    };
                }[];
            };
        };
        "sources": {
            "*": {
                "type": string;
                "doc": string;
            };
        };
        "source": string[];
        "source_vector": {
            "type": {
                "required": boolean;
                "type": string;
                "values": {
                    "vector": {
                        "doc": string;
                    };
                };
                "doc": string;
            };
            "url": {
                "type": string;
                "doc": string;
            };
            "tiles": {
                "type": string;
                "value": string;
                "doc": string;
            };
            "bounds": {
                "type": string;
                "value": string;
                "length": number;
                "default": number[];
                "doc": string;
            };
            "scheme": {
                "type": string;
                "values": {
                    "xyz": {
                        "doc": string;
                    };
                    "tms": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
            };
            "minzoom": {
                "type": string;
                "default": number;
                "doc": string;
            };
            "maxzoom": {
                "type": string;
                "default": number;
                "doc": string;
            };
            "attribution": {
                "type": string;
                "doc": string;
            };
            "*": {
                "type": string;
                "doc": string;
            };
        };
        "source_raster": {
            "type": {
                "required": boolean;
                "type": string;
                "values": {
                    "raster": {
                        "doc": string;
                    };
                };
                "doc": string;
            };
            "url": {
                "type": string;
                "doc": string;
            };
            "tiles": {
                "type": string;
                "value": string;
                "doc": string;
            };
            "bounds": {
                "type": string;
                "value": string;
                "length": number;
                "default": number[];
                "doc": string;
            };
            "minzoom": {
                "type": string;
                "default": number;
                "doc": string;
            };
            "maxzoom": {
                "type": string;
                "default": number;
                "doc": string;
            };
            "tileSize": {
                "type": string;
                "default": number;
                "units": string;
                "doc": string;
            };
            "scheme": {
                "type": string;
                "values": {
                    "xyz": {
                        "doc": string;
                    };
                    "tms": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
            };
            "attribution": {
                "type": string;
                "doc": string;
            };
            "*": {
                "type": string;
                "doc": string;
            };
        };
        "source_raster_dem": {
            "type": {
                "required": boolean;
                "type": string;
                "values": {
                    "raster-dem": {
                        "doc": string;
                    };
                };
                "doc": string;
            };
            "url": {
                "type": string;
                "doc": string;
            };
            "tiles": {
                "type": string;
                "value": string;
                "doc": string;
            };
            "bounds": {
                "type": string;
                "value": string;
                "length": number;
                "default": number[];
                "doc": string;
            };
            "minzoom": {
                "type": string;
                "default": number;
                "doc": string;
            };
            "maxzoom": {
                "type": string;
                "default": number;
                "doc": string;
            };
            "tileSize": {
                "type": string;
                "default": number;
                "units": string;
                "doc": string;
            };
            "attribution": {
                "type": string;
                "doc": string;
            };
            "encoding": {
                "type": string;
                "values": {
                    "terrarium": {
                        "doc": string;
                    };
                    "mapbox": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
            };
            "*": {
                "type": string;
                "doc": string;
            };
        };
        "source_geojson": {
            "type": {
                "required": boolean;
                "type": string;
                "values": {
                    "geojson": {
                        "doc": string;
                    };
                };
                "doc": string;
            };
            "data": {
                "type": string;
                "doc": string;
            };
            "maxzoom": {
                "type": string;
                "default": number;
                "doc": string;
            };
            "attribution": {
                "type": string;
                "doc": string;
            };
            "buffer": {
                "type": string;
                "default": number;
                "maximum": number;
                "minimum": number;
                "doc": string;
            };
            "tolerance": {
                "type": string;
                "default": number;
                "doc": string;
            };
            "cluster": {
                "type": string;
                "default": boolean;
                "doc": string;
            };
            "clusterRadius": {
                "type": string;
                "default": number;
                "minimum": number;
                "doc": string;
            };
            "clusterMaxZoom": {
                "type": string;
                "doc": string;
            };
            "clusterProperties": {
                "type": string;
                "doc": string;
            };
            "lineMetrics": {
                "type": string;
                "default": boolean;
                "doc": string;
            };
            "generateId": {
                "type": string;
                "default": boolean;
                "doc": string;
            };
        };
        "source_video": {
            "type": {
                "required": boolean;
                "type": string;
                "values": {
                    "video": {
                        "doc": string;
                    };
                };
                "doc": string;
            };
            "urls": {
                "required": boolean;
                "type": string;
                "value": string;
                "doc": string;
            };
            "coordinates": {
                "required": boolean;
                "doc": string;
                "type": string;
                "length": number;
                "value": {
                    "type": string;
                    "length": number;
                    "value": string;
                    "doc": string;
                };
            };
        };
        "source_image": {
            "type": {
                "required": boolean;
                "type": string;
                "values": {
                    "image": {
                        "doc": string;
                    };
                };
                "doc": string;
            };
            "url": {
                "required": boolean;
                "type": string;
                "doc": string;
            };
            "coordinates": {
                "required": boolean;
                "doc": string;
                "type": string;
                "length": number;
                "value": {
                    "type": string;
                    "length": number;
                    "value": string;
                    "doc": string;
                };
            };
        };
        "layer": {
            "id": {
                "type": string;
                "doc": string;
                "required": boolean;
            };
            "type": {
                "type": string;
                "values": {
                    "fill": {
                        "doc": string;
                        "sdk-support": {
                            "basic functionality": {
                                "js": string;
                                "android": string;
                                "ios": string;
                                "macos": string;
                            };
                        };
                    };
                    "line": {
                        "doc": string;
                        "sdk-support": {
                            "basic functionality": {
                                "js": string;
                                "android": string;
                                "ios": string;
                                "macos": string;
                            };
                        };
                    };
                    "symbol": {
                        "doc": string;
                        "sdk-support": {
                            "basic functionality": {
                                "js": string;
                                "android": string;
                                "ios": string;
                                "macos": string;
                            };
                        };
                    };
                    "circle": {
                        "doc": string;
                        "sdk-support": {
                            "basic functionality": {
                                "js": string;
                                "android": string;
                                "ios": string;
                                "macos": string;
                            };
                        };
                    };
                    "heatmap": {
                        "doc": string;
                        "sdk-support": {
                            "basic functionality": {
                                "js": string;
                                "android": string;
                                "ios": string;
                                "macos": string;
                            };
                        };
                    };
                    "fill-extrusion": {
                        "doc": string;
                        "sdk-support": {
                            "basic functionality": {
                                "js": string;
                                "android": string;
                                "ios": string;
                                "macos": string;
                            };
                        };
                    };
                    "raster": {
                        "doc": string;
                        "sdk-support": {
                            "basic functionality": {
                                "js": string;
                                "android": string;
                                "ios": string;
                                "macos": string;
                            };
                        };
                    };
                    "hillshade": {
                        "doc": string;
                        "sdk-support": {
                            "basic functionality": {
                                "js": string;
                                "android": string;
                                "ios": string;
                                "macos": string;
                            };
                        };
                    };
                    "background": {
                        "doc": string;
                        "sdk-support": {
                            "basic functionality": {
                                "js": string;
                                "android": string;
                                "ios": string;
                                "macos": string;
                            };
                        };
                    };
                };
                "doc": string;
                "required": boolean;
            };
            "metadata": {
                "type": string;
                "doc": string;
            };
            "source": {
                "type": string;
                "doc": string;
            };
            "source-layer": {
                "type": string;
                "doc": string;
            };
            "minzoom": {
                "type": string;
                "minimum": number;
                "maximum": number;
                "doc": string;
            };
            "maxzoom": {
                "type": string;
                "minimum": number;
                "maximum": number;
                "doc": string;
            };
            "filter": {
                "type": string;
                "doc": string;
            };
            "layout": {
                "type": string;
                "doc": string;
            };
            "paint": {
                "type": string;
                "doc": string;
            };
        };
        "layout": string[];
        "layout_background": {
            "visibility": {
                "type": string;
                "values": {
                    "visible": {
                        "doc": string;
                    };
                    "none": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "property-type": string;
            };
        };
        "layout_fill": {
            "fill-sort-key": {
                "type": string;
                "doc": string;
                "sdk-support": {
                    "js": string;
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "visibility": {
                "type": string;
                "values": {
                    "visible": {
                        "doc": string;
                    };
                    "none": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "property-type": string;
            };
        };
        "layout_circle": {
            "circle-sort-key": {
                "type": string;
                "doc": string;
                "sdk-support": {
                    "js": string;
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "visibility": {
                "type": string;
                "values": {
                    "visible": {
                        "doc": string;
                    };
                    "none": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "property-type": string;
            };
        };
        "layout_heatmap": {
            "visibility": {
                "type": string;
                "values": {
                    "visible": {
                        "doc": string;
                    };
                    "none": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "property-type": string;
            };
        };
        "layout_fill-extrusion": {
            "visibility": {
                "type": string;
                "values": {
                    "visible": {
                        "doc": string;
                    };
                    "none": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "property-type": string;
            };
        };
        "layout_line": {
            "line-cap": {
                "type": string;
                "values": {
                    "butt": {
                        "doc": string;
                    };
                    "round": {
                        "doc": string;
                    };
                    "square": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "line-join": {
                "type": string;
                "values": {
                    "bevel": {
                        "doc": string;
                    };
                    "round": {
                        "doc": string;
                    };
                    "miter": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "line-miter-limit": {
                "type": string;
                "default": number;
                "doc": string;
                "requires": {
                    "line-join": string;
                }[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "line-round-limit": {
                "type": string;
                "default": number;
                "doc": string;
                "requires": {
                    "line-join": string;
                }[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "line-sort-key": {
                "type": string;
                "doc": string;
                "sdk-support": {
                    "js": string;
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "visibility": {
                "type": string;
                "values": {
                    "visible": {
                        "doc": string;
                    };
                    "none": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "property-type": string;
            };
        };
        "layout_symbol": {
            "symbol-placement": {
                "type": string;
                "values": {
                    "point": {
                        "doc": string;
                    };
                    "line": {
                        "doc": string;
                    };
                    "line-center": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "`line-center` value": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "symbol-spacing": {
                "type": string;
                "default": number;
                "minimum": number;
                "units": string;
                "doc": string;
                "requires": {
                    "symbol-placement": string;
                }[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "symbol-avoid-edges": {
                "type": string;
                "default": boolean;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "symbol-sort-key": {
                "type": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "symbol-z-order": {
                "type": string;
                "values": {
                    "auto": {
                        "doc": string;
                    };
                    "viewport-y": {
                        "doc": string;
                    };
                    "source": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-allow-overlap": {
                "type": string;
                "default": boolean;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-ignore-placement": {
                "type": string;
                "default": boolean;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-optional": {
                "type": string;
                "default": boolean;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-rotation-alignment": {
                "type": string;
                "values": {
                    "map": {
                        "doc": string;
                    };
                    "viewport": {
                        "doc": string;
                    };
                    "auto": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "`auto` value": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-size": {
                "type": string;
                "default": number;
                "minimum": number;
                "units": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-text-fit": {
                "type": string;
                "values": {
                    "none": {
                        "doc": string;
                    };
                    "width": {
                        "doc": string;
                    };
                    "height": {
                        "doc": string;
                    };
                    "both": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-text-fit-padding": {
                "type": string;
                "value": string;
                "length": number;
                "default": number[];
                "units": string;
                "doc": string;
                "requires": (string | {
                    "icon-text-fit": string[];
                })[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-image": {
                "type": string;
                "doc": string;
                "tokens": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-rotate": {
                "type": string;
                "default": number;
                "period": number;
                "units": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-padding": {
                "type": string;
                "default": number;
                "minimum": number;
                "units": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-keep-upright": {
                "type": string;
                "default": boolean;
                "doc": string;
                "requires": (string | {
                    "icon-rotation-alignment": string;
                    "symbol-placement"?: undefined;
                } | {
                    "symbol-placement": string[];
                    "icon-rotation-alignment"?: undefined;
                })[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-offset": {
                "type": string;
                "value": string;
                "length": number;
                "default": number[];
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-anchor": {
                "type": string;
                "values": {
                    "center": {
                        "doc": string;
                    };
                    "left": {
                        "doc": string;
                    };
                    "right": {
                        "doc": string;
                    };
                    "top": {
                        "doc": string;
                    };
                    "bottom": {
                        "doc": string;
                    };
                    "top-left": {
                        "doc": string;
                    };
                    "top-right": {
                        "doc": string;
                    };
                    "bottom-left": {
                        "doc": string;
                    };
                    "bottom-right": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-pitch-alignment": {
                "type": string;
                "values": {
                    "map": {
                        "doc": string;
                    };
                    "viewport": {
                        "doc": string;
                    };
                    "auto": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-pitch-alignment": {
                "type": string;
                "values": {
                    "map": {
                        "doc": string;
                    };
                    "viewport": {
                        "doc": string;
                    };
                    "auto": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "`auto` value": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-rotation-alignment": {
                "type": string;
                "values": {
                    "map": {
                        "doc": string;
                    };
                    "viewport": {
                        "doc": string;
                    };
                    "auto": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "`auto` value": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-field": {
                "type": string;
                "default": string;
                "tokens": boolean;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-font": {
                "type": string;
                "value": string;
                "default": string[];
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-size": {
                "type": string;
                "default": number;
                "minimum": number;
                "units": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-max-width": {
                "type": string;
                "default": number;
                "minimum": number;
                "units": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-line-height": {
                "type": string;
                "default": number;
                "units": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-letter-spacing": {
                "type": string;
                "default": number;
                "units": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-justify": {
                "type": string;
                "values": {
                    "auto": {
                        "doc": string;
                    };
                    "left": {
                        "doc": string;
                    };
                    "center": {
                        "doc": string;
                    };
                    "right": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "auto": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-radial-offset": {
                "type": string;
                "units": string;
                "default": number;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "requires": string[];
                "property-type": string;
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
            };
            "text-variable-anchor": {
                "type": string;
                "value": string;
                "values": {
                    "center": {
                        "doc": string;
                    };
                    "left": {
                        "doc": string;
                    };
                    "right": {
                        "doc": string;
                    };
                    "top": {
                        "doc": string;
                    };
                    "bottom": {
                        "doc": string;
                    };
                    "top-left": {
                        "doc": string;
                    };
                    "top-right": {
                        "doc": string;
                    };
                    "bottom-left": {
                        "doc": string;
                    };
                    "bottom-right": {
                        "doc": string;
                    };
                };
                "requires": (string | {
                    "symbol-placement": string[];
                })[];
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-anchor": {
                "type": string;
                "values": {
                    "center": {
                        "doc": string;
                    };
                    "left": {
                        "doc": string;
                    };
                    "right": {
                        "doc": string;
                    };
                    "top": {
                        "doc": string;
                    };
                    "bottom": {
                        "doc": string;
                    };
                    "top-left": {
                        "doc": string;
                    };
                    "top-right": {
                        "doc": string;
                    };
                    "bottom-left": {
                        "doc": string;
                    };
                    "bottom-right": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "requires": (string | {
                    "!": string;
                })[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-max-angle": {
                "type": string;
                "default": number;
                "units": string;
                "doc": string;
                "requires": (string | {
                    "symbol-placement": string[];
                })[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-writing-mode": {
                "type": string;
                "value": string;
                "values": {
                    "horizontal": {
                        "doc": string;
                    };
                    "vertical": {
                        "doc": string;
                    };
                };
                "doc": string;
                "requires": (string | {
                    "symbol-placement": string[];
                })[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-rotate": {
                "type": string;
                "default": number;
                "period": number;
                "units": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-padding": {
                "type": string;
                "default": number;
                "minimum": number;
                "units": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-keep-upright": {
                "type": string;
                "default": boolean;
                "doc": string;
                "requires": (string | {
                    "text-rotation-alignment": string;
                    "symbol-placement"?: undefined;
                } | {
                    "symbol-placement": string[];
                    "text-rotation-alignment"?: undefined;
                })[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-transform": {
                "type": string;
                "values": {
                    "none": {
                        "doc": string;
                    };
                    "uppercase": {
                        "doc": string;
                    };
                    "lowercase": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-offset": {
                "type": string;
                "doc": string;
                "value": string;
                "units": string;
                "length": number;
                "default": number[];
                "requires": (string | {
                    "!": string;
                })[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-allow-overlap": {
                "type": string;
                "default": boolean;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-ignore-placement": {
                "type": string;
                "default": boolean;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-optional": {
                "type": string;
                "default": boolean;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "visibility": {
                "type": string;
                "values": {
                    "visible": {
                        "doc": string;
                    };
                    "none": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "property-type": string;
            };
        };
        "layout_raster": {
            "visibility": {
                "type": string;
                "values": {
                    "visible": {
                        "doc": string;
                    };
                    "none": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "property-type": string;
            };
        };
        "layout_hillshade": {
            "visibility": {
                "type": string;
                "values": {
                    "visible": {
                        "doc": string;
                    };
                    "none": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "property-type": string;
            };
        };
        "filter": {
            "type": string;
            "value": string;
            "doc": string;
        };
        "filter_operator": {
            "type": string;
            "values": {
                "==": {
                    "doc": string;
                };
                "!=": {
                    "doc": string;
                };
                ">": {
                    "doc": string;
                };
                ">=": {
                    "doc": string;
                };
                "<": {
                    "doc": string;
                };
                "<=": {
                    "doc": string;
                };
                "in": {
                    "doc": string;
                };
                "!in": {
                    "doc": string;
                };
                "all": {
                    "doc": string;
                };
                "any": {
                    "doc": string;
                };
                "none": {
                    "doc": string;
                };
                "has": {
                    "doc": string;
                };
                "!has": {
                    "doc": string;
                };
            };
            "doc": string;
        };
        "geometry_type": {
            "type": string;
            "values": {
                "Point": {
                    "doc": string;
                };
                "LineString": {
                    "doc": string;
                };
                "Polygon": {
                    "doc": string;
                };
            };
            "doc": string;
        };
        "function": {
            "expression": {
                "type": string;
                "doc": string;
            };
            "stops": {
                "type": string;
                "doc": string;
                "value": string;
            };
            "base": {
                "type": string;
                "default": number;
                "minimum": number;
                "doc": string;
            };
            "property": {
                "type": string;
                "doc": string;
                "default": string;
            };
            "type": {
                "type": string;
                "values": {
                    "identity": {
                        "doc": string;
                    };
                    "exponential": {
                        "doc": string;
                    };
                    "interval": {
                        "doc": string;
                    };
                    "categorical": {
                        "doc": string;
                    };
                };
                "doc": string;
                "default": string;
            };
            "colorSpace": {
                "type": string;
                "values": {
                    "rgb": {
                        "doc": string;
                    };
                    "lab": {
                        "doc": string;
                    };
                    "hcl": {
                        "doc": string;
                    };
                };
                "doc": string;
                "default": string;
            };
            "default": {
                "type": string;
                "required": boolean;
                "doc": string;
            };
        };
        "function_stop": {
            "type": string;
            "minimum": number;
            "maximum": number;
            "value": string[];
            "length": number;
            "doc": string;
        };
        "expression": {
            "type": string;
            "value": string;
            "minimum": number;
            "doc": string;
        };
        "expression_name": {
            "doc": string;
            "type": string;
            "values": {
                "let": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "var": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "literal": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "array": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "at": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "case": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "match": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "coalesce": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "step": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "interpolate": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "interpolate-hcl": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                        };
                    };
                };
                "interpolate-lab": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                        };
                    };
                };
                "ln2": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "pi": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "e": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "typeof": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "string": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "number": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "boolean": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "object": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "collator": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "format": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "image": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                        };
                    };
                };
                "number-format": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                        };
                    };
                };
                "to-string": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "to-number": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "to-boolean": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "to-rgba": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "to-color": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "rgb": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "rgba": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "get": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "has": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "length": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "properties": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "feature-state": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                        };
                    };
                };
                "geometry-type": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "id": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "zoom": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "heatmap-density": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "line-progress": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "accumulated": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                        };
                    };
                };
                "+": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "*": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "-": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "/": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "%": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "^": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "sqrt": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "log10": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "ln": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "log2": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "sin": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "cos": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "tan": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "asin": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "acos": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "atan": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "min": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "max": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "round": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "abs": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "ceil": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "floor": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "==": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                        "collator": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "!=": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                        "collator": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                ">": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                        "collator": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "<": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                        "collator": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                ">=": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                        "collator": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "<=": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                        "collator": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "all": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "any": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "!": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "is-supported-script": {
                    "doc": string;
                    "group": string;
                };
                "upcase": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "downcase": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "concat": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
                "resolved-locale": {
                    "doc": string;
                    "group": string;
                    "sdk-support": {
                        "basic functionality": {
                            "js": string;
                            "android": string;
                            "ios": string;
                            "macos": string;
                        };
                    };
                };
            };
        };
        "light": {
            "anchor": {
                "type": string;
                "default": string;
                "values": {
                    "map": {
                        "doc": string;
                    };
                    "viewport": {
                        "doc": string;
                    };
                };
                "property-type": string;
                "transition": boolean;
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "doc": string;
                "example": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
            };
            "position": {
                "type": string;
                "default": number[];
                "length": number;
                "value": string;
                "property-type": string;
                "transition": boolean;
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "doc": string;
                "example": number[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
            };
            "color": {
                "type": string;
                "property-type": string;
                "default": string;
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "transition": boolean;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
            };
            "intensity": {
                "type": string;
                "property-type": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "transition": boolean;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
            };
        };
        "paint": string[];
        "paint_fill": {
            "fill-antialias": {
                "type": string;
                "default": boolean;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "fill-opacity": {
                "type": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "doc": string;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "fill-color": {
                "type": string;
                "default": string;
                "doc": string;
                "transition": boolean;
                "requires": {
                    "!": string;
                }[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "fill-outline-color": {
                "type": string;
                "doc": string;
                "transition": boolean;
                "requires": ({
                    "!": string;
                    "fill-antialias"?: undefined;
                } | {
                    "fill-antialias": boolean;
                    "!"?: undefined;
                })[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "fill-translate": {
                "type": string;
                "value": string;
                "length": number;
                "default": number[];
                "transition": boolean;
                "units": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "fill-translate-anchor": {
                "type": string;
                "values": {
                    "map": {
                        "doc": string;
                    };
                    "viewport": {
                        "doc": string;
                    };
                };
                "doc": string;
                "default": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "fill-pattern": {
                "type": string;
                "transition": boolean;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "macos": string;
                        "ios": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
        };
        "paint_fill-extrusion": {
            "fill-extrusion-opacity": {
                "type": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "doc": string;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "fill-extrusion-color": {
                "type": string;
                "default": string;
                "doc": string;
                "transition": boolean;
                "requires": {
                    "!": string;
                }[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "fill-extrusion-translate": {
                "type": string;
                "value": string;
                "length": number;
                "default": number[];
                "transition": boolean;
                "units": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "fill-extrusion-translate-anchor": {
                "type": string;
                "values": {
                    "map": {
                        "doc": string;
                    };
                    "viewport": {
                        "doc": string;
                    };
                };
                "doc": string;
                "default": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "fill-extrusion-pattern": {
                "type": string;
                "transition": boolean;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "macos": string;
                        "ios": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "fill-extrusion-height": {
                "type": string;
                "default": number;
                "minimum": number;
                "units": string;
                "doc": string;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "fill-extrusion-base": {
                "type": string;
                "default": number;
                "minimum": number;
                "units": string;
                "doc": string;
                "transition": boolean;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "fill-extrusion-vertical-gradient": {
                "type": string;
                "default": boolean;
                "doc": string;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
        };
        "paint_line": {
            "line-opacity": {
                "type": string;
                "doc": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "line-color": {
                "type": string;
                "doc": string;
                "default": string;
                "transition": boolean;
                "requires": {
                    "!": string;
                }[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "line-translate": {
                "type": string;
                "value": string;
                "length": number;
                "default": number[];
                "transition": boolean;
                "units": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "line-translate-anchor": {
                "type": string;
                "values": {
                    "map": {
                        "doc": string;
                    };
                    "viewport": {
                        "doc": string;
                    };
                };
                "doc": string;
                "default": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "line-width": {
                "type": string;
                "default": number;
                "minimum": number;
                "transition": boolean;
                "units": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "line-gap-width": {
                "type": string;
                "default": number;
                "minimum": number;
                "doc": string;
                "transition": boolean;
                "units": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "line-offset": {
                "type": string;
                "default": number;
                "doc": string;
                "transition": boolean;
                "units": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "line-blur": {
                "type": string;
                "default": number;
                "minimum": number;
                "transition": boolean;
                "units": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "line-dasharray": {
                "type": string;
                "value": string;
                "doc": string;
                "minimum": number;
                "transition": boolean;
                "units": string;
                "requires": {
                    "!": string;
                }[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "line-pattern": {
                "type": string;
                "transition": boolean;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "macos": string;
                        "ios": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "line-gradient": {
                "type": string;
                "doc": string;
                "transition": boolean;
                "requires": ({
                    "!": string;
                    "source"?: undefined;
                    "has"?: undefined;
                } | {
                    "source": string;
                    "has": {
                        "lineMetrics": boolean;
                    };
                    "!"?: undefined;
                })[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
        };
        "paint_circle": {
            "circle-radius": {
                "type": string;
                "default": number;
                "minimum": number;
                "transition": boolean;
                "units": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "circle-color": {
                "type": string;
                "default": string;
                "doc": string;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "circle-blur": {
                "type": string;
                "default": number;
                "doc": string;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "circle-opacity": {
                "type": string;
                "doc": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "circle-translate": {
                "type": string;
                "value": string;
                "length": number;
                "default": number[];
                "transition": boolean;
                "units": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "circle-translate-anchor": {
                "type": string;
                "values": {
                    "map": {
                        "doc": string;
                    };
                    "viewport": {
                        "doc": string;
                    };
                };
                "doc": string;
                "default": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "circle-pitch-scale": {
                "type": string;
                "values": {
                    "map": {
                        "doc": string;
                    };
                    "viewport": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "circle-pitch-alignment": {
                "type": string;
                "values": {
                    "map": {
                        "doc": string;
                    };
                    "viewport": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "circle-stroke-width": {
                "type": string;
                "default": number;
                "minimum": number;
                "transition": boolean;
                "units": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "circle-stroke-color": {
                "type": string;
                "default": string;
                "doc": string;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "circle-stroke-opacity": {
                "type": string;
                "doc": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
        };
        "paint_heatmap": {
            "heatmap-radius": {
                "type": string;
                "default": number;
                "minimum": number;
                "transition": boolean;
                "units": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "heatmap-weight": {
                "type": string;
                "default": number;
                "minimum": number;
                "transition": boolean;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "heatmap-intensity": {
                "type": string;
                "default": number;
                "minimum": number;
                "transition": boolean;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "heatmap-color": {
                "type": string;
                "default": (string | number | string[])[];
                "doc": string;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "heatmap-opacity": {
                "type": string;
                "doc": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
        };
        "paint_symbol": {
            "icon-opacity": {
                "doc": string;
                "type": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "transition": boolean;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-color": {
                "type": string;
                "default": string;
                "transition": boolean;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-halo-color": {
                "type": string;
                "default": string;
                "transition": boolean;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-halo-width": {
                "type": string;
                "default": number;
                "minimum": number;
                "transition": boolean;
                "units": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-halo-blur": {
                "type": string;
                "default": number;
                "minimum": number;
                "transition": boolean;
                "units": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-translate": {
                "type": string;
                "value": string;
                "length": number;
                "default": number[];
                "transition": boolean;
                "units": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "icon-translate-anchor": {
                "type": string;
                "values": {
                    "map": {
                        "doc": string;
                    };
                    "viewport": {
                        "doc": string;
                    };
                };
                "doc": string;
                "default": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-opacity": {
                "type": string;
                "doc": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "transition": boolean;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-color": {
                "type": string;
                "doc": string;
                "default": string;
                "transition": boolean;
                "overridable": boolean;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-halo-color": {
                "type": string;
                "default": string;
                "transition": boolean;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-halo-width": {
                "type": string;
                "default": number;
                "minimum": number;
                "transition": boolean;
                "units": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-halo-blur": {
                "type": string;
                "default": number;
                "minimum": number;
                "transition": boolean;
                "units": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-translate": {
                "type": string;
                "value": string;
                "length": number;
                "default": number[];
                "transition": boolean;
                "units": string;
                "doc": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "text-translate-anchor": {
                "type": string;
                "values": {
                    "map": {
                        "doc": string;
                    };
                    "viewport": {
                        "doc": string;
                    };
                };
                "doc": string;
                "default": string;
                "requires": string[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
        };
        "paint_raster": {
            "raster-opacity": {
                "type": string;
                "doc": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "raster-hue-rotate": {
                "type": string;
                "default": number;
                "period": number;
                "transition": boolean;
                "units": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "raster-brightness-min": {
                "type": string;
                "doc": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "raster-brightness-max": {
                "type": string;
                "doc": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "raster-saturation": {
                "type": string;
                "doc": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "raster-contrast": {
                "type": string;
                "doc": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "raster-resampling": {
                "type": string;
                "doc": string;
                "values": {
                    "linear": {
                        "doc": string;
                    };
                    "nearest": {
                        "doc": string;
                    };
                };
                "default": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "raster-fade-duration": {
                "type": string;
                "default": number;
                "minimum": number;
                "transition": boolean;
                "units": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
        };
        "paint_hillshade": {
            "hillshade-illumination-direction": {
                "type": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "doc": string;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "hillshade-illumination-anchor": {
                "type": string;
                "values": {
                    "map": {
                        "doc": string;
                    };
                    "viewport": {
                        "doc": string;
                    };
                };
                "default": string;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "hillshade-exaggeration": {
                "type": string;
                "doc": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "hillshade-shadow-color": {
                "type": string;
                "default": string;
                "doc": string;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "hillshade-highlight-color": {
                "type": string;
                "default": string;
                "doc": string;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "hillshade-accent-color": {
                "type": string;
                "default": string;
                "doc": string;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                    "data-driven styling": {};
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
        };
        "paint_background": {
            "background-color": {
                "type": string;
                "default": string;
                "doc": string;
                "transition": boolean;
                "requires": {
                    "!": string;
                }[];
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "background-pattern": {
                "type": string;
                "transition": boolean;
                "doc": string;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
            "background-opacity": {
                "type": string;
                "default": number;
                "minimum": number;
                "maximum": number;
                "doc": string;
                "transition": boolean;
                "sdk-support": {
                    "basic functionality": {
                        "js": string;
                        "android": string;
                        "ios": string;
                        "macos": string;
                    };
                };
                "expression": {
                    "interpolated": boolean;
                    "parameters": string[];
                };
                "property-type": string;
            };
        };
        "transition": {
            "duration": {
                "type": string;
                "default": number;
                "minimum": number;
                "units": string;
                "doc": string;
            };
            "delay": {
                "type": string;
                "default": number;
                "minimum": number;
                "units": string;
                "doc": string;
            };
        };
        "property-type": {
            "data-driven": {
                "type": string;
                "doc": string;
            };
            "cross-faded": {
                "type": string;
                "doc": string;
            };
            "cross-faded-data-driven": {
                "type": string;
                "doc": string;
            };
            "color-ramp": {
                "type": string;
                "doc": string;
            };
            "data-constant": {
                "type": string;
                "doc": string;
            };
            "constant": {
                "type": string;
                "doc": string;
            };
        };
    }): any[];
    export const source: (...args: any[]) => any[];
    export const light: (...args: any[]) => any[];
    export const layer: (...args: any[]) => any[];
    export const filter: (...args: any[]) => any[];
    export const paintProperty: (...args: any[]) => any[];
    export const layoutProperty: (...args: any[]) => any[];
}

declare module 'mapbox-gl/style-spec/validate_mapbox_api_supported' {
    import ValidationError from 'mapbox-gl/style-spec/error/validation_error';
    export default function validateMapboxApiSupported(style: object): Array<ValidationError | undefined | null>;
}

declare module 'mapbox-gl/util/throttled_invoker' {
    class ThrottledInvoker {
        _channel: MessageChannel;
        _triggered: boolean;
        _callback: Function;
        constructor(callback: Function);
        trigger(): void;
        remove(): void;
    }
    export default ThrottledInvoker;
}

declare module 'mapbox-gl/util/web_worker' {
    import { WorkerSource } from 'mapbox-gl/source/worker_source';
    type Class<T> = new (...args: any) => T;
    type MessageListener = (a: {
        data: object;
    }) => unknown;
    export interface WorkerInterface {
        addEventListener(type: "message", listener: MessageListener): void;
        removeEventListener(type: "message", listener: MessageListener): void;
        postMessage(message: any): void;
        terminate(): void;
    }
    export interface WorkerGlobalScopeInterface {
        importScripts(...urls: Array<string>): void;
        registerWorkerSource: (b: string, a: Class<WorkerSource>) => void;
        registerRTLTextPlugin: (a: any) => void;
    }
    function WebWorker(): WorkerInterface;
    namespace WebWorker {
        var Worker: typeof import("../source/worker").default;
    }
    export default WebWorker;
}

declare module 'mapbox-gl/source/tile_bounds' {
    import LngLatBounds from 'mapbox-gl/geo/lng_lat_bounds';
    import { CanonicalTileID } from 'mapbox-gl/source/tile_id';
    class TileBounds {
        bounds: LngLatBounds;
        minzoom: number;
        maxzoom: number;
        constructor(bounds: [number, number, number, number], minzoom?: number | null, maxzoom?: number | null);
        validateBounds(bounds: [number, number, number, number]): number[];
        contains(tileID: CanonicalTileID): boolean;
    }
    export default TileBounds;
}

declare module 'mapbox-gl/source/canvas_source' {
    import ImageSource from 'mapbox-gl/source/image_source';
    import Map from 'mapbox-gl/ui/map';
    import Dispatcher from 'mapbox-gl/util/dispatcher';
    import { Evented } from 'mapbox-gl/util/evented';
    export type CanvasSourceSpecification = {
        "type": "canvas";
        "coordinates": [[number, number], [number, number], [number, number], [number, number]];
        "animate"?: boolean;
        "canvas": string | HTMLCanvasElement;
    };
    class CanvasSource extends ImageSource {
        options: CanvasSourceSpecification;
        animate: boolean;
        canvas: HTMLCanvasElement;
        width: number;
        height: number;
        play: () => void;
        pause: () => void;
        _playing: boolean;
        constructor(id: string, options: CanvasSourceSpecification, dispatcher: Dispatcher, eventedParent: Evented);
        load(): void;
        getCanvas(): HTMLCanvasElement;
        onAdd(map: Map): void;
        onRemove(): void;
        prepare(): void;
        serialize(): object;
        hasTransition(): boolean;
        _hasInvalidDimensions(): boolean;
    }
    export default CanvasSource;
}

declare module 'mapbox-gl/symbol/anchor' {
    import Point from '@mapbox/point-geometry';
    class Anchor extends Point {
        angle: any;
        segment: number | void;
        constructor(x: number, y: number, angle: number, segment?: number);
        clone(): any;
    }
    export default Anchor;
}

declare module 'mapbox-gl/style/style_layer/symbol_style_layer' {
    import StyleLayer from 'mapbox-gl/style/style_layer';
    import SymbolBucket from 'mapbox-gl/data/bucket/symbol_bucket';
    import { Transitionable, Transitioning, Layout, PossiblyEvaluated, PropertyValue } from 'mapbox-gl/style/properties';
    import { BucketParameters } from 'mapbox-gl/data/bucket';
    import { LayoutProps, PaintProps } from 'mapbox-gl/style/style_layer/symbol_style_layer_properties';
    import EvaluationParameters from 'mapbox-gl/style/evaluation_parameters';
    import { LayerSpecification } from 'mapbox-gl/style-spec/types';
    import { Feature } from 'mapbox-gl/style-spec/expression';
    class SymbolStyleLayer extends StyleLayer {
        _unevaluatedLayout: Layout<LayoutProps>;
        layout: PossiblyEvaluated<LayoutProps>;
        _transitionablePaint: Transitionable<PaintProps>;
        _transitioningPaint: Transitioning<PaintProps>;
        paint: PossiblyEvaluated<PaintProps>;
        constructor(layer: LayerSpecification);
        recalculate(parameters: EvaluationParameters, availableImages: Array<string>): void;
        getValueAndResolveTokens(name: any, feature: Feature, availableImages: Array<string>): any;
        createBucket(parameters: BucketParameters<any>): SymbolBucket;
        queryRadius(): number;
        queryIntersectsFeature(): boolean;
        _setPaintOverrides(): void;
        _handleOverridablePaintPropertyUpdate<T, R>(name: string, oldValue: PropertyValue<T, R>, newValue: PropertyValue<T, R>): boolean;
        static hasPaintOverride(layout: PossiblyEvaluated<LayoutProps>, propertyName: string): boolean;
        static hasPaintOverrides(layout: PossiblyEvaluated<LayoutProps>): boolean;
    }
    export default SymbolStyleLayer;
}

declare module 'mapbox-gl/symbol/quads' {
    import Anchor from 'mapbox-gl/symbol/anchor';
    import { PositionedIcon, Shaping } from 'mapbox-gl/symbol/shaping';
    import SymbolStyleLayer from 'mapbox-gl/style/style_layer/symbol_style_layer';
    import { Feature } from 'mapbox-gl/style-spec/expression';
    import { GlyphPosition } from 'mapbox-gl/render/glyph_atlas';
    export type SymbolQuad = {
        tl: typeof import("@mapbox/point-geometry").default;
        tr: typeof import("@mapbox/point-geometry").default;
        bl: typeof import("@mapbox/point-geometry").default;
        br: typeof import("@mapbox/point-geometry").default;
        tex: {
            x: number;
            y: number;
            w: number;
            h: number;
        };
        writingMode: any | void;
        glyphOffset: [number, number];
        sectionIndex: number;
    };
    export function getIconQuads(shapedIcon: PositionedIcon, iconRotate: number): Array<SymbolQuad>;
    export function getGlyphQuads(anchor: Anchor, shaping: Shaping, textOffset: [number, number], layer: SymbolStyleLayer, alongLine: boolean, feature: Feature, positions: {
        [x: string]: {
            [x: number]: GlyphPosition;
        };
    }, allowVerticalPlacement: boolean): Array<SymbolQuad>;
}

declare module 'mapbox-gl/symbol/symbol_size' {
    import { PropertyValue, PossiblyEvaluatedPropertyValue } from 'mapbox-gl/style/properties';
    import { InterpolationType } from 'mapbox-gl/style-spec/expression/definitions/interpolate';
    const SIZE_PACK_FACTOR = 256;
    export { getSizeData, evaluateSizeForFeature, evaluateSizeForZoom, SIZE_PACK_FACTOR };
    export type SizeData = {
        kind: "constant";
        layoutSize: number;
    } | {
        kind: "source";
    } | {
        kind: "camera";
        minZoom: number;
        maxZoom: number;
        minSize: number;
        maxSize: number;
        interpolationType: InterpolationType | undefined | null;
    } | {
        kind: "composite";
        minZoom: number;
        maxZoom: number;
        interpolationType: InterpolationType | undefined | null;
    };
    function getSizeData(tileZoom: number, value: PropertyValue<number, PossiblyEvaluatedPropertyValue<number>>): SizeData;
    function evaluateSizeForFeature(sizeData: SizeData, { uSize, uSizeT }: {
        uSize: number;
        uSizeT: number;
    }, { lowerSize, upperSize }: {
        lowerSize: number;
        upperSize: number;
    }): number;
    function evaluateSizeForZoom(sizeData: SizeData, zoom: number): {
        uSizeT: number;
        uSize: number;
    };
}

declare module 'mapbox-gl/symbol/grid_index' {
    class GridIndex {
        circleKeys: Array<any>;
        boxKeys: Array<any>;
        boxCells: Array<Array<number>>;
        circleCells: Array<Array<number>>;
        bboxes: Array<number>;
        circles: Array<number>;
        xCellCount: number;
        yCellCount: number;
        width: number;
        height: number;
        xScale: number;
        yScale: number;
        boxUid: number;
        circleUid: number;
        constructor(width: number, height: number, cellSize: number);
        keysLength(): number;
        insert(key: any, x1: number, y1: number, x2: number, y2: number): void;
        insertCircle(key: any, x: number, y: number, radius: number): void;
        _insertBoxCell(x1: number, y1: number, x2: number, y2: number, cellIndex: number, uid: number): void;
        _insertCircleCell(x1: number, y1: number, x2: number, y2: number, cellIndex: number, uid: number): void;
        _query(x1: number, y1: number, x2: number, y2: number, hitTest: boolean, predicate?: any): boolean | any[];
        _queryCircle(x: number, y: number, radius: number, hitTest: boolean, predicate?: any): boolean | any[];
        query(x1: number, y1: number, x2: number, y2: number, predicate?: any): Array<any>;
        hitTest(x1: number, y1: number, x2: number, y2: number, predicate?: any): boolean;
        hitTestCircle(x: number, y: number, radius: number, predicate?: any): boolean;
        _queryCell(x1: number, y1: number, x2: number, y2: number, cellIndex: number, result: any, queryArgs: any, predicate?: any): boolean;
        _queryCellCircle(x1: number, y1: number, x2: number, y2: number, cellIndex: number, result: any, queryArgs: any, predicate?: any): boolean;
        _forEachCell(x1: number, y1: number, x2: number, y2: number, fn: any, arg1: any, arg2?: any, predicate?: any): void;
        _convertToXCellCoord(x: number): number;
        _convertToYCellCoord(y: number): number;
        _circlesCollide(x1: number, y1: number, r1: number, x2: number, y2: number, r2: number): boolean;
        _circleAndRectCollide(circleX: number, circleY: number, radius: number, x1: number, y1: number, x2: number, y2: number): boolean;
    }
    export default GridIndex;
}

declare module 'mapbox-gl/util/dictionary_coder' {
    class DictionaryCoder {
        _stringToNumber: {
            [x: string]: number;
        };
        _numberToString: Array<string>;
        constructor(strings: Array<string>);
        encode(string: string): number;
        decode(n: number): string;
    }
    export default DictionaryCoder;
}

declare module 'mapbox-gl/symbol/shaping' {
    import { StyleGlyph } from 'mapbox-gl/style/style_glyph';
    import { ImagePosition } from 'mapbox-gl/render/image_atlas';
    import Formatted from 'mapbox-gl/style-spec/expression/types/formatted';
    const WritingMode: {
        horizontal: number;
        vertical: number;
        horizontalOnly: number;
    };
    export { shapeText, shapeIcon, fitIconToText, getAnchorAlignment, WritingMode };
    export type PositionedGlyph = {
        glyph: number;
        x: number;
        y: number;
        vertical: boolean;
        scale: number;
        fontStack: string;
        sectionIndex: number;
    };
    export type Shaping = {
        positionedGlyphs: Array<PositionedGlyph>;
        top: number;
        bottom: number;
        left: number;
        right: number;
        writingMode: 1 | 2;
        lineCount: number;
        text: string;
        yOffset: number;
    };
    export type SymbolAnchor = "center" | "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right";
    export type TextJustify = "left" | "center" | "right";
    function shapeText(text: Formatted, glyphs: {
        [x: string]: {
            [x: number]: StyleGlyph | undefined | null;
        };
    }, defaultFontStack: string, maxWidth: number, lineHeight: number, textAnchor: SymbolAnchor, textJustify: TextJustify, spacing: number, translate: [number, number], writingMode: 1 | 2, allowVerticalPlacement: boolean, symbolPlacement: string): Shaping | false;
    function getAnchorAlignment(anchor: SymbolAnchor): {
        horizontalAlign: number;
        verticalAlign: number;
    };
    export type PositionedIcon = {
        image: ImagePosition;
        top: number;
        bottom: number;
        left: number;
        right: number;
    };
    function shapeIcon(image: ImagePosition, iconOffset: [number, number], iconAnchor: SymbolAnchor): PositionedIcon;
    function fitIconToText(shapedIcon: PositionedIcon, shapedText: Shaping, textFit: string, padding: [number, number, number, number], iconOffset: [number, number], fontScale: number): PositionedIcon;
}

declare module 'mapbox-gl/render/glyph_atlas' {
    import { AlphaImage } from 'mapbox-gl/util/image';
    import { GlyphMetrics, StyleGlyph } from 'mapbox-gl/style/style_glyph';
    type Rect = {
        x: number;
        y: number;
        w: number;
        h: number;
    };
    export type GlyphPosition = {
        rect: Rect;
        metrics: GlyphMetrics;
    };
    export type GlyphPositions = {
        [x: string]: {
            [x: number]: GlyphPosition;
        };
    };
    export default class GlyphAtlas {
        image: AlphaImage;
        positions: GlyphPositions;
        constructor(stacks: {
            [x: string]: {
                [x: number]: StyleGlyph | undefined | null;
            };
        });
    }
    export {};
}

declare module 'mapbox-gl/types/transferable' {
    export type Transferable = ArrayBuffer | MessagePort | ImageBitmap;
}

declare module 'mapbox-gl/style/style_layer/circle_style_layer' {
    import StyleLayer from 'mapbox-gl/style/style_layer';
    import CircleBucket from 'mapbox-gl/data/bucket/circle_bucket';
    import { Transitionable, Transitioning, Layout, PossiblyEvaluated } from 'mapbox-gl/style/properties';
    import { FeatureState } from 'mapbox-gl/style-spec/expression';
    import Transform from 'mapbox-gl/geo/transform';
    import { Bucket, BucketParameters } from 'mapbox-gl/data/bucket';
    import { LayoutProps, PaintProps } from 'mapbox-gl/style/style_layer/circle_style_layer_properties';
    import { LayerSpecification } from 'mapbox-gl/style-spec/types';
    class CircleStyleLayer extends StyleLayer {
        _unevaluatedLayout: Layout<LayoutProps>;
        layout: PossiblyEvaluated<LayoutProps>;
        _transitionablePaint: Transitionable<PaintProps>;
        _transitioningPaint: Transitioning<PaintProps>;
        paint: PossiblyEvaluated<PaintProps>;
        constructor(layer: LayerSpecification);
        createBucket(parameters: BucketParameters<any>): CircleBucket<any>;
        queryRadius(bucket: Bucket): number;
        queryIntersectsFeature(queryGeometry: Array<typeof import("@mapbox/point-geometry").default>, feature: typeof import("@mapbox/vector-tile").VectorTileFeature, featureState: FeatureState, geometry: Array<Array<typeof import("@mapbox/point-geometry").default>>, zoom: number, transform: Transform, pixelsToTileUnits: number, pixelPosMatrix: Float32Array): boolean;
    }
    export default CircleStyleLayer;
}

declare module 'mapbox-gl/style/style_layer/fill_style_layer' {
    import StyleLayer from 'mapbox-gl/style/style_layer';
    import FillBucket from 'mapbox-gl/data/bucket/fill_bucket';
    import { Transitionable, Transitioning, Layout, PossiblyEvaluated } from 'mapbox-gl/style/properties';
    import { FeatureState } from 'mapbox-gl/style-spec/expression';
    import { BucketParameters } from 'mapbox-gl/data/bucket';
    import { LayoutProps, PaintProps } from 'mapbox-gl/style/style_layer/fill_style_layer_properties';
    import EvaluationParameters from 'mapbox-gl/style/evaluation_parameters';
    import Transform from 'mapbox-gl/geo/transform';
    import { LayerSpecification } from 'mapbox-gl/style-spec/types';
    class FillStyleLayer extends StyleLayer {
        _unevaluatedLayout: Layout<LayoutProps>;
        layout: PossiblyEvaluated<LayoutProps>;
        _transitionablePaint: Transitionable<PaintProps>;
        _transitioningPaint: Transitioning<PaintProps>;
        paint: PossiblyEvaluated<PaintProps>;
        constructor(layer: LayerSpecification);
        recalculate(parameters: EvaluationParameters, availableImages: Array<string>): void;
        createBucket(parameters: BucketParameters<any>): FillBucket;
        queryRadius(): number;
        queryIntersectsFeature(queryGeometry: Array<typeof import("@mapbox/point-geometry").default>, feature: typeof import("@mapbox/vector-tile").VectorTileFeature, featureState: FeatureState, geometry: Array<Array<typeof import("@mapbox/point-geometry").default>>, zoom: number, transform: Transform, pixelsToTileUnits: number): boolean;
        isTileClipped(): boolean;
    }
    export default FillStyleLayer;
}

declare module 'mapbox-gl/style/style_layer/fill_extrusion_style_layer' {
    import StyleLayer from 'mapbox-gl/style/style_layer';
    import FillExtrusionBucket from 'mapbox-gl/data/bucket/fill_extrusion_bucket';
    import { Transitionable, Transitioning, PossiblyEvaluated } from 'mapbox-gl/style/properties';
    import { FeatureState } from 'mapbox-gl/style-spec/expression';
    import { BucketParameters } from 'mapbox-gl/data/bucket';
    import { PaintProps } from 'mapbox-gl/style/style_layer/fill_extrusion_style_layer_properties';
    import Transform from 'mapbox-gl/geo/transform';
    import { LayerSpecification } from 'mapbox-gl/style-spec/types';
    class FillExtrusionStyleLayer extends StyleLayer {
        _transitionablePaint: Transitionable<PaintProps>;
        _transitioningPaint: Transitioning<PaintProps>;
        paint: PossiblyEvaluated<PaintProps>;
        constructor(layer: LayerSpecification);
        createBucket(parameters: BucketParameters<FillExtrusionStyleLayer>): FillExtrusionBucket;
        queryRadius(): number;
        is3D(): boolean;
        queryIntersectsFeature(queryGeometry: Array<typeof import("@mapbox/point-geometry").default>, feature: typeof import("@mapbox/vector-tile").VectorTileFeature, featureState: FeatureState, geometry: Array<Array<typeof import("@mapbox/point-geometry").default>>, zoom: number, transform: Transform, pixelsToTileUnits: number, pixelPosMatrix: Float32Array): boolean | number;
    }
    export default FillExtrusionStyleLayer;
}

declare module 'mapbox-gl/style/style_layer/heatmap_style_layer' {
    import StyleLayer from 'mapbox-gl/style/style_layer';
    import HeatmapBucket from 'mapbox-gl/data/bucket/heatmap_bucket';
    import { RGBAImage } from 'mapbox-gl/util/image';
    import { Transitionable, Transitioning, PossiblyEvaluated } from 'mapbox-gl/style/properties';
    import Texture from 'mapbox-gl/render/texture';
    import Framebuffer from 'mapbox-gl/gl/framebuffer';
    import { PaintProps } from 'mapbox-gl/style/style_layer/heatmap_style_layer_properties';
    import { LayerSpecification } from 'mapbox-gl/style-spec/types';
    class HeatmapStyleLayer extends StyleLayer {
        heatmapFbo: Framebuffer | undefined | null;
        colorRamp: RGBAImage;
        colorRampTexture: Texture | undefined | null;
        _transitionablePaint: Transitionable<PaintProps>;
        _transitioningPaint: Transitioning<PaintProps>;
        paint: PossiblyEvaluated<PaintProps>;
        createBucket(options: any): HeatmapBucket;
        constructor(layer: LayerSpecification);
        _handleSpecialPaintPropertyUpdate(name: string): void;
        _updateColorRamp(): void;
        resize(): void;
        queryRadius(): number;
        queryIntersectsFeature(): boolean;
        hasOffscreenPass(): boolean;
    }
    export default HeatmapStyleLayer;
}

declare module 'mapbox-gl/style/style_layer/hillshade_style_layer' {
    import StyleLayer from 'mapbox-gl/style/style_layer';
    import { Transitionable, Transitioning, PossiblyEvaluated } from 'mapbox-gl/style/properties';
    import { PaintProps } from 'mapbox-gl/style/style_layer/hillshade_style_layer_properties';
    import { LayerSpecification } from 'mapbox-gl/style-spec/types';
    class HillshadeStyleLayer extends StyleLayer {
        _transitionablePaint: Transitionable<PaintProps>;
        _transitioningPaint: Transitioning<PaintProps>;
        paint: PossiblyEvaluated<PaintProps>;
        constructor(layer: LayerSpecification);
        hasOffscreenPass(): boolean;
    }
    export default HillshadeStyleLayer;
}

declare module 'mapbox-gl/style/style_layer/line_style_layer' {
    import StyleLayer from 'mapbox-gl/style/style_layer';
    import LineBucket from 'mapbox-gl/data/bucket/line_bucket';
    import { RGBAImage } from 'mapbox-gl/util/image';
    import EvaluationParameters from 'mapbox-gl/style/evaluation_parameters';
    import { Transitionable, Transitioning, Layout, PossiblyEvaluated } from 'mapbox-gl/style/properties';
    import { FeatureState } from 'mapbox-gl/style-spec/expression';
    import { Bucket, BucketParameters } from 'mapbox-gl/data/bucket';
    import { LayoutProps, PaintProps } from 'mapbox-gl/style/style_layer/line_style_layer_properties';
    import Transform from 'mapbox-gl/geo/transform';
    import Texture from 'mapbox-gl/render/texture';
    import { LayerSpecification } from 'mapbox-gl/style-spec/types';
    class LineStyleLayer extends StyleLayer {
        _unevaluatedLayout: Layout<LayoutProps>;
        layout: PossiblyEvaluated<LayoutProps>;
        gradient: RGBAImage | undefined | null;
        gradientTexture: Texture | undefined | null;
        _transitionablePaint: Transitionable<PaintProps>;
        _transitioningPaint: Transitioning<PaintProps>;
        paint: PossiblyEvaluated<PaintProps>;
        constructor(layer: LayerSpecification);
        _handleSpecialPaintPropertyUpdate(name: string): void;
        _updateGradient(): void;
        recalculate(parameters: EvaluationParameters, availableImages: Array<string>): void;
        createBucket(parameters: BucketParameters<any>): LineBucket;
        queryRadius(bucket: Bucket): number;
        queryIntersectsFeature(queryGeometry: Array<typeof import("@mapbox/point-geometry").default>, feature: typeof import("@mapbox/vector-tile").VectorTileFeature, featureState: FeatureState, geometry: Array<Array<typeof import("@mapbox/point-geometry").default>>, zoom: number, transform: Transform, pixelsToTileUnits: number): boolean;
        isTileClipped(): boolean;
    }
    export default LineStyleLayer;
}

declare module 'mapbox-gl/style-spec/expression/index' {
    import ParsingError from 'mapbox-gl/style-spec/expression/parsing_error';
    import EvaluationContext from 'mapbox-gl/style-spec/expression/evaluation_context';
    import { EvaluationKind } from 'mapbox-gl/style-spec/expression/types';
    import { Value } from 'mapbox-gl/style-spec/expression/values';
    import { Expression } from 'mapbox-gl/style-spec/expression/expression';
    import { StylePropertySpecification } from 'mapbox-gl/style-spec/style-spec';
    import { Result } from 'mapbox-gl/style-spec/util/result';
    import { InterpolationType } from 'mapbox-gl/style-spec/expression/definitions/interpolate';
    import { PropertyValueSpecification } from 'mapbox-gl/style-spec/types';
    import { FormattedSection } from 'mapbox-gl/style-spec/expression/types/formatted';
    export type Feature = {
        readonly type: 1 | 2 | 3 | "Unknown" | "Point" | "MultiPoint" | "LineString" | "MultiLineString" | "Polygon" | "MultiPolygon";
        readonly id?: any;
        readonly properties: {
            [x: string]: any;
        };
        readonly patterns?: {
            [x: string]: {
                "min": string;
                "mid": string;
                "max": string;
            };
        };
    };
    export type FeatureState = {
        [x: string]: any;
    };
    export type GlobalProperties = Readonly<{
        zoom: number;
        heatmapDensity?: number;
        lineProgress?: number;
        isSupportedScript?: (a: string) => boolean;
        accumulated?: Value;
    }>;
    export class StyleExpression {
        expression: Expression;
        _evaluator: EvaluationContext;
        _defaultValue: Value;
        _warningHistory: {
            [key: string]: boolean;
        };
        _enumValues: {
            [x: string]: any;
        } | undefined | null;
        constructor(expression: Expression, propertySpec?: StylePropertySpecification | null);
        evaluateWithoutErrorHandling(globals: GlobalProperties, feature?: Feature, featureState?: FeatureState, availableImages?: Array<string>, formattedSection?: FormattedSection): any;
        evaluate(globals: GlobalProperties, feature?: Feature, featureState?: FeatureState, availableImages?: Array<string>, formattedSection?: FormattedSection): any;
    }
    export function isExpression(expression: unknown): boolean;
    export function createExpression(expression: unknown, propertySpec?: StylePropertySpecification | null): Result<StyleExpression, Array<ParsingError>>;
    export class ZoomConstantExpression<Kind extends EvaluationKind> {
        kind: Kind;
        isStateDependent: boolean;
        _styleExpression: StyleExpression;
        constructor(kind: Kind, expression: StyleExpression);
        evaluateWithoutErrorHandling(globals: GlobalProperties, feature?: Feature, featureState?: FeatureState, availableImages?: Array<string>, formattedSection?: FormattedSection): any;
        evaluate(globals: GlobalProperties, feature?: Feature, featureState?: FeatureState, availableImages?: Array<string>, formattedSection?: FormattedSection): any;
    }
    export class ZoomDependentExpression<Kind extends EvaluationKind> {
        kind: Kind;
        zoomStops: Array<number>;
        isStateDependent: boolean;
        _styleExpression: StyleExpression;
        interpolationType: InterpolationType | undefined | null;
        constructor(kind: Kind, expression: StyleExpression, zoomStops: Array<number>, interpolationType?: InterpolationType);
        evaluateWithoutErrorHandling(globals: GlobalProperties, feature?: Feature, featureState?: FeatureState, availableImages?: Array<string>, formattedSection?: FormattedSection): any;
        evaluate(globals: GlobalProperties, feature?: Feature, featureState?: FeatureState, availableImages?: Array<string>, formattedSection?: FormattedSection): any;
        interpolationFactor(input: number, lower: number, upper: number): number;
    }
    export type ConstantExpression = {
        kind: "constant";
        readonly evaluate: (globals: GlobalProperties, feature?: Feature, featureState?: FeatureState, availableImages?: Array<string>) => any;
    };
    export type SourceExpression = {
        kind: "source";
        isStateDependent: boolean;
        readonly evaluate: (globals: GlobalProperties, feature?: Feature, featureState?: FeatureState, availableImages?: Array<string>, formattedSection?: FormattedSection) => any;
    };
    export type CameraExpression = {
        kind: "camera";
        readonly evaluate: (globals: GlobalProperties, feature?: Feature, featureState?: FeatureState, availableImages?: Array<string>) => any;
        readonly interpolationFactor: (input: number, lower: number, upper: number) => number;
        zoomStops: Array<number>;
        interpolationType: InterpolationType | undefined | null;
    };
    export type CompositeExpression = {
        kind: "composite";
        isStateDependent: boolean;
        readonly evaluate: (globals: GlobalProperties, feature?: Feature, featureState?: FeatureState, availableImages?: Array<string>, formattedSection?: FormattedSection) => any;
        readonly interpolationFactor: (input: number, lower: number, upper: number) => number;
        zoomStops: Array<number>;
        interpolationType: InterpolationType | undefined | null;
    };
    export type StylePropertyExpression = ConstantExpression | SourceExpression | CameraExpression | CompositeExpression;
    export function createPropertyExpression(expression: unknown, propertySpec: StylePropertySpecification): Result<StylePropertyExpression, Array<ParsingError>>;
    export class StylePropertyFunction<T> {
        _parameters: PropertyValueSpecification<any>;
        _specification: StylePropertySpecification;
        kind: EvaluationKind;
        evaluate: (globals: GlobalProperties, feature?: Feature) => any;
        interpolationFactor: ((input: number, lower: number, upper: number) => number) | undefined | null;
        zoomStops: Array<number> | undefined | null;
        constructor(parameters: PropertyValueSpecification<any>, specification: StylePropertySpecification);
        static deserialize(serialized: {
            _parameters: PropertyValueSpecification<any>;
            _specification: StylePropertySpecification;
        }): StylePropertyFunction<any>;
        static serialize(input: StylePropertyFunction<any>): {
            _parameters: any;
            _specification: StylePropertySpecification;
        };
    }
    export function normalizePropertyExpression<T>(value: PropertyValueSpecification<T>, specification: StylePropertySpecification): StylePropertyExpression;
}

declare module 'mapbox-gl/style-spec/expression/types/collator' {
    class Intl$Collator {
        constructor(locales?: string | string[], options?: CollatorOptions);
        compare(a: string, b: string): number;
        resolvedOptions(): any;
    }
    type CollatorOptions = {
        localeMatcher?: "lookup" | "best fit";
        usage?: "sort" | "search";
        sensitivity?: "base" | "accent" | "case" | "variant";
        ignorePunctuation?: boolean;
        numeric?: boolean;
        caseFirst?: "upper" | "lower" | "false";
    };
    export default class Collator {
        locale: string | null;
        sensitivity: "base" | "accent" | "case" | "variant";
        collator: Intl$Collator;
        constructor(caseSensitive: boolean, diacriticSensitive: boolean, locale: string | null);
        compare(lhs: string, rhs: string): number;
        resolvedLocale(): string;
    }
    export {};
}

declare module 'mapbox-gl/style-spec/expression/parsing_context' {
    import Scope from 'mapbox-gl/style-spec/expression/scope';
    import ParsingError from 'mapbox-gl/style-spec/expression/parsing_error';
    import { Expression, ExpressionRegistry } from 'mapbox-gl/style-spec/expression/expression';
    import { Type } from 'mapbox-gl/style-spec/expression/types';
    class ParsingContext {
        registry: ExpressionRegistry;
        path: Array<number>;
        key: string;
        scope: Scope;
        errors: Array<ParsingError>;
        expectedType: Type | undefined | null;
        constructor(registry: ExpressionRegistry, path?: Array<number>, expectedType?: Type | null, scope?: Scope, errors?: Array<ParsingError>);
        parse(expr: unknown, index?: number, expectedType?: Type | null, bindings?: Array<[string, Expression]>, options?: {
            typeAnnotation?: "assert" | "coerce" | "omit";
        }): Expression | undefined | null;
        _parse(expr: unknown, options: {
            typeAnnotation?: "assert" | "coerce" | "omit";
        }): Expression | undefined | null;
        concat(index: number, expectedType?: Type | null, bindings?: Array<[string, Expression]>): ParsingContext;
        error(error: string, ...keys: Array<number>): void;
        checkSubtype(expected: Type, t: Type): string | undefined | null;
    }
    export default ParsingContext;
}

declare module 'mapbox-gl/style-spec/expression/stops' {
    import { Expression } from 'mapbox-gl/style-spec/expression/expression';
    export type Stops = Array<[number, Expression]>;
    export function findStopLessThanOrEqualTo(stops: Array<number>, input: number): number;
}

declare module 'mapbox-gl/style/style_layer/symbol_style_layer_properties' {
    import { Properties, DataConstantProperty, DataDrivenProperty } from 'mapbox-gl/style/properties';
    import Color from 'mapbox-gl/style-spec/util/color';
    import Formatted from 'mapbox-gl/style-spec/expression/types/formatted';
    import ResolvedImage from 'mapbox-gl/style-spec/expression/types/resolved_image';
    export type LayoutProps = {
        "symbol-placement": DataConstantProperty<"point" | "line" | "line-center">;
        "symbol-spacing": DataConstantProperty<number>;
        "symbol-avoid-edges": DataConstantProperty<boolean>;
        "symbol-sort-key": DataDrivenProperty<number>;
        "symbol-z-order": DataConstantProperty<"auto" | "viewport-y" | "source">;
        "icon-allow-overlap": DataConstantProperty<boolean>;
        "icon-ignore-placement": DataConstantProperty<boolean>;
        "icon-optional": DataConstantProperty<boolean>;
        "icon-rotation-alignment": DataConstantProperty<"map" | "viewport" | "auto">;
        "icon-size": DataDrivenProperty<number>;
        "icon-text-fit": DataConstantProperty<"none" | "width" | "height" | "both">;
        "icon-text-fit-padding": DataConstantProperty<[number, number, number, number]>;
        "icon-image": DataDrivenProperty<ResolvedImage>;
        "icon-rotate": DataDrivenProperty<number>;
        "icon-padding": DataConstantProperty<number>;
        "icon-keep-upright": DataConstantProperty<boolean>;
        "icon-offset": DataDrivenProperty<[number, number]>;
        "icon-anchor": DataDrivenProperty<"center" | "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right">;
        "icon-pitch-alignment": DataConstantProperty<"map" | "viewport" | "auto">;
        "text-pitch-alignment": DataConstantProperty<"map" | "viewport" | "auto">;
        "text-rotation-alignment": DataConstantProperty<"map" | "viewport" | "auto">;
        "text-field": DataDrivenProperty<Formatted>;
        "text-font": DataDrivenProperty<Array<string>>;
        "text-size": DataDrivenProperty<number>;
        "text-max-width": DataDrivenProperty<number>;
        "text-line-height": DataConstantProperty<number>;
        "text-letter-spacing": DataDrivenProperty<number>;
        "text-justify": DataDrivenProperty<"auto" | "left" | "center" | "right">;
        "text-radial-offset": DataDrivenProperty<number>;
        "text-variable-anchor": DataConstantProperty<Array<"center" | "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right">>;
        "text-anchor": DataDrivenProperty<"center" | "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right">;
        "text-max-angle": DataConstantProperty<number>;
        "text-writing-mode": DataConstantProperty<Array<"horizontal" | "vertical">>;
        "text-rotate": DataDrivenProperty<number>;
        "text-padding": DataConstantProperty<number>;
        "text-keep-upright": DataConstantProperty<boolean>;
        "text-transform": DataDrivenProperty<"none" | "uppercase" | "lowercase">;
        "text-offset": DataDrivenProperty<[number, number]>;
        "text-allow-overlap": DataConstantProperty<boolean>;
        "text-ignore-placement": DataConstantProperty<boolean>;
        "text-optional": DataConstantProperty<boolean>;
    };
    export type PaintProps = {
        "icon-opacity": DataDrivenProperty<number>;
        "icon-color": DataDrivenProperty<Color>;
        "icon-halo-color": DataDrivenProperty<Color>;
        "icon-halo-width": DataDrivenProperty<number>;
        "icon-halo-blur": DataDrivenProperty<number>;
        "icon-translate": DataConstantProperty<[number, number]>;
        "icon-translate-anchor": DataConstantProperty<"map" | "viewport">;
        "text-opacity": DataDrivenProperty<number>;
        "text-color": DataDrivenProperty<Color>;
        "text-halo-color": DataDrivenProperty<Color>;
        "text-halo-width": DataDrivenProperty<number>;
        "text-halo-blur": DataDrivenProperty<number>;
        "text-translate": DataConstantProperty<[number, number]>;
        "text-translate-anchor": DataConstantProperty<"map" | "viewport">;
    };
    const _default: {
        paint: Properties<PaintProps>;
        layout: Properties<LayoutProps>;
    };
    export default _default;
}

declare module 'mapbox-gl/data/bucket/circle_bucket' {
    import { CircleLayoutArray } from 'mapbox-gl/data/array_types';
    import SegmentVector from 'mapbox-gl/data/segment';
    import { ProgramConfigurationSet } from 'mapbox-gl/data/program_configuration';
    import { TriangleIndexArray } from 'mapbox-gl/data/index_array_type';
    import { Bucket, BucketParameters, BucketFeature, IndexedFeature, PopulateParameters } from 'mapbox-gl/data/bucket';
    import CircleStyleLayer from 'mapbox-gl/style/style_layer/circle_style_layer';
    import HeatmapStyleLayer from 'mapbox-gl/style/style_layer/heatmap_style_layer';
    import Context from 'mapbox-gl/gl/context';
    import IndexBuffer from 'mapbox-gl/gl/index_buffer';
    import VertexBuffer from 'mapbox-gl/gl/vertex_buffer';
    import { FeatureStates } from 'mapbox-gl/source/source_state';
    import { ImagePosition } from 'mapbox-gl/render/image_atlas';
    class CircleBucket<Layer extends CircleStyleLayer | HeatmapStyleLayer> implements Bucket {
        index: number;
        zoom: number;
        overscaling: number;
        layerIds: Array<string>;
        layers: Array<Layer>;
        stateDependentLayers: Array<Layer>;
        stateDependentLayerIds: Array<string>;
        layoutVertexArray: CircleLayoutArray;
        layoutVertexBuffer: VertexBuffer;
        indexArray: TriangleIndexArray;
        indexBuffer: IndexBuffer;
        hasPattern: boolean;
        programConfigurations: ProgramConfigurationSet<Layer>;
        segments: SegmentVector;
        uploaded: boolean;
        constructor(options: BucketParameters<Layer>);
        populate(features: Array<IndexedFeature>, options: PopulateParameters): void;
        update(states: FeatureStates, vtLayer: typeof import("@mapbox/vector-tile").VectorTileLayer, imagePositions: {
            [x: string]: ImagePosition;
        }): void;
        isEmpty(): boolean;
        uploadPending(): boolean;
        upload(context: Context): void;
        destroy(): void;
        addFeature(feature: BucketFeature, geometry: Array<Array<typeof import("@mapbox/point-geometry").default>>, index: number): void;
    }
    export default CircleBucket;
}

declare module 'mapbox-gl/style/style_layer/circle_style_layer_properties' {
    import { Properties, DataConstantProperty, DataDrivenProperty } from 'mapbox-gl/style/properties';
    import Color from 'mapbox-gl/style-spec/util/color';
    export type LayoutProps = {
        "circle-sort-key": DataDrivenProperty<number>;
    };
    export type PaintProps = {
        "circle-radius": DataDrivenProperty<number>;
        "circle-color": DataDrivenProperty<Color>;
        "circle-blur": DataDrivenProperty<number>;
        "circle-opacity": DataDrivenProperty<number>;
        "circle-translate": DataConstantProperty<[number, number]>;
        "circle-translate-anchor": DataConstantProperty<"map" | "viewport">;
        "circle-pitch-scale": DataConstantProperty<"map" | "viewport">;
        "circle-pitch-alignment": DataConstantProperty<"map" | "viewport">;
        "circle-stroke-width": DataDrivenProperty<number>;
        "circle-stroke-color": DataDrivenProperty<Color>;
        "circle-stroke-opacity": DataDrivenProperty<number>;
    };
    const _default: {
        paint: Properties<PaintProps>;
        layout: Properties<LayoutProps>;
    };
    export default _default;
}

declare module 'mapbox-gl/data/bucket/fill_bucket' {
    import { FillLayoutArray } from 'mapbox-gl/data/array_types';
    import SegmentVector from 'mapbox-gl/data/segment';
    import { ProgramConfigurationSet } from 'mapbox-gl/data/program_configuration';
    import { LineIndexArray, TriangleIndexArray } from 'mapbox-gl/data/index_array_type';
    import { Bucket, BucketParameters, BucketFeature, IndexedFeature, PopulateParameters } from 'mapbox-gl/data/bucket';
    import FillStyleLayer from 'mapbox-gl/style/style_layer/fill_style_layer';
    import Context from 'mapbox-gl/gl/context';
    import IndexBuffer from 'mapbox-gl/gl/index_buffer';
    import VertexBuffer from 'mapbox-gl/gl/vertex_buffer';
    import { FeatureStates } from 'mapbox-gl/source/source_state';
    import { ImagePosition } from 'mapbox-gl/render/image_atlas';
    class FillBucket implements Bucket {
        index: number;
        zoom: number;
        overscaling: number;
        layers: Array<FillStyleLayer>;
        layerIds: Array<string>;
        stateDependentLayers: Array<FillStyleLayer>;
        stateDependentLayerIds: Array<string>;
        patternFeatures: Array<BucketFeature>;
        layoutVertexArray: FillLayoutArray;
        layoutVertexBuffer: VertexBuffer;
        indexArray: TriangleIndexArray;
        indexBuffer: IndexBuffer;
        indexArray2: LineIndexArray;
        indexBuffer2: IndexBuffer;
        hasPattern: boolean;
        programConfigurations: ProgramConfigurationSet<FillStyleLayer>;
        segments: SegmentVector;
        segments2: SegmentVector;
        uploaded: boolean;
        constructor(options: BucketParameters<FillStyleLayer>);
        populate(features: Array<IndexedFeature>, options: PopulateParameters): void;
        update(states: FeatureStates, vtLayer: typeof import("@mapbox/vector-tile").VectorTileLayer, imagePositions: {
            [x: string]: ImagePosition;
        }): void;
        addFeatures(options: PopulateParameters, imagePositions: {
            [x: string]: ImagePosition;
        }): void;
        isEmpty(): boolean;
        uploadPending(): boolean;
        upload(context: Context): void;
        destroy(): void;
        addFeature(feature: BucketFeature, geometry: Array<Array<typeof import("@mapbox/point-geometry").default>>, index: number, imagePositions: {
            [x: string]: ImagePosition;
        }): void;
    }
    export default FillBucket;
}

declare module 'mapbox-gl/style/style_layer/fill_style_layer_properties' {
    import { Properties, DataConstantProperty, DataDrivenProperty, CrossFadedDataDrivenProperty } from 'mapbox-gl/style/properties';
    import Color from 'mapbox-gl/style-spec/util/color';
    import ResolvedImage from 'mapbox-gl/style-spec/expression/types/resolved_image';
    export type LayoutProps = {
        "fill-sort-key": DataDrivenProperty<number>;
    };
    export type PaintProps = {
        "fill-antialias": DataConstantProperty<boolean>;
        "fill-opacity": DataDrivenProperty<number>;
        "fill-color": DataDrivenProperty<Color>;
        "fill-outline-color": DataDrivenProperty<Color>;
        "fill-translate": DataConstantProperty<[number, number]>;
        "fill-translate-anchor": DataConstantProperty<"map" | "viewport">;
        "fill-pattern": CrossFadedDataDrivenProperty<ResolvedImage>;
    };
    const _default: {
        paint: Properties<PaintProps>;
        layout: Properties<LayoutProps>;
    };
    export default _default;
}

declare module 'mapbox-gl/data/bucket/fill_extrusion_bucket' {
    import { FillExtrusionLayoutArray } from 'mapbox-gl/data/array_types';
    import SegmentVector from 'mapbox-gl/data/segment';
    import { ProgramConfigurationSet } from 'mapbox-gl/data/program_configuration';
    import { TriangleIndexArray } from 'mapbox-gl/data/index_array_type';
    import { Bucket, BucketParameters, BucketFeature, IndexedFeature, PopulateParameters } from 'mapbox-gl/data/bucket';
    import FillExtrusionStyleLayer from 'mapbox-gl/style/style_layer/fill_extrusion_style_layer';
    import Context from 'mapbox-gl/gl/context';
    import IndexBuffer from 'mapbox-gl/gl/index_buffer';
    import VertexBuffer from 'mapbox-gl/gl/vertex_buffer';
    import { FeatureStates } from 'mapbox-gl/source/source_state';
    import { ImagePosition } from 'mapbox-gl/render/image_atlas';
    class FillExtrusionBucket implements Bucket {
        index: number;
        zoom: number;
        overscaling: number;
        layers: Array<FillExtrusionStyleLayer>;
        layerIds: Array<string>;
        stateDependentLayers: Array<FillExtrusionStyleLayer>;
        stateDependentLayerIds: Array<string>;
        layoutVertexArray: FillExtrusionLayoutArray;
        layoutVertexBuffer: VertexBuffer;
        indexArray: TriangleIndexArray;
        indexBuffer: IndexBuffer;
        hasPattern: boolean;
        programConfigurations: ProgramConfigurationSet<FillExtrusionStyleLayer>;
        segments: SegmentVector;
        uploaded: boolean;
        features: Array<BucketFeature>;
        constructor(options: BucketParameters<FillExtrusionStyleLayer>);
        populate(features: Array<IndexedFeature>, options: PopulateParameters): void;
        addFeatures(options: PopulateParameters, imagePositions: {
            [x: string]: ImagePosition;
        }): void;
        update(states: FeatureStates, vtLayer: typeof import("@mapbox/vector-tile").VectorTileLayer, imagePositions: {
            [x: string]: ImagePosition;
        }): void;
        isEmpty(): boolean;
        uploadPending(): boolean;
        upload(context: Context): void;
        destroy(): void;
        addFeature(feature: BucketFeature, geometry: Array<Array<typeof import("@mapbox/point-geometry").default>>, index: number, imagePositions: {
            [x: string]: ImagePosition;
        }): void;
    }
    export default FillExtrusionBucket;
}

declare module 'mapbox-gl/style/style_layer/fill_extrusion_style_layer_properties' {
    import { Properties, DataConstantProperty, DataDrivenProperty, CrossFadedDataDrivenProperty } from 'mapbox-gl/style/properties';
    import Color from 'mapbox-gl/style-spec/util/color';
    import ResolvedImage from 'mapbox-gl/style-spec/expression/types/resolved_image';
    export type PaintProps = {
        "fill-extrusion-opacity": DataConstantProperty<number>;
        "fill-extrusion-color": DataDrivenProperty<Color>;
        "fill-extrusion-translate": DataConstantProperty<[number, number]>;
        "fill-extrusion-translate-anchor": DataConstantProperty<"map" | "viewport">;
        "fill-extrusion-pattern": CrossFadedDataDrivenProperty<ResolvedImage>;
        "fill-extrusion-height": DataDrivenProperty<number>;
        "fill-extrusion-base": DataDrivenProperty<number>;
        "fill-extrusion-vertical-gradient": DataConstantProperty<boolean>;
    };
    const _default: {
        paint: Properties<PaintProps>;
    };
    export default _default;
}

declare module 'mapbox-gl/data/bucket/heatmap_bucket' {
    import CircleBucket from 'mapbox-gl/data/bucket/circle_bucket';
    import HeatmapStyleLayer from 'mapbox-gl/style/style_layer/heatmap_style_layer';
    class HeatmapBucket extends CircleBucket<HeatmapStyleLayer> {
        layers: Array<HeatmapStyleLayer>;
    }
    export default HeatmapBucket;
}

declare module 'mapbox-gl/style/style_layer/heatmap_style_layer_properties' {
    import { Properties, DataConstantProperty, DataDrivenProperty, ColorRampProperty } from 'mapbox-gl/style/properties';
    export type PaintProps = {
        "heatmap-radius": DataDrivenProperty<number>;
        "heatmap-weight": DataDrivenProperty<number>;
        "heatmap-intensity": DataConstantProperty<number>;
        "heatmap-color": ColorRampProperty;
        "heatmap-opacity": DataConstantProperty<number>;
    };
    const _default: {
        paint: Properties<PaintProps>;
    };
    export default _default;
}

declare module 'mapbox-gl/style/style_layer/hillshade_style_layer_properties' {
    import { Properties, DataConstantProperty } from 'mapbox-gl/style/properties';
    import Color from 'mapbox-gl/style-spec/util/color';
    export type PaintProps = {
        "hillshade-illumination-direction": DataConstantProperty<number>;
        "hillshade-illumination-anchor": DataConstantProperty<"map" | "viewport">;
        "hillshade-exaggeration": DataConstantProperty<number>;
        "hillshade-shadow-color": DataConstantProperty<Color>;
        "hillshade-highlight-color": DataConstantProperty<Color>;
        "hillshade-accent-color": DataConstantProperty<Color>;
    };
    const _default: {
        paint: Properties<PaintProps>;
    };
    export default _default;
}

declare module 'mapbox-gl/data/bucket/line_bucket' {
    import { LineLayoutArray } from 'mapbox-gl/data/array_types';
    import SegmentVector from 'mapbox-gl/data/segment';
    import { ProgramConfigurationSet } from 'mapbox-gl/data/program_configuration';
    import { TriangleIndexArray } from 'mapbox-gl/data/index_array_type';
    import { Bucket, BucketParameters, BucketFeature, IndexedFeature, PopulateParameters } from 'mapbox-gl/data/bucket';
    import LineStyleLayer from 'mapbox-gl/style/style_layer/line_style_layer';
    import { Segment } from 'mapbox-gl/data/segment';
    import Context from 'mapbox-gl/gl/context';
    import IndexBuffer from 'mapbox-gl/gl/index_buffer';
    import VertexBuffer from 'mapbox-gl/gl/vertex_buffer';
    import { FeatureStates } from 'mapbox-gl/source/source_state';
    import { ImagePosition } from 'mapbox-gl/render/image_atlas';
    class LineBucket implements Bucket {
        distance: number;
        totalDistance: number;
        scaledDistance: number;
        clipStart: number;
        clipEnd: number;
        e1: number;
        e2: number;
        index: number;
        zoom: number;
        overscaling: number;
        layers: Array<LineStyleLayer>;
        layerIds: Array<string>;
        stateDependentLayers: Array<any>;
        stateDependentLayerIds: Array<string>;
        patternFeatures: Array<BucketFeature>;
        layoutVertexArray: LineLayoutArray;
        layoutVertexBuffer: VertexBuffer;
        indexArray: TriangleIndexArray;
        indexBuffer: IndexBuffer;
        hasPattern: boolean;
        programConfigurations: ProgramConfigurationSet<LineStyleLayer>;
        segments: SegmentVector;
        uploaded: boolean;
        constructor(options: BucketParameters<LineStyleLayer>);
        populate(features: Array<IndexedFeature>, options: PopulateParameters): void;
        update(states: FeatureStates, vtLayer: typeof import("@mapbox/vector-tile").VectorTileLayer, imagePositions: {
            [x: string]: ImagePosition;
        }): void;
        addFeatures(options: PopulateParameters, imagePositions: {
            [x: string]: ImagePosition;
        }): void;
        isEmpty(): boolean;
        uploadPending(): boolean;
        upload(context: Context): void;
        destroy(): void;
        addFeature(feature: BucketFeature, geometry: Array<Array<typeof import("@mapbox/point-geometry").default>>, index: number, imagePositions: {
            [x: string]: ImagePosition;
        }): void;
        addLine(vertices: Array<typeof import("@mapbox/point-geometry").default>, feature: BucketFeature, join: string, cap: string, miterLimit: number, roundLimit: number, index: number, imagePositions: {
            [x: string]: ImagePosition;
        }): void;
        addCurrentVertex(p: typeof import("@mapbox/point-geometry").default, normal: typeof import("@mapbox/point-geometry").default, endLeft: number, endRight: number, segment: Segment, round?: boolean): void;
        addHalfVertex({ x, y }: typeof import("@mapbox/point-geometry").default, extrudeX: number, extrudeY: number, round: boolean, up: boolean, dir: number, segment: Segment): void;
        updateDistance(prev: typeof import("@mapbox/point-geometry").default, next: typeof import("@mapbox/point-geometry").default): void;
    }
    export default LineBucket;
}

declare module 'mapbox-gl/style/style_layer/line_style_layer_properties' {
    import { Properties, DataConstantProperty, DataDrivenProperty, CrossFadedDataDrivenProperty, CrossFadedProperty, ColorRampProperty } from 'mapbox-gl/style/properties';
    import Color from 'mapbox-gl/style-spec/util/color';
    import ResolvedImage from 'mapbox-gl/style-spec/expression/types/resolved_image';
    export type LayoutProps = {
        "line-cap": DataConstantProperty<"butt" | "round" | "square">;
        "line-join": DataDrivenProperty<"bevel" | "round" | "miter">;
        "line-miter-limit": DataConstantProperty<number>;
        "line-round-limit": DataConstantProperty<number>;
        "line-sort-key": DataDrivenProperty<number>;
    };
    export type PaintProps = {
        "line-opacity": DataDrivenProperty<number>;
        "line-color": DataDrivenProperty<Color>;
        "line-translate": DataConstantProperty<[number, number]>;
        "line-translate-anchor": DataConstantProperty<"map" | "viewport">;
        "line-width": DataDrivenProperty<number>;
        "line-gap-width": DataDrivenProperty<number>;
        "line-offset": DataDrivenProperty<number>;
        "line-blur": DataDrivenProperty<number>;
        "line-dasharray": CrossFadedProperty<Array<number>>;
        "line-pattern": CrossFadedDataDrivenProperty<ResolvedImage>;
        "line-gradient": ColorRampProperty;
    };
    const _default: {
        paint: Properties<PaintProps>;
        layout: Properties<LayoutProps>;
    };
    export default _default;
}

declare module 'mapbox-gl/style-spec/expression/scope' {
    import { Expression } from 'mapbox-gl/style-spec/expression/expression';
    class Scope {
        parent: Scope | undefined | null;
        bindings: {
            [x: string]: Expression;
        };
        constructor(parent?: Scope, bindings?: Array<[string, Expression]>);
        concat(bindings: Array<[string, Expression]>): Scope;
        get(name: string): Expression;
        has(name: string): boolean;
    }
    export default Scope;
}

